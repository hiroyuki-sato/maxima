This is descriptive.info, produced by makeinfo version 4.8 from
descriptive.texi.


File: descriptive.info,  Node: Top,  Next: Introduction to descriptive,  Prev: (dir),  Up: (dir)

descriptive
***********

* Menu:

* Introduction to descriptive::
* Definitions for data manipulation::
* Definitions for descriptive statistics::
* Definitions for specific multivariate descriptive statistics::
* Definitions for statistical graphs::
* Function and variable index::


File: descriptive.info,  Node: Introduction to descriptive,  Next: Definitions for data manipulation,  Prev: Top,  Up: Top

Introduction to descriptive
===========================

Package `descriptive' contains a set of functions for making
descriptive statistical computations and graphing. Together with the
source code there are three data sets in your Maxima tree:
`pidigits.data', `wind.data' and `biomed.data'. They can be also
downloaded from the web site `www.biomates.net'.

   Any statistics manual can be used as a reference to the functions in
package `descriptive'.

   For comments, bugs or suggestions, please contact me at <'mario AT
edu DOT xunta DOT es'>.

   Here is a simple example on how the descriptive functions in
`descriptive' do they work, depending on the nature of their arguments,
lists or matrices,

     (%i1) load(descriptive)$
     (%i2) /* univariate sample */
           mean([a,b,c]);
                              c + b + a
     (%o2)                    ---------
                                  3
     (%i3) /* multivariate sample */
           matrix([a,b],[c,d],[e,f]);
                               [ a  b ]
                               [      ]
     (%o3)                     [ c  d ]
                               [      ]
                               [ e  f ]
     (%i4) mean(%);
                         e + c + a  f + d + b
     (%o4)              [---------, ---------]
                             3          3

   Note that in multivariate samples the mean is calculated for each
column.

   In case of several samples with possible different sizes, the Maxima
function `map' can be used to get the desired results for each sample,

     (%i5) map(mean,[[a,b,c],[d,e]]);
                           c + b + a  e + d
     (%o5)                [---------, -----]
                               3        2

   In this case, two samples of sizes 3 and 2 were stored into a list.

   Univariate samples must be stored in lists like

     (%i6) s1:[3,1,4,1,5,9,2,6,5,3,5];
     (%o6)       [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]

   and multivariate samples in matrices as in

     (%i7) s2:matrix([13.17, 9.29],[14.71, 16.88],[18.50, 16.88],
                     [10.58,  6.63],[13.33, 13.25],[13.21, 8.12]);
                           [ 13.17  9.29  ]
                           [              ]
                           [ 14.71  16.88 ]
                           [              ]
                           [ 18.5   16.88 ]
     (%o7)                 [              ]
                           [ 10.58  6.63  ]
                           [              ]
                           [ 13.33  13.25 ]
                           [              ]
                           [ 13.21  8.12  ]

   In this case, the number of columns equals the random variable
dimension and the number of rows is the sample size.

   Data can be introduced by hand, but big samples are usually stored
in plain text files. For example, file `pidigits.data' contains the
first 100 digits of number `%pi':
           3
           1
           4
           1
           5
           9
           2
           6
           5
           3 ...

   In order to load these digits in Maxima,

     (%i8) load(numericalio)$
     (%i9) s1:read_list("path_to/pidigits.data")$
     (%i10) length(s1);
     (%o10)                      100

   On the other hand, file `wind.data' contains daily average wind
speeds at 5 meteorological stations in the Republic of Ireland (This is
part of a data set taken at 12 meteorological stations. The original
file is freely downloadable from the StatLib Data Repository and its
analysis is discused in Haslett, J., Raftery, A. E. (1989) <Space-time
Modelling with Long-memory Dependence: Assessing Ireland's Wind Power
Resource, with Discussion>. Applied Statistics 38, 1-50). This loads
the data:

     (%i11) s2:read_matrix("path_to/wind.data")$
     (%i12) length(s2);
     (%o12)                      100
     (%i13) s2[%]; /* last record */
     (%o13)         [3.58, 6.0, 4.58, 7.62, 11.25]

   Some samples contain non numeric data. As an example, file
`biomed.data' (which is part of another bigger one downloaded from the
StatLib Data Repository) contains four blood measures taken from two
groups of patients, `A' and `B', of different ages,

     (%i14) s3:read_matrix("path_to/biomed.data")$
     (%i15) length(s3);
     (%o15)                      100
     (%i16) s3[1]; /* first record */
     (%o16)        [A, 30, 167.0, 89.0, 25.6, 364]

   The first individual belongs to group `A', is 30 years old and
his/her blood measures were 167.0, 89.0, 25.6 and 364.

   One must take care when working with categorical data. In the next
example, symbol `a' is asigned a value in some previous moment and then
a sample with categorical value `a' is taken,

     (%i17) a:1$
     (%i18) matrix([a,3],[b,5]);
                               [ 1  3 ]
     (%o18)                    [      ]
                               [ b  5 ]


File: descriptive.info,  Node: Definitions for data manipulation,  Next: Definitions for descriptive statistics,  Prev: Introduction to descriptive,  Up: Top

Definitions for data manipulation
=================================

 -- Function: cfrec (<list>)
 -- Function: cfrec (<list>, <m>)
     The argument of `cfrec' must be a list of numbers, which will be
     then grouped in intervals and counted how many of them belong to
     each group. Optionally, function `cfrec' admits a second argument
     indicating the number of classes, 10 is default,

          (%i1) load("numericalio.lisp")$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) cfrec(s1,5);
          (%o3) [[0, 1.8, 3.6, 5.4, 7.2, 9.0], [16, 24, 18, 17, 25]]

     The first list contains the interval limits and the second the
     corresponding counts: there are 16 digits inside the interval `[0,
     1.8]', that is 0's and 1's, 24 digits in `(1.8, 3.6]', that is 2's
     and 3's, and so on.

 -- Function: dfrec (<list>)
     Counts absolute frequencies in discrete samples, both numeric and
     categorical. Its unique argument is a list,

          (%i1) load("numericalio.lisp")$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) dfrec(s1);
          (%o3) [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
                                  [8, 8, 12, 12, 10, 8, 9, 8, 12, 13]]
          (%i4) dfrec(transpose(col(s3,1))[1]);
          (%o4)               [[A, B], [35, 65]]

     The first list gives the sample values and the second their
     absolute frequencies. Commands `? col' and `? transpose' should
     help you to understand the last input.

 -- Function: subsample (<data_matrix>, <logical_expression>)
 -- Function: subsample (<data_matrix>, <logical_expression>,
          <col_num>, <col_num>, ...)
     This is a sort of variation of the Maxima `submatrix' function.
     The first argument is the name of the data matrix, the second is a
     quoted logical expression and optional additional arguments are
     the numbers of the columns to be taken. Its behaviour is better
     understood with examples,
          (%i1) load("numericalio.lisp")$
          (%i2) s2:read_matrix("path_to/wind.data")$
          (%i3) subsample(s2,'(%c[1]>18));
                     [ 19.38  15.37  15.12  23.09  25.25 ]
                     [                                   ]
                     [ 18.29  18.66  19.08  26.08  27.63 ]
          (%o3)      [                                   ]
                     [ 20.25  21.46  19.95  27.71  23.38 ]
                     [                                   ]
                     [ 18.79  18.96  14.46  26.38  21.84 ]
     These are multivariate records in which the wind speeds in the
     first meteorological station were greater than 18. See that in the
     quoted logical expression the <i>-th component is refered to as
     `%c[i]'. Symbol `%c[i]' is used inside function `subsample',
     therefore when used as a categorical variable, Maxima gets
     confused. In the following example, we request only the first,
     second and fifth components of those records with wind speeds
     greater or equal than 16 in station number 1 and lesser than 25
     knots in station number 4,
          (%i4) subsample(s2,'(%c[1]>=16 and %c[4]<25),1,2,5);
                            [ 19.38  15.37  25.25 ]
                            [                     ]
                            [ 17.33  14.67  19.58 ]
          (%o4)             [                     ]
                            [ 16.92  13.21  21.21 ]
                            [                     ]
                            [ 17.25  18.46  23.87 ]

     Here is an example with the categorical variables of
     `biomed.data'. We want the records corresponding to those patients
     in group `B' who are older than 38 years,
          (%i5) subsample(s3,'(%c[1]=B and %c[2]>38));
                       [ B  39  28.0  102.3  17.1  146 ]
                       [                               ]
                       [ B  39  21.0  92.4   10.3  197 ]
                       [                               ]
                       [ B  39  23.0  111.5  10.0  133 ]
                       [                               ]
                       [ B  39  26.0  92.6   12.3  196 ]
          (%o5)        [                               ]
                       [ B  39  25.0  98.7   10.0  174 ]
                       [                               ]
                       [ B  39  21.0  93.2   5.9   181 ]
                       [                               ]
                       [ B  39  18.0  95.0   11.3  66  ]
                       [                               ]
                       [ B  39  39.0  88.5   7.6   168 ]

     Probably, the statistical analysis will involve only the blood
     measures,
          (%i6) subsample(s3,'(%c[1]=B and %c[2]>38),3,4,5,6);
                           [ 28.0  102.3  17.1  146 ]
                           [                        ]
                           [ 21.0  92.4   10.3  197 ]
                           [                        ]
                           [ 23.0  111.5  10.0  133 ]
                           [                        ]
                           [ 26.0  92.6   12.3  196 ]
          (%o6)            [                        ]
                           [ 25.0  98.7   10.0  174 ]
                           [                        ]
                           [ 21.0  93.2   5.9   181 ]
                           [                        ]
                           [ 18.0  95.0   11.3  66  ]
                           [                        ]
                           [ 39.0  88.5   7.6   168 ]

     This is the multivariate mean of `s3',
          (%i7) s3:read_matrix("path_to/biomed.data")$
          (%i8) mean(s3);
                 65 B + 35 A  317          6 NA + 8145.0
          (%o8) [-----------, ---, 87.178, -------------, 18.123,
                     100      10                100
                                                        3 NA + 19587
                                                        ------------]
                                                            100
     Here, the first component is meaningless, since `A' and `B' are
     categorical, the second component is the mean age of individuals
     in rational form, and the fourth and last values exhibit some
     strange behaviour. This is because symbol `NA' is used here to
     indicate <non available> data, and the two means are of course
     nonsense. A possible solution would be to take out from the matrix
     those rows with `NA' symbols, although this deserves some loss of
     information,
          (%i9) mean(subsample(s3,'(%c[4]#NA and %c[6]#NA),3,4,5,6));
          (%o9) [79.4923076923077, 86.2032967032967,
                                                                2514
                                             16.93186813186813, ----]
                                                                 13


File: descriptive.info,  Node: Definitions for descriptive statistics,  Next: Definitions for specific multivariate descriptive statistics,  Prev: Definitions for data manipulation,  Up: Top

Definitions for descriptive statistics
======================================

 -- Function: mean (<list>)
 -- Function: mean (<matrix>)
     This is the sample mean, defined as
                                 n
                               ====
                       _   1   \
                       x = -    >    x
                           n   /      i
                               ====
                               i = 1

     Example:
          (%i1) load(numericalio)$
          (%i1) s1:read_list("path_to/pidigits.data")$
          (%i2) mean(s1);
                                      471
          (%o2)                       ---
                                      100
          (%i3) %, numer;
          (%o3)                      4.71
          (%i4) s2:read_matrix("path_to/wind.data")$
          (%i5) mean(s2);
          (%o5)   [9.9485, 10.1607, 10.8685, 15.7166, 14.8441]

 -- Function: var (<list>)
 -- Function: var (<matrix>)
     This is the sample variance, defined as
                               n
                             ====
                     2   1   \          _ 2
                    s  = -    >    (x - x)
                         n   /       i
                             ====
                             i = 1

     Example:
          (%i1) load(numericalio)$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) var(s1), numer;
          (%o3)               8.425899999999999

     See also function `var1'.

 -- Function: var1 (<list>)
 -- Function: var1 (<matrix>)
     This is the sample variance, defined as
                               n
                             ====
                         1   \          _ 2
                        ---   >    (x - x)
                        n-1  /       i
                             ====
                             i = 1

     Example:
          (%i1) load(numericalio)$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) var1(s1), numer;
          (%o3)                8.5110101010101
          (%i4) s2:read_matrix("path_to/wind.data")$
          (%i5) var(s2);
          (%o5) [17.22190675000001, 14.98773651, 15.47572875,
                              32.17651044000001, 24.42307619000001]

     See also function `var'.

 -- Function: std (<list>)
 -- Function: std (<matrix>)
     This is the the square root of function `var', the variance with
     denominator n.

     Example:
          (%i1) load(numericalio)$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) std(s1), numer;
          (%o3)               2.902740084816414
          (%i4) s2:read_matrix("path_to/wind.data")$
          (%i5) std(s2);
          (%o5) [4.149928523480858, 3.871399812729241,
              3.933920277534866, 5.672434260526957, 4.941970881136392]

     See also functions `var' and `std1'.

 -- Function: std1 (<list>)
 -- Function: std1 (<matrix>)
     This is the the square root of function `var1', the variance with
     denominator n-1.

     Example:
          (%i1) load(numericalio)$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) std1(s1), numer;
          (%o3)               2.917363553109228
          (%i4) s2:read_matrix("path_to/wind.data")$
          (%i5) std1(s2);
          (%o5) [4.17083509672109, 3.89090320978032,
              3.953738641137555, 5.701010936401517, 4.966867617451963]

     See also functions `var1' and `std'.

 -- Function: ncmoment (<list>, <k>)
 -- Function: ncmoment (<matrix>, <k>)
     The non central moment of order k, defined as
                                 n
                               ====
                           1   \      k
                           -    >    x
                           n   /      i
                               ====
                               i = 1

     Example:
          (%i1) load(numericalio)$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) ncmoment(s1,1), numer; /* the mean */
          (%o3)                      4.71
          (%i4) s2:read_matrix("path_to/wind.data")$
          (%i5) ncmoment(s2,5);
          (%o5) [319793.8724761506, 320532.1923892463,
              391249.5621381556, 2502278.205988911, 1691881.797742255]

     See also function `cmoment'.

 -- Function: cmoment (<list>, <k>)
 -- Function: cmoment (<matrix>, <k>)
     The central moment of order k, defined as
                              n
                            ====
                        1   \          _ k
                        -    >    (x - x)
                        n   /       i
                            ====
                            i = 1

     Example:
          (%i1) load(numericalio)$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) cmoment(s1,2), numer; /* the variance */
          (%o3)              8.425899999999999
          (%i4) s2:read_matrix("path_to/wind.data")$
          (%i5) cmoment(s2,3);
          (%o5) [11.29584771375004, 16.97988248298583,
               5.626661952750102, 37.5986572057918, 25.85981904394192]

     See also functions `cmoment' and `mean'.

 -- Function: vc (<list>)
 -- Function: vc (<matrix>)
     The variation coefficient is the quotient between the sample
     standard deviation (`std') and the `mean',
          (%i1) load(numericalio)$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) vc(s1), numer;
          (%o3)               .6193977819764815
          (%i4) s2:read_matrix("path_to/wind.data")$
          (%i5) vc(s2);
          (%o5) [.4192426091090204, .3829365309260502,
              0.363779605385983, .3627381836021478, .3346021393989506]

     See also functions `std' and `mean'.

 -- Function: mini (<list>)
 -- Function: mini (<matrix>)
     This is the minimum value of the sample <list>,
          (%i1) load(numericalio)$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) mini(s1);
          (%o3)                     0
          (%i4) s2:read_matrix("path_to/wind.data")$
          (%i5) mini(s2);
          (%o5)         [0.58, 0.5, 2.67, 5.25, 5.17]

     See also function `maxi'.

 -- Function: maxi (<list>)
 -- Function: maxi (<matrix>)
     This is the maximum value of the sample <list>,
          (%i1) load(numericalio)$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) maxi(s1);
          (%o3)                     9
          (%i4) s2:read_matrix("path_to/wind.data")$
          (%i5) maxi(s2);
          (%o5)      [20.25, 21.46, 20.04, 29.63, 27.63]

     See also function `mini'.

 -- Function: range (<list>)
 -- Function: range (<matrix>)
     The range is the difference between the extreme values.

     Example:
          (%i1) load(numericalio)$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) range(s1);
          (%o3)                       9
          (%i4) s2:read_matrix("path_to/wind.data")$
          (%i5) range(s2);
          (%o5)      [19.67, 20.96, 17.37, 24.38, 22.46]

 -- Function: quantile (<list>, <p>)
 -- Function: quantile (<matrix>, <p>)
     This is the <p>-`quantile', with <p> a number in [0, 1], of the
     sample <list>.  Although there are several definitions for the
     sample quantile (Hyndman, R. J., Fan, Y. (1996) <Sample quantiles
     in statistical packages>. American Statistician, 50, 361-365), the
     one based on linear interpolation is implemented in package
     `descriptive'.

     Example:
          (%i1) load(numericalio)$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) /* 1st and 3rd quartiles */
                [quantile(s1,1/4),quantile(s1,3/4)], numer;
          (%o3)                  [2.0, 7.25]
          (%i4) s2:read_matrix("path_to/wind.data")$
          (%i5) quantile(s2,1/4);
          (%o5) [7.2575, 7.477500000000001, 7.82, 11.28, 11.48]

 -- Function: median (<list>)
 -- Function: median (<matrix>)
     Once the sample is ordered, if the sample size is odd the median
     is the central value, otherwise it is the mean of the two central
     values.

     Example:
          (%i1) load(numericalio)$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) median(s1);
                                      9
          (%o3)                       -
                                      2
          (%i4) s2:read_matrix("path_to/wind.data")$
          (%i5) median(s2);
          (%o5)      [10.06, 9.855, 10.73, 15.48, 14.105]

     The median is the 1/2-`quantile'.

     See also function `quantile'.

 -- Function: qrange (<list>)
 -- Function: qrange (<list>)
     The interquartilic range is the difference between the third and
     first quartiles, `quantile(list,3/4) - quantile(list,1/4)',
          (%i1) load(numericalio)$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) qrange(s1);
                                      21
          (%o3)                       --
                                      4
          (%i4) s2:read_matrix("path_to/wind.data")$
          (%i5) qrange(s2);
          (%o5) [5.385, 5.572499999999998, 6.0225,
                               8.729999999999999, 6.650000000000002]

     See also function `quantile'.

 -- Function: meandev (<list>)
 -- Function: meandev (<list>)
     The mean deviation, defined as
                               n
                             ====
                         1   \          _
                         -    >    |x - x|
                         n   /       i
                             ====
                             i = 1

     Example:
          (%i1) load(numericalio)$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) meandev(s1);
                                      51
          (%o3)                       --
                                      20
          (%i4) s2:read_matrix("path_to/wind.data")$
          (%o4) [3.287959999999999, 3.075342, 3.23907,
                               4.715664000000001, 4.028546000000002]

     See also function `mean'.

 -- Function: mediandev (<list>)
 -- Function: mediandev (<matrix>)
     The median deviation, defined as
                           n
                         ====
                     1   \
                     -    >    |x - med|
                     n   /       i
                         ====
                         i = 1
     where `med' is the median of <list>.

     Example:
          (%i1) load(numericalio)$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) mediandev(s1);
                                      5
          (%o3)                       -
                                      2
          (%i4) s2:read_matrix("path_to/wind.data")$
          (%i5) mediandev(s2);
          (%o5)        [2.75, 2.755, 3.08, 4.315, 3.31]

     See also function `mean'.

 -- Function: harmean (<list>)
 -- Function: harmean (<list>)
     The harmonic mean, defined as
                            n
                         --------
                          n
                         ====
                         \     1
                          >    --
                         /     x
                         ====   i
                         i = 1

     Example:
          (%i1) y:[5,7,2,5,9,5,6,4,9,2,4,2,5]$
          (%i2) harmean(y), numer;
          (%o2)                3.901858027632205
          (%i3) s2:read_matrix("path_to/wind.data")$
          (%i4) harmean(s2);
          (%o4) [6.948015590052786, 7.391967752360356,
              9.055658197151745, 13.44199028193692, 13.01439145898509]

     See also functions `mean' and `geomean'.

 -- Function: geomean (<list>)
 -- Function: geomean (<matrix>)
     The geometric mean, defined as
                           /  n      \ 1/n
                           | /===\   |
                           |  ! !    |
                           |  ! !  x |
                           |  ! !   i|
                           | i = 1   |
                           \         /

     Example:
          (%i1) y:[5,7,2,5,9,5,6,4,9,2,4,2,5]$
          (%i2) geomean(y), numer;
          (%o2)               4.454845412337012
          (%i3) s2:read_matrix("path_to/wind.data")$
          (%i4) geomean(s2);
          (%o4) [8.82476274347979, 9.22652604739361,
              10.0442675714889, 14.61274126349021, 13.96184163444275]

     See also functions `mean' and `harmean'.

 -- Function: kurtosis (<list>)
 -- Function: kurtosis (<matrix>)
     The kurtosis coefficient, defined as
                              n
                            ====
                      1     \          _ 4
                     ----    >    (x - x)  - 3
                        4   /       i
                     n s    ====
                            i = 1

     Example:
          (%i1) load(numericalio)$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) kurtosis(s1), numer;
          (%o3)              - 1.273247946514421
          (%i4) s2:read_matrix("path_to/wind.data")$
          (%i5) kurtosis(s2);
          (%o5) [- .2715445622195385, 0.119998784429451,
          - .4275233490482866, - .6405361979019522,
          - .4952382132352935]

     See also functions `mean', `var' and `skewness'.

 -- Function: skewness (<list>)
 -- Function: skewness (<matrix>)
     The skewness coefficient, defined as
                              n
                            ====
                      1     \          _ 3
                     ----    >    (x - x)
                        3   /       i
                     n s    ====
                            i = 1

     Example:
          (%i1) load(numericalio)$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) skewness(s1), numer;
          (%o3)              - 1.273247946514421
          (%i4) s2:read_matrix("path_to/wind.data")$
          (%i5) skewness(s2);
          (%o5) [.1580509020000979, .2926379232061854,
              .0924217441610772, .2059984348148687, .2142520248890832]

     See also functions `mean', `var' and `kurtosis'.

 -- Function: pearskewness (<list>)
 -- Function: pearskewness (<matrix>)
     Pearson's skewness coefficient, defined as
                          _
                       3 (x - med)
                       -----------
                            s
     where <med> is the median of <list>.

     Example:
          (%i1) load(numericalio)$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) pearskewness(s1);
                                 189 sqrt(11)
          (%o3)                 --------------
                                10 sqrt(84259)
          (%i4) s2:read_matrix("path_to/wind.data")$
          (%i5) pearskewness(s2);
          (%o5) [- .0801997662921189, .2357036272952649,
              .1050904062491204, .1245042340592368, .4464181795804519]

     See also functions `mean', `var' and `median'.

 -- Function: quarskewness (<list>)
 -- Function: quarskewness (<matrix>)
     The quartile skewness coefficient, defined as
                         c    - 2 c    + c
                          3/4      1/2    1/4
                         --------------------
                             c    - c
                              3/4    1/4
     where c_p is the <p>-quantile of sample <list>.

     Example:
          (%i1) load(numericalio)$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) quarskewness(s1);
                                      1
          (%o3)                       --
                                      21
          (%i4) s2:read_matrix("path_to/wind.data")$
          (%i5) quarskewness(s2);
          (%o5) [- .0408542246982353, .1467025572005382,
              .0336239103362392, 0.037800687285223, 0.210526315789474]

     See also function `quantile'.


File: descriptive.info,  Node: Definitions for specific multivariate descriptive statistics,  Next: Definitions for statistical graphs,  Prev: Definitions for descriptive statistics,  Up: Top

Definitions for specific multivariate descriptive statistics
============================================================

 -- Function: cov (<matrix>)
     The covariance matrix of the multivariate sample, defined as
                        n
                       ====
                    1  \           _        _
                S = -   >    (X  - X) (X  - X)'
                    n  /       j        j
                       ====
                       j = 1
     where X_j is the j-th row of the sample matrix.

     Example:
          (%i1) load(numericalio)$
          (%i2) s2:read_matrix("path_to/wind.data")$
          (%i3) fpprec:7$ /* change precision for pretty output */
          (%i4) cov(s2);
                [ 17.22191  13.61811  14.37217  19.39624  15.42162 ]
                [                                                  ]
                [ 13.61811  14.98774  13.30448  15.15834  14.9711  ]
                [                                                  ]
          (%o4) [ 14.37217  13.30448  15.47573  17.32544  16.18171 ]
                [                                                  ]
                [ 19.39624  15.15834  17.32544  32.17651  20.44685 ]
                [                                                  ]
                [ 15.42162  14.9711   16.18171  20.44685  24.42308 ]

     See also function `cov1'.

 -- Function: cov1 (<matrix>)
     The covariance matrix of the multivariate sample, defined as
                        n
                       ====
                   1   \           _        _
             S  = ---   >    (X  - X) (X  - X)'
              1   n-1  /       j        j
                       ====
                       j = 1
     where X_j is the j-th row of the sample matrix.

     Example:
          (%i1) load(numericalio)$
          (%i2) s2:read_matrix("path_to/wind.data")$
          (%i3) fpprec:7$ /* change precision for pretty output */
          (%i4) cov1(s2);
                [ 17.39587  13.75567  14.51734  19.59216  15.5774  ]
                [                                                  ]
                [ 13.75567  15.13913  13.43887  15.31145  15.12232 ]
                [                                                  ]
          (%o4) [ 14.51734  13.43887  15.63205  17.50044  16.34516 ]
                [                                                  ]
                [ 19.59216  15.31145  17.50044  32.50153  20.65338 ]
                [                                                  ]
                [ 15.5774   15.12232  16.34516  20.65338  24.66977 ]

     See also function `cov'.

 -- Function: listvar (<matrix>)
 -- Function: listvar (<matrix>, <logical_value>)
     Function `listvar' returns a list of global variance measures:

        * <total variance>: `trace(S_1)',

        * <mean variance>: `trace(S_1)/p',

        * <generalized variance>: `determinant(S_1)',

        * <generalized standard deviation>: `sqrt(determinant(S_1))',

        * <efective variance> `determinant(S_1)^(1/p)', (defined in:
          Pen~a, D. (2002) <Ana'lisis de datos multivariantes>;
          McGraw-Hill, Madrid.)

        * <efective standard deviation>: `determinant(S_1)^(1/(2*p))'.
     where <p> is the dimension of the multivariate random variable and
     S_1 the covariance matrix returned by `cov1'.

     Example:
          (%i1) load(numericalio)$
          (%i2) s2:read_matrix("path_to/wind.data")$
          (%i3) listvar(s2);
          (%o3) [105.3383, 21.06767, 12874.35, 113.4652, 6.636591,
                                                             2.576158]

     Function `listvar' has an optional logical argument:
     `listvar(x,true)' tells Maxima that `x' is the data matrix, making
     the same as `listvar(x)'. On the other hand, `listvar(x,false)'
     means that `x' is not the data matrix, but the covariance matrix,
     avoiding its recalculation,

          (%i4) s:cov1(s2)$
          (%i5) listvar(s,false);
          (%o5) [105.3383, 21.06767, 12874.35, 113.4652, 6.636591,
                                                             2.576158]

     See also `cov' and `cov1'.

 -- Function: cor (<matrix>)
 -- Function: cor (<matrix>, <logical_value>)
     The correlation matrix of the multivariate sample.

     Example:
          (%i1) load(numericalio)$
          (%i2) s2:read_matrix("path_to/wind.data")$
          (%i3) cor(s2);
                [   1.0     .8476339  .8803515  .8239624  .7519506 ]
                [                                                  ]
                [ .8476339    1.0     .8735834  .6902622  0.782502 ]
                [                                                  ]
          (%o3) [ .8803515  .8735834    1.0     .7764065  .8323358 ]
                [                                                  ]
                [ .8239624  .6902622  .7764065    1.0     .7293848 ]
                [                                                  ]
                [ .7519506  0.782502  .8323358  .7293848    1.0    ]

     Function `cor' has an optional logical argument: `cor(x,true)'
     tells Maxima that `x' is the data matrix, making the same as
     `cor(x)'. On the other hand, `cor(x,false)' means that `x' is not
     the data matrix, but the covariance matrix, avoiding its
     recalculation,
          (%i4) s:cov1(s2)$
          (%i5) cor(s,false); /* this is faster */
                [   1.0     .8476339  .8803515  .8239624  .7519506 ]
                [                                                  ]
                [ .8476339    1.0     .8735834  .6902622  0.782502 ]
                [                                                  ]
          (%o5) [ .8803515  .8735834    1.0     .7764065  .8323358 ]
                [                                                  ]
                [ .8239624  .6902622  .7764065    1.0     .7293848 ]
                [                                                  ]
                [ .7519506  0.782502  .8323358  .7293848    1.0    ]

     See also `cov' and `cov1'.

 -- Function: listdep (<matrix>)
 -- Function: listdep (<matrix>, <logical_value>)
     Function `listdep' returns a list of correlation measures:

        * <precision matrix>: the inverse of the covariance matrix S_1,
                      -1     ij
                     S   = (s  )
                      1         i,j = 1,2,...,p

        * <multiple correlation vector>:  (R_1^2, R_2^2, ..., R_p^2),
          with
                      2          1
                     R  = 1 - -------
                      i        ii
                              s   s
                                   ii
          being an indicatior of the goodness of fit of the linear
          multivariate regression model on X_i when the rest of
          variables are used as regressors.

        * <partial correlation matrix>: with element (i, j) being
                                        ij
                                       s
                     r        = - ------------
                      ij.rest     / ii  jj\ 1/2
                                  |s   s  |
                                  \       /


     Example:
          (%i1) load(numericalio)$
          (%i2) s2:read_matrix("path_to/wind.data")$
          (%i3) z:listdep(s2)$
          (%i4) fpprec:5$ /* for pretty output */
          (%i5) z[1];  /* precision matrix */
                [  .38486   - .13856  - .15626  - .10239   .03118  ]
                [                                                  ]
                [ - .13856   .34107   - .15233   .03845   - .05284 ]
                [                                                  ]
          (%o5) [ - .15626  - .15233   .47296   - .02482  - .10054 ]
                [                                                  ]
                [ - .10239   .03845   - .02482   .10937   - .03403 ]
                [                                                  ]
                [  .03118   - .05284  - .10054  - .03403   .14834  ]
          (%i6) z[2];  /* multiple correlation vector */
          (%o6)    [.85063, .80634, .86474, .71867, .72675]
          (%i7) z[3];  /* partial correlation matrix */
                [  - 1.0     .38244   .36627   .49908   - .13049 ]
                [                                                ]
                [  .38244    - 1.0    .37927  - .19907   .23492  ]
                [                                                ]
          (%o7) [  .36627    .37927   - 1.0    .10911    .37956  ]
                [                                                ]
                [  .49908   - .19907  .10911   - 1.0     .26719  ]
                [                                                ]
                [ - .13049   .23492   .37956   .26719    - 1.0   ]

     Function `listdep' also has an optional logical argument:
     `listdep(x,true)' tells Maxima that `x' is the data matrix, making
     the same as `listdep(x)'. On the other hand, `listdep(x,false)'
     means that `x' is not the data matrix, but the covariance matrix,
     avoiding its recalculation.

     See also `cov' and `cov1'.


File: descriptive.info,  Node: Definitions for statistical graphs,  Next: Function and variable index,  Prev: Definitions for specific multivariate descriptive statistics,  Up: Top

Definitions for statistical graphs
==================================

 -- Function: dataplot (<list>)
 -- Function: dataplot (<list>, <option_1>, <option_2>, ...)
 -- Function: dataplot (<matrix>)
 -- Function: dataplot (<matrix>, <option_1>, <option_2>, ...)
     Funtion `dataplot' permits direct visualization of sample data,
     both univariate (<list>) and multivariate (<matrix>). Giving
     values to the following <options> some aspects of the plot can be
     controlled:

        * `'outpudev', default `"x"', indicates the output device;
          correct values are `"x"', `"eps"' and `"png"', for the
          screen, postscript and png format files, respectively.

        * `'maintitle', default `""', is the main title between double
          quotes.

        * `'axisnames', default `["x","y","z"]', is a list with the
          names of axis `x', `y' and `z'.

        * `'joined', default `false', a logical value to select points
          in 2D to be joined or isolated.

        * `'picturescales', default `[1.0, 1.0]', scaling factors for
          the size of the plot.

        * `'threedim', default `true', tells Maxima whether to plot a
          three column matrix with a 3D diagram or a multivariate
          scatterplot. See examples bellow.

        * `'axisrot', default `[60, 30]', changes the point of view
          when `'threedim' is set to `true' and  data are stored in a
          three column matrix. The first number is the rotation angle
          of the <x>-axis, and the second number is the rotation angle
          of the <z>-axis, both measured in degrees.

        * `'nclasses', default `10', is the number of classes for the
          histograms in the diagonal of multivariate scatterplots.

        * `'pointstyle', default `0', is an integer to indicate how to
          display sample points.


     For example, with the following input a simple plot of the first
     twenty digits of `%pi' is requested and the output stored in an
     eps file.
          (%i1) load(numericalio)$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) dataplot(makelist(s1[k],k,1,20),
                         'outputdev="eps",'pointstyle=3)$

     Note that one dimensional data are plotted as a time series. In
     the next case, same more data with different settings,
          (%i4) dataplot(makelist(s1[k],k,1,50),
                       'maintitle="First pi digits",
                       'axisnames=["digit order","digit value"],
                       'pointstyle=1,
                       'joined=true,
                       'outputdev="eps")$

     Function `dataplot' can be used to plot points in the plane. The
     next example is a scatterplot of the pairs of wind speeds
     corresponding to the first and fifth meteorological stations,
          (%i5) s2:read_matrix("path_to/wind.data")$
          (%i6) dataplot(submatrix(s2,2,3,4),
                   'outputdev="eps", 'pointstyle=1,
                   'maintitle="Pairs of wind speeds measured in knots",
                   'axisnames=["Wind speed in A","Wind speed in E"])$

     If points are stored in a two column matrix, `dataplot' can plot
     them directly, but if they are formatted as a list of pairs, their
     must be transformed to a matrix as in the following example.
          (%i7) bs:[[64,-104], [64,-99], [61,-95], [57,-95], [55,-94],
                    [55,-90], [72,-89], [80,-88], [77,-86], [80,-88],
                    [82,-91], [80,-88], [72,-89], [55,-90], [47,-89],
                    [39,-87], [33,-84], [32,-81], [35,-75], [36,-69],
                    [42,-69], [45,-68], [42,-69], [36,-69], [35,-67],
                    [35,-62], [35,-60], [39,-60], [45,-61], [51,-61],
                    [53,-65], [56,-68], [61,-70], [67,-71], [73,-70],
                    [78,-67], [80,-64], [81,-61], [78,-58], [75,-60],
                    [75,-62], [78,-62], [81,-61], [81,-56], [79,-50],
                    [75,-47], [70,-44], [62,-44], [58,-45], [53,-50],
                    [52,-52], [49,-53], [48,-52], [48,-50], [49,-48],
                    [51,-49], [52,-52], [51,-54], [51,-57], [51,-61],
                    [45,-61], [39,-60], [35,-60], [32,-57], [32,-52],
                    [32,-49], [35,-45], [39,-42], [43,-41], [48,-42],
                    [51,-43], [55,-47], [51,-43], [48,-42], [43,-41],
                    [44,-38], [47,-35], [54,-16], [56,-5], [60,-11],
                    [64,-6], [67,-12], [72,-7], [74,-14], [80,-9],
                    [80,-16], [86,-11], [87,-17], [92,-12], [93,-21],
                    [99,-16], [100,-22], [106,-19], [107,-27], [115,-25],
                    [110,-32], [94,-72], [91,-72], [88,-73], [87,-74],
                    [88,-76], [91,-76], [91,-79], [89,-81], [91,-79],
                    [91,-76], [94,-77], [94,-79], [94,-77], [91,-76],
                    [88,-76], [87,-74], [88,-73], [91,-72], [94,-72],
                    [97,-75], [98,-80], [97,-82], [94,-84], [91,-85],
                    [87,-83], [84,-80], [87,-83], [91,-85], [91,-95],
                    [92,-102], [85,-105], [69,-106], [64,-104]]$
          (%i8) dataplot(apply('matrix,bs),
                     'outputdev="eps",
                     'maintitle="Bart", 'joined=true,
                     'axisnames=["","",""],
                     'picturescales=[0.5, 1.0])$

     Points in three dimensional space can be seen as a projection on
     the plane. In this example, plots of wind speeds corresponding to
     three meteorological stations are requested, first in a 3D plot
     and then in a multivariate scatterplot.
          (%i9) /* 3D plot */
                 dataplot(submatrix(s2,4,5), 'pointstyle=2,
                   'outputdev="eps", 'picturescales=[0.6, 0.6],
                   'maintitle="Pairs of wind speeds measured in knots",
                   'axisnames=["Station A","Station B","Station C"])$
          (%i10) /* Multivariate scatterplot */
                 dataplot(submatrix(s2,4,5),
                   'outputdev="eps", 'nclasses=6, 'threedim=false)$
     Note that in the last example, the number of classes in the
     histograms of the diagonal is set to 6, and that option
     `'threedim' is set to `false'.

     For more than three dimensions only multivariate scatterplots are
     possible, as in
          (%i11) dataplot(s2,'outputdev="eps")$

 -- Function: histogram (<list>)
 -- Function: histogram (<list>, <option_1>, <option_2>, ...)
 -- Function: histogram (<one_column_matrix>)
 -- Function: histogram (<one_column_matrix>, <option_1>, <option_2>,
          ...)
     This function plots an histogram. Sample data must be stored in a
     list of numbers or a one column matrix. Giving values to the
     following <options> some aspects of the plot can be controlled:

        * `'outpudev', default `"x"', indicates the output device;
          correct values are `"x"', `"eps"' and `"png"', for the
          screen, postscript and png format files, respectively.

        * `'maintitle', default `""', is the main title between double
          quotes.

        * `'axisnames', default `["x", "Fr."]', is a list with the
          names of axis `x' and `y'.

        * `'picturescales', default `[1.0, 1.0]', scaling factors for
          the size of the plot.

        * `'nclasses', default `10', is the number of classes or bars.

        * `'relbarwidth', default `0.9', a decimal number between 0 and
          1 to control bars width.

        * `'barcolor', default `1', an integer to indicate bars color.

        * `'colorintensity', default `1', a decimal number between 0
          and 1 to fix color intensity.


     In the next two examples, histograms are requested for the first
     100 digits of number $\pi$ and for the wind speeds in the third
     meteorological station.
          (%i1) load(numericalio)$
          (%i2) s1:read_list("path_to/pidigits.data")$
          (%i3) histogram(s1,'maintitle="pi digits",
                           'axisnames=["","Absolute frequency"],
                           'relbarwidth=0.2,'barcolor=3,
                           'colorintensity=0.6,'outputdev="eps")$
          (%i4) s2:read_matrix("path_to/wind.data")$
          (%i5) histogram(col(s2,3),
                           'outputdev="eps",'colorintensity=0.3)$
     Note that in the first case, `s1' is a list and in the second
     example, `col(s2,3)' is a matrix.

     See also function `barsplot'.

 -- Function: barsplot (<list>)
 -- Function: barsplot (<list>, <option_1>, <option_2>, ...)
 -- Function: barsplot (<one_column_matrix>)
 -- Function: barsplot (<one_column_matrix>, <option_1>, <option_2>,
          ...)
     Similar to `histogram' but for discrete, numeric or categorical,
     statistical variables. These are the options,

        * `'outpudev', default `"x"', indicates the output device;
          correct values are `"x"', `"eps"' and `"png"', for the
          screen, postscript and png format files, respectively.

        * `'maintitle', default `""', is the main title between double
          quotes.

        * `'axisnames', default `["x", "Fr."]', is a list with the
          names of axis `x' and `y'.

        * `'picturescales', default `[1.0, 1.0]', scaling factors for
          the size of the plot.

        * `'relbarwidth', default `0.9', a decimal number between 0 and
          1 to control bars width.

        * `'barcolor', default `1', an integer to indicate bars color.

        * `'colorintensity', default `1', a decimal number between 0
          and 1 to fix color intensity.


     This example plots the barchart for groups `A' and `B' of patients
     in sample `s3',
          (%i1) load(numericalio)$
          (%i2) s3:read_matrix("biomed.data")$
          (%i3) barsplot(col(s3,1),
                   'outputdev="eps",
                   'maintitle="Groups of patients",
                   'axisnames=["Group","# of individuals"],
                   'colorintensity=0.2)$
     The first column in sample `s3' stores the categorical values `A'
     and `B', also known sometimes as factors. On the other hand, the
     positive integer numbers in the second column are ages, in years,
     which is a discrete variable, so we can plot the absolute
     frequencies for these values,
          (%i4) barsplot(col(s3,2),
                   'outputdev="eps",
                   'maintitle="Ages",
                   'axisnames=["Years","# of individuals"],
                   'colorintensity=0.2,
                   'relbarwidth=0.6)$

     See also function `histogram'.

 -- Function: boxplot (<data>)
 -- Function: boxplot (<data>, <option_1>, <option_2>, ...)
     This function plots box diagrams. Argument <data> can be a list,
     which is not of great interest, since these diagrams are mainly
     used for comparing different samples, or a matrix, so it is
     possible to compare two or more components of a multivariate
     statistical variable. But it is also allowed <data> to be a list
     of samples with possible different sample sizes, in fact this is
     the only function in package `descriptive.mac' that admits this
     type of data structure. See example bellow.  These are the options,

        * `'outpudev', default `"x"', indicates the output device;
          correct values are `"x"', `"eps"' and `"png"', for the
          screen, postscript and png format files, respectively.

        * `'maintitle', default `""', is the main title between double
          quotes.

        * `'axisnames', default `["sample", "y"]', is a list with the
          names of axis `x' and `y'.

        * `'picturescales', default `[1.0, 1.0]', scaling factors for
          the size of the plot.


     Examples:
          (%i1) load(numericalio)$
          (%i2) s2:read_matrix("path_to/wind.data")$
          (%i3) boxplot(s2,'outputdev="eps",
                         'maintitle="Velocidad del viento en nudos",
                         'axisnames=["Estaciones",""])$
          (%i4) boxplot([[6,4,6,2,4,8,6,4,6,4,3,2],
                         [8,10,7,9,12,8,10],
                         [16,13,17,12,11,18,13,18,14,12]],
                       'outputdev="eps")$


File: descriptive.info,  Node: Function and variable index,  Prev: Definitions for statistical graphs,  Up: Top

Appendix A Function and variable index
**************************************

 [index ]
* Menu:

* barsplot:                              Definitions for statistical graphs.
                                                              (line 180)
* boxplot:                               Definitions for statistical graphs.
                                                              (line 233)
* cfrec:                                 Definitions for data manipulation.
                                                              (line   7)
* cmoment:                               Definitions for descriptive statistics.
                                                              (line 130)
* cor:                                   Definitions for specific multivariate descriptive statistics.
                                                              (line 103)
* cov:                                   Definitions for specific multivariate descriptive statistics.
                                                              (line   7)
* cov1:                                  Definitions for specific multivariate descriptive statistics.
                                                              (line  35)
* dataplot:                              Definitions for statistical graphs.
                                                              (line   7)
* dfrec:                                 Definitions for data manipulation.
                                                              (line  24)
* geomean:                               Definitions for descriptive statistics.
                                                              (line 337)
* harmean:                               Definitions for descriptive statistics.
                                                              (line 313)
* histogram:                             Definitions for statistical graphs.
                                                              (line 130)
* kurtosis:                              Definitions for descriptive statistics.
                                                              (line 359)
* listdep:                               Definitions for specific multivariate descriptive statistics.
                                                              (line 140)
* listvar:                               Definitions for specific multivariate descriptive statistics.
                                                              (line  63)
* maxi:                                  Definitions for descriptive statistics.
                                                              (line 181)
* mean:                                  Definitions for descriptive statistics.
                                                              (line   7)
* meandev:                               Definitions for descriptive statistics.
                                                              (line 264)
* median:                                Definitions for descriptive statistics.
                                                              (line 226)
* mediandev:                             Definitions for descriptive statistics.
                                                              (line 288)
* mini:                                  Definitions for descriptive statistics.
                                                              (line 168)
* ncmoment:                              Definitions for descriptive statistics.
                                                              (line 107)
* pearskewness:                          Definitions for descriptive statistics.
                                                              (line 406)
* qrange:                                Definitions for descriptive statistics.
                                                              (line 247)
* quantile:                              Definitions for descriptive statistics.
                                                              (line 207)
* quarskewness:                          Definitions for descriptive statistics.
                                                              (line 429)
* range:                                 Definitions for descriptive statistics.
                                                              (line 194)
* skewness:                              Definitions for descriptive statistics.
                                                              (line 383)
* std:                                   Definitions for descriptive statistics.
                                                              (line  73)
* std1:                                  Definitions for descriptive statistics.
                                                              (line  90)
* subsample:                             Definitions for data manipulation.
                                                              (line  40)
* var:                                   Definitions for descriptive statistics.
                                                              (line  31)
* var1:                                  Definitions for descriptive statistics.
                                                              (line  50)
* vc:                                    Definitions for descriptive statistics.
                                                              (line 153)

 [index ]
* Menu:


Tag Table:
Node: Top83
Node: Introduction to descriptive467
Node: Definitions for data manipulation5461
Node: Definitions for descriptive statistics12532
Node: Definitions for specific multivariate descriptive statistics28516
Node: Definitions for statistical graphs37839
Node: Function and variable index50249

End Tag Table
