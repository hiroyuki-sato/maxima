This is maxima.info, produced by makeinfo version 4.13 from
/home/vttoth/dev/maxima/doc/info/es.utf8//include-maxima.texi.

Este es el Manual de Maxima en versión Texinfo

Copyright 1994, 2001 William F. Schelter

START-INFO-DIR-ENTRY
* Maxima: (maxima).  Un sistema de cálculo simbólico
END-INFO-DIR-ENTRY


File: maxima.info,  Node: Funciones y variables para teoría de números,  Prev: Teoría de Números,  Up: Teoría de Números

29.1 Funciones y variables para teoría de números
=================================================

 -- Función: bern (<n>)
     Devuelve el <n>-ésimo número de Bernoulli del entero <n>.  Los
     números de Bernoulli iguales a cero son suprimidos si `zerobern'
     vale `false'.

     Véase también `burn'.

          (%i1) zerobern: true$
          (%i2) map (bern, [0, 1, 2, 3, 4, 5, 6, 7, 8]);
                                1  1       1      1        1
          (%o2)           [1, - -, -, 0, - --, 0, --, 0, - --]
                                2  6       30     42       30
          (%i3) zerobern: false$
          (%i4) map (bern, [0, 1, 2, 3, 4, 5, 6, 7, 8]);
                                1  1    1   1     1   5     691   7
          (%o4)           [1, - -, -, - --, --, - --, --, - ----, -]
                                2  6    30  42    30  66    2730  6


 -- Función: bernpoly (<x>, <n>)
     Devuelve el <n>-ésimo polinomio de Bernoulli de variable <x>.


 -- Función: bfzeta (<s>, <n>)
     Devuelve la función zeta de Riemann para el argumento <s>. El
     valor que devuelve es del tipo "big float" (bfloat) y <n>  es su
     número de dígitos.

     Es necesario cargar en memoria esta función haciendo `load
     ("bffac")'.


 -- Función: bfhzeta (<s>, <h>, <n>)
     Devuelve la función zeta de Hurwitz para los argumentos <s> y <h>.
     El valor que devuelve es del tipo "big float" (bfloat) y <n>  es
     su número de dígitos.

     La función zeta de Hurwitz se define como

                                  inf
                                  ====
                                  \        1
                   zeta (s,h)  =   >    --------
                                  /            s
                                  ====  (k + h)
                                  k = 0

     Ejecútese `load (bffac)' antes de hacer uso de esta función.


 -- Función: burn (<n>)
     Siendo <n> entero, Devuelve un número racional que aproxima el
     <n>-ésimo número de Bernoulli. La función `burn' aprovecha el
     hecho de que los números de Bernoulli racionales se pueden
     aproximar con notable precisión gracias a

                             n - 1  1 - 2 n
                        (- 1)      2        zeta(2 n) (2 n)!
               B(2 n) = ------------------------------------
                                          2 n
                                       %pi

     La función `burn' puede ser más eficiente que `bern' cuando <n> es
     un número grande, ya que `bern' calcula todos los números de
     Bernoulli hasta el <n>-ésimo. Por el contrario, `burn' hace uso de
     la aproximación para enteros pares <n> > 255. En caso de enteros
     impares y <n> <= 255, se hace uso de la función `bern'.

     Para utilizar esta función hay que cargarla antes en memoria
     escribiendo `load ("bffac")'. Véase también `bern'.


 -- Función: chinese ([<r_1>, ..., <r_n>], [<m_1>, ..., <m_n>])
     Resulve el sistema de congruencias `x = r_1 mod m_1', ..., `x =
     r_n mod m_n'.  Los restos <r_n> pueden ser enteros arbitrarios,
     mientras que los módulos <m_n> deben ser positivos y primos dos a
     dos.

          (%i1) mods : [1000, 1001, 1003, 1007];
          (%o1)                   [1000, 1001, 1003, 1007]
          (%i2) lreduce('gcd, mods);
          (%o2)                               1
          (%i3) x : random(apply("*", mods));
          (%o3)                         685124877004
          (%i4) rems : map(lambda([z], mod(x, z)), mods);
          (%o4)                       [4, 568, 54, 624]
          (%i5) chinese(rems, mods);
          (%o5)                         685124877004
          (%i6) chinese([1, 2], [3, n]);
          (%o6)                    chinese([1, 2], [3, n])
          (%i7) %, n = 4;
          (%o7)                              10

 -- Función: cf (<expr>)
     Calcula aproximaciones con fracciones continuas. <expr> es una
     expresión que contiene fracciones continuas, raíces cuadradas de
     enteros, y números reales (enteros, racionales, decimales en coma
     flotante y decimales de precisión arbitraria). `cf' calcula
     expansiones exactas de números racionales, pero las expansiones de
     nÃºmeros decimales de coma flotante se truncan de acuerdo con el
     valor de `ratepsilon', y la de los de decimales de precisión
     arbitraria (bigfloats) lo hacen respecto de `10^(-fpprec)'.

     En las expresiones se pueden combinar operandos con operadores
     aritméticos.  Maxima no conoce operaciones con fracciones
     continuas más allá de la función `cf'.

     La función `cf' evalúa sus argumentos después de asignar a la
     variable `listarith' el valor `false', retornando una fracción
     continua en forma de lista.

     Una fracción continua `a + 1/(b + 1/(c + ...))' se representa como
     la lista `[a, b, c, ...]', donde los elementos `a', `b', `c', ...
     se evalúan como enteros. La expresión <expr> puede contener también
     `sqrt (n)' donde `n' es un entero; en tal caso, `cf' devolverá
     tantos términos de la fracción continua como indique el valor de
     la variable `cflength' multiplicado por el período.

     Una fracción continua puede reducirse a un número evaluando la
     representación aritmética que devuelve `cfdisrep'. Véase también
     `cfexpand', que es otra alternativa para evaluar fracciones
     continuas.

     Véanse asimismo `cfdisrep', `cfexpand' y `cflength'.

     Ejemplos:

        * La expresión <expr> contiene fracciones continuas y raíces
          cuadradas de enteros.

               (%i1) cf ([5, 3, 1]*[11, 9, 7] + [3, 7]/[4, 3, 2]);
               (%o1)               [59, 17, 2, 1, 1, 1, 27]
               (%i2) cf ((3/17)*[1, -2, 5]/sqrt(11) + (8/13));
               (%o2)        [0, 1, 1, 1, 3, 2, 1, 4, 1, 9, 1, 9, 2]

        * La variable `cflength' controla cuantos períodos de la
          fracción continua se calculan para números irracionales
          algebraicos.

               (%i1) cflength: 1$
               (%i2) cf ((1 + sqrt(5))/2);
               (%o2)                    [1, 1, 1, 1, 2]
               (%i3) cflength: 2$
               (%i4) cf ((1 + sqrt(5))/2);
               (%o4)               [1, 1, 1, 1, 1, 1, 1, 2]
               (%i5) cflength: 3$
               (%i6) cf ((1 + sqrt(5))/2);
               (%o6)           [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]

        * Una fracción continua puede calcularse evaluando la
          representación aritmética que devuelve `cfdisrep'.

               (%i1) cflength: 3$
               (%i2) cfdisrep (cf (sqrt (3)))$
               (%i3) ev (%, numer);
               (%o3)                   1.731707317073171

        * Maxima no sabe sobre operaciones con fracciones continuas más
          de lo que aporta la función `cf'.

               (%i1) cf ([1,1,1,1,1,2] * 3);
               (%o1)                     [4, 1, 5, 2]
               (%i2) cf ([1,1,1,1,1,2]) * 3;
               (%o2)                  [3, 3, 3, 3, 3, 6]


 -- Función: cfdisrep (<lista>)
     Construye y devuelve una expresión aritmética ordinaria de la
     forma  `a + 1/(b + 1/(c + ...))' a partir de la representación en
     formato lista de la fracción continua  `[a, b, c, ...]'.

          (%i1) cf ([1, 2, -3] + [1, -2, 1]);
          (%o1)                     [1, 1, 1, 2]
          (%i2) cfdisrep (%);
                                            1
          (%o2)                     1 + ---------
                                              1
                                        1 + -----
                                                1
                                            1 + -
                                                2


 -- Función: cfexpand (<x>)
     Devuelve la matriz con los numeradores y denominadores de la
     última (columna 1) y penúltima (columna 2) convergentes de la
     fracción continua <x>.

          (%i1) cf (rat (ev (%pi, numer)));

          `rat' replaced 3.141592653589793 by 103993/33102 =3.141592653011902
          (%o1)                  [3, 7, 15, 1, 292]
          (%i2) cfexpand (%);
                                   [ 103993  355 ]
          (%o2)                    [             ]
                                   [ 33102   113 ]
          (%i3) %[1,1]/%[2,1], numer;
          (%o3)                   3.141592653011902


 -- Variable opcional: cflength
     Valor por defecto: 1

     La variable `cflength' controla el número de términos de la
     fracción continua que devuelve la función `cf', que será
     `cflength' multiplicado por el período. Así, el valor por defecto
     será el de un período.

          (%i1) cflength: 1$
          (%i2) cf ((1 + sqrt(5))/2);
          (%o2)                    [1, 1, 1, 1, 2]
          (%i3) cflength: 2$
          (%i4) cf ((1 + sqrt(5))/2);
          (%o4)               [1, 1, 1, 1, 1, 1, 1, 2]
          (%i5) cflength: 3$
          (%i6) cf ((1 + sqrt(5))/2);
          (%o6)           [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]


 -- Función: divsum (<n>, <k>)
 -- Función: divsum (<n>)
     La llamada `divsum (<n>, <k>)' devuelve la suma de los divisores
     de <n> elevados a la <k>-ésima potencia.

     La llamada `divsum (<n>)' devuelve la suma de los divisores de <n>.

          (%i1) divsum (12);
          (%o1)                          28
          (%i2) 1 + 2 + 3 + 4 + 6 + 12;
          (%o2)                          28
          (%i3) divsum (12, 2);
          (%o3)                          210
          (%i4) 1^2 + 2^2 + 3^2 + 4^2 + 6^2 + 12^2;
          (%o4)                          210


 -- Función: euler (<n>)
     Devuelve el <n>-ésimo número de Euler del entero no negativo <n>.
     Los número de Euler iguales a cero se eliminan si `zerobern' vale
     `false'.

     Para la constante de Euler-Mascheroni, véase `%gamma'.

          (%i1) zerobern: true$
          (%i2) map (euler, [0, 1, 2, 3, 4, 5, 6]);
          (%o2)               [1, 0, - 1, 0, 5, 0, - 61]
          (%i3) zerobern: false$
          (%i4) map (euler, [0, 1, 2, 3, 4, 5, 6]);
          (%o4)               [1, - 1, 5, - 61, 1385, - 50521, 2702765]


 -- Variable opcional: factors_only
     Valor por defecto: `false'

     Controla el resultado devuelto por `ifactors'. El valor por defecto
     `false' hace que `ifactors' no dé información sobre las
     multiplicidades de los factores primos calculados. Cuando
     `factors_only' vale `true', `ifactors' solo devuelve la lista de
     factores primos.

     Para ejemplos, véase `ifactors'.

 -- Función: fib (<n>)
     Devuelve el <n>-ésimo número de Fibonacci. La llamada `fib(0)'
     devuelve 0, `fib(1)' devuelve 1 y `fib (-<n>)' es igual a
     `(-1)^(<n> + 1) * fib(<n>)'.

     Después de llamar a `fib', la variable `prevfib' toma el valor
     `fib (<n> - 1)', que es el número de Fibonacci que precede al
     último calculado.

          (%i1) map (fib, [-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8]);
          (%o1)           [- 3, 2, - 1, 1, 0, 1, 1, 2, 3, 5, 8, 13, 21]


 -- Función: fibtophi (<expr>)
     Expresa los números de Fibonacci en <expr> en términos de la razón
     áurea `%phi', que es `(1 + sqrt(5))/2', aproximadamente 1.61803399.

     Ejemplos:

          (%i1) fibtophi (fib (n));
                                     n             n
                                 %phi  - (1 - %phi)
          (%o1)                  -------------------
                                     2 %phi - 1
          (%i2) fib (n-1) + fib (n) - fib (n+1);
          (%o2)          - fib(n + 1) + fib(n) + fib(n - 1)
          (%i3) fibtophi (%);
                      n + 1             n + 1       n             n
                  %phi      - (1 - %phi)        %phi  - (1 - %phi)
          (%o3) - --------------------------- + -------------------
                          2 %phi - 1                2 %phi - 1
                                                    n - 1             n - 1
                                                %phi      - (1 - %phi)
                                              + ---------------------------
                                                        2 %phi - 1
          (%i4) ratsimp (%);
          (%o4)                           0


 -- Función: ifactors (<n>)
     Devuelve la factorización del entero positivo <n>. Si
     `n=p1^e1..pk^nk' es la descomposición de <n> en números primos,
     `ifactors' devuelve `[[p1, e1], ... , [pk, ek]]'.

     Los métodos de factorización se basan en divisiones tentativas con
     números primos hasta 9973, en los métodos rho y p-1 de Pollard y
     en curvas elípticas.

     La respuesta que se obtiene de `ifactors' está controlada por la
     variable opcional `factors_only'. El valor por defecto `false'
     hace que `ifactors' no dé información sobre las multiplicidades de
     los factores primos calculados.  Cuando `factors_only' vale
     `true', `ifactors' solo devuelve la lista de factores primos.

          (%i1) ifactors(51575319651600);
          (%o1)     [[2, 4], [3, 2], [5, 2], [1583, 1], [9050207, 1]]
          (%i2) apply("*", map(lambda([u], u[1]^u[2]), %));
          (%o2)                        51575319651600
          (%i3) ifactors(51575319651600), factors_only : true;
          (%o3)                   [2, 3, 5, 1583, 9050207]


 -- Función: igcdex (<n>, <k>)
     Devuelve la lista `[<a>, <b>, <u>]', donde <u> es el máximo común
     divisor de <n> y <k>, siendo <u> igual a `<a> <n> + <b> <k>'. Los
     argumentos <n> y <k> deben ser enteros.

     `igcdex' implementa el algoritmo de Euclides. Véase también
     `gcdex'.

     La instrucción `load(gcdex)' carga esta función.

     Ejemplos:

          (%i1) load(gcdex)$

          (%i2) igcdex(30,18);
          (%o2)                      [- 1, 2, 6]
          (%i3) igcdex(1526757668, 7835626735736);
          (%o3)            [845922341123, - 164826435, 4]
          (%i4) igcdex(fib(20), fib(21));
          (%o4)                   [4181, - 2584, 1]


 -- Función: inrt (<x>, <n>)
     Devuelve la raíz entera <n>-ésima del valor absoluto de  <x>.

          (%i1) l: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]$
          (%i2) map (lambda ([a], inrt (10^a, 3)), l);
          (%o2) [2, 4, 10, 21, 46, 100, 215, 464, 1000, 2154, 4641, 10000]


 -- Función: inv_mod (<n>, <m>)
     Calcula el inverso de <n> módulo <m>.  La llamada `inv_mod (n,m)'
     devuelve `false' si <n> es un divisor nulo módulo <m>.

          (%i1) inv_mod(3, 41);
          (%o1)                           14
          (%i2) ratsimp(3^-1), modulus = 41;
          (%o2)                           14
          (%i3) inv_mod(3, 42);
          (%o3)                          false


 -- Función: isqrt (<x>)
     Devuelve la "raíz cuadrada entera" del valor absoluto de <x>, el
     cual debe ser un entero.


 -- Función: jacobi (<p>, <q>)
     Devuelve el símbolo de Jacobi para <p> y <q>.

          (%i1) l: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]$
          (%i2) map (lambda ([a], jacobi (a, 9)), l);
          (%o2)         [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0]


 -- Función: lcm (<expr_1>, ..., <expr_n>)
     Devuelve el mínimo común múltiplo de sus argumentos.  Los
     argumentos pueden ser tanto expresiones en general como enteros.

     Es necesario cargar en memoria esta función haciendo `load
     ("functs")'.


 -- Función: lucas (<n>)
     Devuelve el <n>-ésimo número de Lucas.  `lucas(0)' es igual a 2,
     `lucas(1)' es igual a 1 y `lucas(-<n>)' es igual a `(-1)^(-<n>) *
     lucas(<n>)'.

          (%i1) map (lucas, [-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8]);
          (%o1)             [7, - 4, 3, - 1, 2, 1, 3, 4, 7, 11, 18, 29, 47]

     Después de llamar a `lucas', la variable global `next_lucas' es
     igual a `lucas (<n> + 1)', el número de Lucas que sigue al último
     que se ha devuelto. El ejemplo muestra como los números de
     Fibonacci se pueden calcular mediante  `lucas' y `next_lucas'.

          (%i1) fib_via_lucas(n) :=
                   block([lucas : lucas(n)],
                   signum(n) * (2*next_lucas - lucas)/5 )$
          (%i2) map (fib_via_lucas, [-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8]);
          (%o2)             [- 3, 2, - 1, 1, 0, 1, 1, 2, 3, 5, 8, 13, 21]

 -- Función: mod (<x>, <y>)
     Si <x> e <y> son números reales e <y> es distinto de cero,
     devuelve `<x> - <y> * floor(<x> / <y>)'.  Para todos los reales
     <x>, se tiene `mod (<x>, 0) = <x>'. Para información sobre la
     definición de  `mod (<x>, 0) = <x>', véase la sección 3.4 de
     "Concrete Mathematics", by Graham, Knuth, and Patashnik. La
     función `mod (<x>, 1)' es de diente de sierra con periodo unidad y
     con `mod (1, 1) = 0' y `mod (0, 1) = 0'.

     Para encontrar el argumento principal (un número del intervalo
     `(-%pi, %pi]') de un número complejo, hágase uso de la función
     `<x> |-> %pi - mod (%pi - <x>, 2*%pi)', donde <x> es un argumento.

     Si <x> e <y> son expresiones constantes (por ejemplo, `10 * %pi'),
     `mod' utiliza el mismo esquema de evaluación basado en números
     grandes en coma flotante (big floats) que `floor' y `ceiling'.
     También es posible, pero improbable, que `mod' pueda retornar un
     valor erróneo en tales casos.

     Para argumentos no numéricos <x> o <y>, `mod' aplica algunas
     reglas de simplificación:

          (%i1) mod (x, 0);
          (%o1)                           x
          (%i2) mod (a*x, a*y);
          (%o2)                      a mod(x, y)
          (%i3) mod (0, x);
          (%o3)                           0

 -- Función: next_prime (<n>)
     Devuelve el menor de los primos mayores que <n>.

          (%i1) next_prime(27);
          (%o1)                       29


 -- Función: partfrac (<expr>, <var>)
     Expande la expresión <expr> en fracciones parciales respecto de la
     variable principal <var>. La función `partfrac' hace una
     descomposición completa en fracciones parciales. El algoritmo que
     se utiliza se basa en el hecho de que los denominadores de la
     expansión en fracciones parciales (los factores del denominador
     original) son primos relativos. Los numeradores se pueden escribir
     como combinaciones lineales de los denominadores.

          (%i1) 1/(1+x)^2 - 2/(1+x) + 2/(2+x);
                                2       2        1
          (%o1)               ----- - ----- + --------
                              x + 2   x + 1          2
                                              (x + 1)
          (%i2) ratsimp (%);
                                           x
          (%o2)                 - -------------------
                                   3      2
                                  x  + 4 x  + 5 x + 2
          (%i3) partfrac (%, x);
                                2       2        1
          (%o3)               ----- - ----- + --------
                              x + 2   x + 1          2
                                              (x + 1)


 -- Función: power_mod (<a>, <n>, <m>)
     Utiliza un algoritmo modular para calcular `a^n mod m', siendo <a>
     y <n> enteros cualesquiera y <m> un entero positivo.  Si <n> es
     negativo, se utilizará `inv_mod' para encontrar el inverso modular.

          (%i1) power_mod(3, 15, 5);
          (%o1)                          2
          (%i2) mod(3^15,5);
          (%o2)                          2
          (%i3) power_mod(2, -1, 5);
          (%o3)                          3
          (%i4) inv_mod(2,5);
          (%o4)                          3


 -- Función: primep (<n>)
     Comprueba si el número entero <n> es o no primo, devolviendo `true'
     o `false' según el caso.

     Cuando el resultado de `primep (<n>)' es `false', <n> es un número
     compuesto, y si es `true', <n> es primo con alta probabilidad.

     Si <n> es menor que 341550071728321, se utiliza una versión
     determinística de la prueba de Miller-Rabin. En tal caso, si
     `primep (<n>)' devuelve `true', entonces <n> es un número primo.

     Para <n> mayor que 341550071728321 `primep' realiza
     `primep_number_of_tests' pruebas de seudo-primalidad de
     Miller-Rabin y una prueba de seudo-primalidad de Lucas. La
     probabilidad de que un número compuesto <n> pase una prueba de
     Miller-Rabin es menor que 1/4. Con el valor por defecto de
     `primep_number_of_tests', que es 25, la probabilidad de que <n>
     sea compuesto es menor que 10^-15.


 -- Variable opcional: primep_number_of_tests
     Valor por defecto: 25

     Número de pruebas de Miller-Rabin a realizar por `primep'.

 -- Función: prev_prime (<n>)
     Devuelve el mayor de los primos menores que <n>.

          (%i1) prev_prime(27);
          (%o1)                       23

 -- Función: qunit (<n>)
     Devuelve la unidad principal de `sqrt (<n>)', siendo <n> un
     entero; consiste en la resolución de la ecuación de Pell  `a^2 -
     <n> b^2 = 1'.

          (%i1) qunit (17);
          (%o1)                     sqrt(17) + 4
          (%i2) expand (% * (sqrt(17) - 4));
          (%o2)                           1


 -- Función: totient (<n>)
     Devuelve el número de enteros menores o iguales a <n> que son
     primos relativos con <n>.

 -- Variable opcional: zerobern
     Valor por defecto: `true'

     Si `zerobern' vale `false', `bern' excluye los números de Bernoulli
     y `euler' excluye los números de Euler que sean iguales a cero.
     Véase `bern' y `euler'.

 -- Función: zeta (<n>)
     Devuelve la función zeta de Riemann. Si <n> es entero negativo, 0
     o número par positivo, la función zeta de Riemann devuelve un
     valor exacto; en el caso de número par positivo, la variable
     opcional `zeta%pi', además, tiene que tener el valor `true' (véase
     `zeta%pi').  Cuando el argumento es un número decimal o bigfloat,
     entonces la función zeta de Riemann se calcula numéricamente.
     Maxima devuelve una forma nominal `zeta (<n>)' para cualesquiera
     otros argumentos, incluidos los racionales no enteros, los números
     complejos y los enteros pares si `zeta%pi' vale `false'.

     `zeta(1)' no está definida, pero Maxima conce el límite de
     `limit(zeta(x), x, 1)' por ambos lados.

     La función zeta de Riemann se distribuye sobre las listas, matrices
     y ecuaciones.

     Véanse también `bfzeta' y `zeta%pi'.

     Ejemplos:

          (%i1) zeta([-2,-1,0,0.5,2,3,1+%i]);
                                                        2
                       1     1                       %pi
          (%o1)  [0, - --, - -, - 1.460354508809587, ----, zeta(3), zeta(%i + 1)]
                       12    2                        6

          (%i2) limit(zeta(x),x,1,plus);
          (%o2)                                 inf
          (%i3) limit(zeta(x),x,1,minus);
          (%o3)                                minf


 -- Variable opcional: zeta%pi
     Valor por defecto: `true'

     Si `zeta%pi' vale `true', `zeta' devuelve una expresión
     proporcional a `%pi^n' si `n' es un número par positivo. En caso
     contrario, `zeta' no se evalúa y devuelve la forma nominal `zeta
     (n)'.

     Ejemplos:

          (%i1) zeta%pi: true$
          (%i2) zeta (4);
                                           4
                                        %pi
          (%o2)                         ----
                                         90
          (%i3) zeta%pi: false$
          (%i4) zeta (4);
          (%o4)                        zeta(4)


 -- Función: zn_add_table (<n>)
     Muestra la tabla de la suma de todos los elementos de (Z/<n>Z).

     Véanse también `zn_mult_table' y `zn_power_table'.


 -- Función: zn_determinant (<matrix>, <p>)
     Utiliza el procedimiento de la descomposición LU para calcular el
     determinante de <matrix> sobre (Z/<p>Z). El argumento <p> debe ser
     un número primo.

     Si el determinante es igual a cero, el procedimiento puede fallar,
     en cuyo caso `zn_determinant' calcula el determinante no modular y
     luego reduce.

     Véase también `zn_invert_by_lu'.

     Ejemplo:

          (%i1) m : matrix([1,3],[2,4]);
                                          [ 1  3 ]
          (%o1)                           [      ]
                                          [ 2  4 ]
          (%i2) zn_determinant(m, 5);
          (%o2)                               3
          (%i3) m : matrix([2,4,1],[3,1,4],[4,3,2]);
                                         [ 2  4  1 ]
                                         [         ]
          (%o3)                          [ 3  1  4 ]
                                         [         ]
                                         [ 4  3  2 ]
          (%i4) zn_determinant(m, 5);
          (%o4)                               0


 -- Función: zn_invert_by_lu (<matrix>, <p>)
     Utiliza el procedimiento de la descomposición LU para calcular la
     inversa modular de <matrix> sobre (Z/<p>Z). El argumento <p> debe
     ser un número primo y <matrix> invertible. La función
     `zn_invert_by_lu' devuelve `false' si <matrix> no es invertible.

     Véase `zn_determinant'.

     Ejemplo:

          (%i1) m : matrix([1,3],[2,4]);
                                          [ 1  3 ]
          (%o1)                           [      ]
                                          [ 2  4 ]
          (%i2) zn_determinant(m, 5);
          (%o2)                               3
          (%i3) mi : zn_invert_by_lu(m, 5);
                                          [ 3  4 ]
          (%o3)                           [      ]
                                          [ 1  2 ]
          (%i4) matrixmap(lambda([a], mod(a, 5)), m . mi);
                                          [ 1  0 ]
          (%o4)                           [      ]
                                          [ 0  1 ]


 -- Función: zn_log (<a>, <g>, <n>)
 -- Función: zn_log (<a>, <g>, <n>, [[<p1>, <e1>], ..., [<pk>, <ek>]])
     Calcula el logaritmo discreto. Sea (Z/<n>Z)* un grupo cíclico, <g>
     una raíz primitiva módulo <n> y <a> un miembro de este grupo,
     entonces `zn_log (a, g, n)' calcula la congruencia `g^x = a mod n'.

     El algoritmo que se aplica necesita una factorización prima de
     `totient(n)'. Esta factorización puede requerir mucho tiempo de
     cálculo, por lo que en ciertos casos puede ser aconsejable
     factorizar primero y luego pasar la lista de factores a `zn_log'
     como cuarto argumento. La lista debe ser de la misma forma que las
     lista devuelta por `ifactors(totient(n))' utilizando la opción por
     defecto `factors_only : false'.

     El algoritmo utiliza la reducción de Pohlig-Hellman y el método
     Rho de Pollard para los logaritmos discretos. El tiempo de
     ejecución de `zn_log' depende en primer lugar del número de bits
     del mayor factor primo del totient.

     Véanse también `zn_primroot', `zn_order', `ifactors' y `totient'.

     Ejemplos:

     `zn_log (a, g, n)' resuelve la congruencia `g^x = a mod n'.

          (%i1) n : 22$
          (%i2) g : zn_primroot(n);
          (%o2)                               7
          (%i3) ord_7 : zn_order(7, n);
          (%o3)                              10
          (%i4) powers_7 : makelist(power_mod(g, x, n), x, 0, ord_7 - 1);
          (%o4)              [1, 7, 5, 13, 3, 21, 15, 17, 9, 19]
          (%i5) zn_log(21, g, n);
          (%o5)                               5
          (%i6) map(lambda([x], zn_log(x, g, n)), powers_7);
          (%o6)                [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

     El cuarto argumento opcional debe ser de la misma forma que la
     lista devuelta por `ifactors(totient(n))'.

          (%i1) (p : 2^127-1, primep(p));
          (%o1)                             true
          (%i2) ifs : ifactors(p - 1)$
          (%i3) g : zn_primroot(p, ifs);
          (%o3)                              43
          (%i4) a : power_mod(g, 1234567890, p)$
          (%i5) zn_log(a, g, p, ifs);
          (%o5)                          1234567890
          (%i6) time(%o5);
          (%o6)                            [1.204]
          (%i7) f_max : last(ifs);
          (%o7)                       [77158673929, 1]
          (%i8) slength( printf(false, "~b", f_max[1]) );
          (%o8)                              37


 -- Función: zn_mult_table (<n>)
 -- Función: zn_mult_table (<n>, all)
     Sin el argumento opcional <all>, `zn_mult_table(n)' muestra la
     tabla de multiplicación de los elementos de (Z/<n>Z)*, que son
     todos elementos invertibles módulo <n>.

     El argumento opcional <all> hace que la tabla se genere para todos
     los elementos no nulos.

     Véanse también `zn_add_table' y `zn_power_table'.

     Ejemplo:

          (%i1) zn_mult_table(4);
                                          [ 1  3 ]
          (%o1)                           [      ]
                                          [ 3  1 ]
          (%i2) zn_mult_table(4, all);
                                         [ 1  2  3 ]
                                         [         ]
          (%o2)                          [ 2  0  2 ]
                                         [         ]
                                         [ 3  2  1 ]


 -- Función: zn_order (<x>, <n>)
 -- Función: zn_order (<x>, <n>, [[<p1>, <e1>], ..., [<pk>, <ek>]])
     Devuelve el orden de <x> si es una unidad del grupo finito
     (Z/<n>Z)*, o devuelve `false'.  <x> una unidad módulo <n> si es
     coprimo con <n>.

     El algoritmo que se aplica necesita una factorización prima de
     `totient(n)'. Esta factorización puede requerir mucho tiempo de
     cálculo, por lo que en ciertos casos puede ser aconsejable
     factorizar primero y luego pasar la lista de factores a `zn_log'
     como tercer argumento. La lista debe ser de la misma forma que las
     lista devuelta por `ifactors(totient(n))' utilizando la opción por
     defecto `factors_only : false'.

     Véanse también `zn_primroot', `ifactors' y `totient'.

     Ejemplos:

     `zn_order' calcula el orden de la unidad <x> en (Z/<n>Z)*.

          (%i1) n : 22$
          (%i2) g : zn_primroot(n);
          (%o2)                               7
          (%i3) units_22 : sublist(makelist(i,i,1,21), lambda([x], gcd(x, n) = 1));
          (%o3)              [1, 3, 5, 7, 9, 13, 15, 17, 19, 21]
          (%i4) (ord_7 : zn_order(7, n)) = totient(n);
          (%o4)                            10 = 10
          (%i5) powers_7 : makelist(power_mod(g,i,n), i,0,ord_7 - 1);
          (%o5)              [1, 7, 5, 13, 3, 21, 15, 17, 9, 19]
          (%i6) map(lambda([x], zn_order(x, n)), powers_7);
          (%o6)              [1, 10, 5, 10, 5, 2, 5, 10, 5, 10]
          (%i7) map(lambda([x], ord_7/gcd(x, ord_7)), makelist(i, i,0,ord_7 - 1));
          (%o7)              [1, 10, 5, 10, 5, 2, 5, 10, 5, 10]
          (%i8) totient(totient(n));
          (%o8)                               4

     El tercer argumento opcional debe ser de la misma forma que la
     lista devuelta por `ifactors(totient(n))'.

          (%i1) (p : 2^142 + 217, primep(p));
          (%o1)                             true
          (%i2) ifs : ifactors( totient(p) )$
          (%i3) g : zn_primroot(p, ifs);
          (%o3)                               3
          (%i4) is( (ord_3 : zn_order(g, p, ifs)) = totient(p) );
          (%o4)                             true
          (%i5) map(lambda([x], ord_3/zn_order(x, p, ifs)), makelist(i,i,2,15));
          (%o5)        [22, 1, 44, 10, 5, 2, 22, 2, 8, 2, 1, 1, 20, 1]


 -- Función: zn_power_table (<n>)
 -- Función: zn_power_table (<n>, all)
     Sin el argumento opcional <all>, `zn_power_table(n)' muestra la
     tabla de potencias de los elementos de (Z/<n>Z)*, que son todos
     elementos invertibles módulo <n>. El exponente se obtiene con un
     bucle desde `1' hasta `totient(n)' y la tabla termina con una
     columna de unos al lado derecho.

     El argumento opcional <all> hace que la tabla se genere para todos
     los elementos no nulos. En este caso, el exponente se calcula con
     un bucle desde `1' hasta `totient(n) + 1' y la última columna es
     por lo tanto igual a la primera.

     Véanse también `zn_add_table' y `zn_mult_table'.

     Ejemplo:

          (%i1) zn_power_table(6);
                                          [ 1  1 ]
          (%o1)                           [      ]
                                          [ 5  1 ]
          (%i2) zn_power_table(6, all);
                                         [ 1  1  1 ]
                                         [         ]
                                         [ 2  4  2 ]
                                         [         ]
          (%o2)                          [ 3  3  3 ]
                                         [         ]
                                         [ 4  4  4 ]
                                         [         ]
                                         [ 5  1  5 ]


 -- Función: zn_primroot (<n>)
 -- Función: zn_primroot (<n>, [[<p1>, <e1>], ..., [<pk>, <ek>]])
     Si el grupo multiplicativo es cíclico, `zn_primroot' calcula la
     menor raíz primitiva de módulo <n>. (Z/<n>Z)* es cíclico si <n> es
     igual a `2', `4', `p^k' o `2*p^k', siendo `p' primo y mayor que
     `2' y `k' un número natural.  Si a la variable opcional
     `zn_primroot_pretest', cuyo valor por defecto es `false', se le da
     el valor `true', entonces `zn_primroot' realiza una prueba previa.
     En cualquier caso, el cálculo está limitado por la cota superior
     `zn_primroot_limit'.

     Si (Z/<n>Z)* no es cíclico o si no tiene raíces primitivas menores
     que `zn_primroot_limit', `zn_primroot' devuelve `false'.

     El algoritmo que se aplica necesita una factorización prima de
     `totient(n)'. Esta factorización puede requerir mucho tiempo de
     cálculo, por lo que en ciertos casos puede ser aconsejable
     factorizar primero y luego pasar la lista de factores a `zn_log'
     como argumento adicional. La lista debe ser de la misma forma que
     las lista devuelta por `ifactors(totient(n))' utilizando la opción
     por defecto `factors_only : false'.

     Véanse también `zn_primroot_p', `zn_order', `ifactors' y `totient'.

     Ejemplos:

     `zn_primroot' calcula la menor raíz primitiva de módulo <n> o
     devuelve `false'.

          (%i1) n : 14$
          (%i2) g : zn_primroot(n);
          (%o2)                               3
          (%i3) zn_order(g, n) = totient(n);
          (%o3)                             6 = 6
          (%i4) n : 15$
          (%i5) zn_primroot(n);
          (%o5)                             false

     El argumento opcional debe ser de la misma forma que la lista
     devuelta por `ifactors(totient(n))'.

          (%i1) (p : 2^142 + 217, primep(p));
          (%o1)                             true
          (%i2) ifs : ifactors( totient(p) )$
          (%i3) g : zn_primroot(p, ifs);
          (%o3)                               3
          (%i4) [time(%o2), time(%o3)];
          (%o4)                    [[15.556972], [0.004]]
          (%i5) is(zn_order(g, p, ifs) = p - 1);
          (%o5)                             true
          (%i6) n : 2^142 + 216$
          (%i7) ifs : ifactors(totient(n))$
          (%i8) zn_primroot(n, ifs),
                zn_primroot_limit : 200, zn_primroot_verbose : true;
          `zn_primroot' stopped at zn_primroot_limit = 200
          (%o8)                             false


 -- Option variable: zn_primroot_limit
     Valor por defecto: `1000'

     Si `zn_primroot' no puede encontrar una raíz primitiva, entonces
     se para en esta cota superior. Si a la variable opcional
     `zn_primroot_verbose' se le da el valor `true', se imprimirá un
     mensaje cuando `zn_primroot_limit' sea alcanzado.


 -- Función: zn_primroot_p (<x>, <n>)
 -- Función: zn_primroot_p (<x>, <n>, [[<p1>, <e1>], ..., [<pk>, <ek>]])
     Comprueba si <x> es una raíz primitiva en el grupo multiplizativo
     (Z/<n>Z)*.

     El algoritmo que se aplica necesita una factorización prima de
     `totient(n)'. Esta factorización puede requerir mucho tiempo de
     cálculo, por lo que en ciertos casos puede ser aconsejable
     factorizar primero y luego pasar la lista de factores a `zn_log'
     como tercer argumento. La lista debe ser de la misma forma que las
     lista devuelta por `ifactors(totient(n))' utilizando la opción por
     defecto `factors_only : false'.

     Véanse también `zn_primroot', `zn_order', `ifactors' y `totient'.

     Ejemplos:

     `zn_primroot_p' como función de predicado.

          (%i1) n : 14$
          (%i2) units_14 : sublist(makelist(i,i,1,13), lambda([i], gcd(i, n) = 1));
          (%o2)                     [1, 3, 5, 9, 11, 13]
          (%i3) zn_primroot_p(13, n);
          (%o3)                            false
          (%i4) sublist(units_14, lambda([x], zn_primroot_p(x, n)));
          (%o4)                            [3, 5]
          (%i5) map(lambda([x], zn_order(x, n)), units_14);
          (%o5)                      [1, 6, 6, 3, 3, 2]

     El tercer argumento opcional debe ser de la misma forma que la
     lista devuelta por `ifactors(totient(n))'.

          (%i1) (p : 2^142 + 217, primep(p));
          (%o1)                             true
          (%i2) ifs : ifactors( totient(p) )$
          (%i3) sublist(makelist(i,i,1,50), lambda([x], zn_primroot_p(x, p, ifs)));
          (%o3)      [3, 12, 13, 15, 21, 24, 26, 27, 29, 33, 38, 42, 48]
          (%i4) [time(%o2), time(%o3)];
          (%o4)                   [[7.748484], [0.036002]]


 -- Option variable: zn_primroot_pretest
     Valor por defecto: `false'

     El grupo multiplicativo (Z/<n>Z)* es cíclico si if <n> es igual a
     `2', `4', `p^k' o `2*p^k', siendo `p' un número primo mayor que
     `2' y `k' es un número natural.

     La variable `zn_primroot_pretest' controla si `zn_primroot' debe
     comprobar si sucede alguna de estas situaciones antes de calcular
     la menor raíz primitiva. Solo se realizará esta comprobación si
     `zn_primroot_pretest' toma el valor `true'.


 -- Option variable: zn_primroot_verbose
     Valor por defecto: `false'

     Controla si `zn_primroot' imprime un mensaje cuando alcanza
     `zn_primroot_limit'.



File: maxima.info,  Node: Simetrías,  Next: Grupos,  Prev: Teoría de Números,  Up: Top

30 Simetrías
************

* Menu:

* Funciones y variables para simetrías::

Paquete escrito para Macsyma-Symbolics por Annick Valibouze
(`http://www-calfor.lip6.fr/~avb/').  Los algoritmos están descritos en
los siguientes artículos:

  1. Fonctions symétriques et changements de bases. Annick Valibouze.
     EUROCAL'87 (Leipzig, 1987), 323-332, Lecture Notes in Comput. Sci
     378.  Springer, Berlin, 1989.
     `http://www.stix.polytechnique.fr/publications/1984-1994.html'

  2. Résolvantes et fonctions symétriques. Annick Valibouze.
     Proceedings of the ACM-SIGSAM 1989 International Symposium on
     Symbolic and Algebraic Computation, ISSAC'89 (Portland, Oregon).
     ACM Press, 390-399, 1989.
     `http://www-calfor.lip6.fr/~avb/DonneesTelechargeables/MesArticles/issac89ACMValibouze.pdf'

  3. Symbolic computation with symmetric polynomials, an extension to
     Macsyma.  Annick Valibouze. Computers and Mathematics (MIT, USA,
     June 13-17, 1989), Springer-Verlag, New York Berlin, 308-320, 1989.
     `http://www.stix.polytechnique.fr/publications/1984-1994.html'

  4. Théorie de Galois Constructive. Annick Valibouze. Mémoire
     d'habilitation à diriger les recherches (HDR), Université P. et M.
     Curie (Paris VI), 1994


File: maxima.info,  Node: Funciones y variables para simetrías,  Prev: Simetrías,  Up: Simetrías

30.1 Funciones y variables para simetrías
=========================================

 -- Función: comp2pui (<n>, <l>)
     Realiza el paso de las funciones simétricas completas de la lista
     <l> a las funciones simétricas elementales de 0 a <n>. En caso de
     que la lista <l> contenga menos de `<n>+1' elementos, se
     completará con valores formales.  El primer elemento de la lista
     <l> almacena el cardinal del alfabeto, en caso de que exista; en
     caso contrario se le da el valor <n>.

          (%i1) comp2pui (3, [4, g]);
                                  2                    2
          (%o1)    [4, g, 2 h2 - g , 3 h3 - g h2 + g (g  - 2 h2)]


 -- Función: cont2part (<pc>, <lvar>)
     Convierte el polinomio particionado asociado a la forma contraída
     <pc>, cuyas variables se encuentran en <lvar>.

          (%i1) pc: 2*a^3*b*x^4*y + x^5;
                                     3    4      5
          (%o1)                   2 a  b x  y + x
          (%i2) cont2part (pc, [x, y]);
                                             3
          (%o2)              [[1, 5, 0], [2 a  b, 4, 1]]

     Otras funciones para efectuar cambios de representación son:
     `contract', `explose', `part2cont', `partpol', `tcontract' y
     `tpartpol'.


 -- Función: contract (<psym>, <lvar>)
     Convierte una forma contraída (como un monomio por órbita sobre la
     acción del grupo simétrico) del polinomio <psym> cuyas variables
     se encuentran en la lista <lvar>. La función `explose' realiza la
     operación inversa. A mayopes, la función `tcontract' comprueba la
     simetría del polinomio.

          (%i1) psym: explose (2*a^3*b*x^4*y, [x, y, z]);
                   3      4      3      4      3    4        3    4
          (%o1) 2 a  b y z  + 2 a  b x z  + 2 a  b y  z + 2 a  b x  z

                                                     3      4      3    4
                                                + 2 a  b x y  + 2 a  b x  y
          (%i2) contract (psym, [x, y, z]);
                                        3    4
          (%o2)                      2 a  b x  y

     Otras funciones para efectuar cambios de representación son:

     `cont2part', `explose', `part2cont', `partpol', `tcontract',
     `tpartpol'.


 -- Función: direct ([<p_1>, ..., <p_n>], <y>, <f>, [<lvar_1>, ...,
          <lvar_n>])
     Calcula la imagen directa (véase M. Giusti, D. Lazard et A.
     Valibouze, ISSAC 1988, Roma) asociada a la función <f>, en las
     listas de variables <lvar_1>, ..., <lvar_n>, y en los polinomios
     <p_1>, ..., <p_n> de una variable <y>. Si la expresión de <f> no
     depende de variable alguna, no sólo es inútil aportar esa
     variable, sino que también disminuyen considerablemente los
     cálculos cuando la variable no se declara.

          (%i1) direct ([z^2  - e1* z + e2, z^2  - f1* z + f2],
                        z, b*v + a*u, [[u, v], [a, b]]);
                 2
          (%o1) y  - e1 f1 y

                                           2            2             2   2
                            - 4 e2 f2 - (e1  - 2 e2) (f1  - 2 f2) + e1  f1
                          + -----------------------------------------------
                                                   2
          (%i2) ratsimp (%);
                        2                2                   2
          (%o2)        y  - e1 f1 y + (e1  - 4 e2) f2 + e2 f1
          (%i3) ratsimp (direct ([z^3-e1*z^2+e2*z-e3,z^2  - f1* z + f2],
                        z, b*v + a*u, [[u, v], [a, b]]));
                 6            5         2                        2    2   4
          (%o3) y  - 2 e1 f1 y  + ((2 e1  - 6 e2) f2 + (2 e2 + e1 ) f1 ) y

                                    3                               3   3
           + ((9 e3 + 5 e1 e2 - 2 e1 ) f1 f2 + (- 2 e3 - 2 e1 e2) f1 ) y

                   2       2        4    2
           + ((9 e2  - 6 e1  e2 + e1 ) f2

                              2       2       2                   2    4
           + (- 9 e1 e3 - 6 e2  + 3 e1  e2) f1  f2 + (2 e1 e3 + e2 ) f1 )

            2          2                      2     3          2
           y  + (((9 e1  - 27 e2) e3 + 3 e1 e2  - e1  e2) f1 f2

                           2            2    3                5
           + ((15 e2 - 2 e1 ) e3 - e1 e2 ) f1  f2 - 2 e2 e3 f1 ) y

                     2                   3           3     2   2    3
           + (- 27 e3  + (18 e1 e2 - 4 e1 ) e3 - 4 e2  + e1  e2 ) f2

                   2      3                   3    2   2
           + (27 e3  + (e1  - 9 e1 e2) e3 + e2 ) f1  f2

                             2    4        2   6
           + (e1 e2 e3 - 9 e3 ) f1  f2 + e3  f1

     Búsqueda del polinomio cuyas raíces son la suma a+u o a es la raíz
     de z^2  - e1* z + e2 y u es la raíz de z^2  - f1* z + f2

          (%i1) ratsimp (direct ([z^2  - e1* z + e2, z^2  - f1* z + f2],
                                    z, a + u, [[u], [a]]));
                 4                    3             2
          (%o1) y  + (- 2 f1 - 2 e1) y  + (2 f2 + f1  + 3 e1 f1 + 2 e2

               2   2                              2               2
           + e1 ) y  + ((- 2 f1 - 2 e1) f2 - e1 f1  + (- 2 e2 - e1 ) f1

                            2                     2            2
           - 2 e1 e2) y + f2  + (e1 f1 - 2 e2 + e1 ) f2 + e2 f1  + e1 e2 f1

               2
           + e2

     La función `direct' acepta dos indicadores: `elementaires'
     (elementales) y `puissances' (potenciales, que es el valor por
     defecto) que permiten hacer la descomposición de los polinomios
     simétricos que aparezcan en los cálculos en funciones simétricas
     elementales o en funciones potenciales, respectivamente.

     Funciones de `sym' utilizadas en esta función:

     `multi_orbit'(por tanto `orbit'),`pui_direct', `multi_elem' (por
     tanto `elem'), `multi_pui' (por tanto `pui'), `pui2ele', `ele2pui'
     (si al indicador `direct' se le asignó `puissances').


 -- Función: ele2comp (<m>, <l>)
     Pasa las funciones simétricas elementales a funciones completas,
     de forma similar a `comp2ele' y `comp2pui'.

     Otras funciones para cambio de bases son:

     `comp2ele', `comp2pui', `ele2pui', `elem', `mon2schur',
     `multi_elem', `multi_pui', `pui', `pui2comp', `pui2ele',
     `puireduc' y `schur2comp'.


 -- Función: ele2polynome (<l>, <z>)
     Devuelve el polinomio en <z> en el que las funciones simétricas
     elementales de las raíces son las de la lista <l>.  `<l> = [<n>,
     <e_1>, ..., <e_n>]', donde <n> es el grado del polinomio y <e_i>
     la <i>-ésima función simétrica elemental.

          (%i1) ele2polynome ([2, e1, e2], z);
                                    2
          (%o1)                    z  - e1 z + e2
          (%i2) polynome2ele (x^7 - 14*x^5 + 56*x^3  - 56*x + 22, x);
          (%o2)          [7, 0, - 14, 0, 56, 0, - 56, - 22]
          (%i3) ele2polynome ([7, 0, -14, 0, 56, 0, -56, -22], x);
                            7       5       3
          (%o3)            x  - 14 x  + 56 x  - 56 x + 22

     La función recíproca es `polynome2ele (<P>, <z>)'

     Véanse también `polynome2ele' y `pui2polynome'.


 -- Función: ele2pui (<m>, <l>)
     Pasa las funciones simétricas elementales a funciones completas,
     de forma similar a `comp2ele' y `comp2comp'.

     Otras funciones para cambio de bases son:

     `comp2ele', `comp2pui', `ele2comp', `elem', `mon2schur',
     `multi_elem', `multi_pui', `pui', `pui2comp', `pui2ele',
     `puireduc' y `schur2comp'.


 -- Función: elem (<ele>, <sym>, <lvar>)
     Descompone el polinomio simétrico <sym> con las variables
     continuas de la lista <lvar> en las funciones simétricas
     elementales contenidas en la lista <ele>.  El primer elemento de
     la lista <ele> almacena el cardinal del alfabeto, en caso de que
     exista; en caso contrario se le da como valor el grado del
     polinomio <sym>.  Si faltan valores en la lista <ele>, ésta se
     completará con valores formales del tipo "ei".  El polinomio <sym>
     puede especificarse de tres formas diferentes: contraído (en cuyo
     caso `elem' debe valer 1, que es el valor por defecto),
     particionado (`elem' valdrá 3) o extendido (por ejemplo, el
     polinomio completo) (en este caso, `elem' valdrá 2). La
     utilización de la función `pui' se hace siguiendo este mismo
     modelo.

     Con un alfabeto de cardinal 3 con <e1>, la primera función
     simétrica elemental valiendo 7, el polinomio simétrico de tres
     variables cuya forma contraída (aquí dependiendo solamente de dos
     de sus variables) es ^4-2*x*y, se descompone en funciones
     simétricas elementales:

          (%i1) elem ([3, 7], x^4 - 2*x*y, [x, y]);
          (%o1) 7 (e3 - 7 e2 + 7 (49 - e2)) + 21 e3

                                                   + (- 2 (49 - e2) - 2) e2
          (%i2) ratsimp (%);
                                        2
          (%o2)             28 e3 + 2 e2  - 198 e2 + 2401

     Otras funciones para cambio de bases son: `comp2ele', `comp2pui',
     `ele2comp', `ele2pui', `mon2schur', `multi_elem', `multi_pui',
     `pui', `pui2comp', `pui2ele', `puireduc' y `schur2comp'.


 -- Función: explose (<pc>, <lvar>)
     Devuelve el polinomio simétrico asociado a la forma contraída
     <pc>. La lista <lvar> contiene las variables.

          (%i1) explose (a*x + 1, [x, y, z]);
          (%o1)                  a z + a y + a x + 1

     Otras funciones para efectuar cambios de representación son:
     `contract', `cont2part', `part2cont', `partpol', `tcontract' y
     `tpartpol'.


 -- Función: kostka (<part_1>, <part_2>)
     Función escrita por P. Espert, calcula el número de Kostka
     asociado a las particiones <part_1> y <part_2>.

          (%i1) kostka ([3, 3, 3], [2, 2, 2, 1, 1, 1]);
          (%o1)                           6


 -- Función: lgtreillis (<n>, <m>)
     Devuelve la lista de particiones de peso <n> y longitud <m>.

          (%i1) lgtreillis (4, 2);
          (%o1)                   [[3, 1], [2, 2]]

     Véanse también `ltreillis', `treillis' y `treinat'.


 -- Función: ltreillis (<n>, <m>)
     Devuelve la lista de particiones de peso <n> y longitud menor o
     igual que <m>.

          (%i1) ltreillis (4, 2);
          (%o1)               [[4, 0], [3, 1], [2, 2]]

     Véanse tambiént `lgtreillis', `treillis' y `treinat'.


 -- Función: mon2schur (<l>)
     La lista <l> representa la función de Schur S_<l>: Se tiene <l> =
     [<i_1>, <i_2>, ..., <i_q>] con <i_1> <= <i_2> <= ... <= <i_q>.  La
     función de Schur es S_[<i_1>, <i_2>, ..., <i_q>], el menor de la
     matriz infinita (h_{i-j}) <i> >= 1, <j> >= 1 compuesto de las <q>
     primeras filas y columnas <i_1> + 1, <i_2> + 2, ..., <i_q> + <q>.

     Se ha escrito esta función de Schur en función de las formas
     monomiales utilizando las funciones `treinat' y `kostka'.  La
     forma devuelta es un polinomio simétrico en una de sus
     representaciones contraídas con las variables <x_1>, <x_2>, ...

          (%i1) mon2schur ([1, 1, 1]);
          (%o1)                       x1 x2 x3
          (%i2) mon2schur ([3]);
                                            2        3
          (%o2)                x1 x2 x3 + x1  x2 + x1
          (%i3) mon2schur ([1, 2]);
                                                2
          (%o3)                  2 x1 x2 x3 + x1  x2

     Para 3 variables se tendrá:

             2 x1 x2 x3 + x1^2 x2 + x2^2 x1 + x1^2 x3 + x3^2 x1
              + x2^2 x3 + x3^2 x2

     Otras funciones para cambio de bases son:

     `comp2ele', `comp2pui', `ele2comp', `ele2pui', `elem',
     `multi_elem', `multi_pui', `pui', `pui2comp', `pui2ele',
     `puireduc' y `schur2comp'.


 -- Función: multi_elem (<l_elem>, <multi_pc>, <l_var>)
     Descompone un polinomio multisimétrico sobre una forma
     multicontraída <multi_pc> en los grupos de variables contenidas en
     la lista de listas  <l_var> sobre los grupos de funciones
     simétricas elementales contenidas en <l_elem>.

          (%i1) multi_elem ([[2, e1, e2], [2, f1, f2]], a*x + a^2 + x^3,
                [[x, y], [a, b]]);
                                                            3
          (%o1)         - 2 f2 + f1 (f1 + e1) - 3 e1 e2 + e1
          (%i2) ratsimp (%);
                                   2                       3
          (%o2)         - 2 f2 + f1  + e1 f1 - 3 e1 e2 + e1

     Otras funciones para cambio de bases son:

     `comp2ele', `comp2pui', `ele2comp', `ele2pui', `elem',
     `mon2schur', `multi_pui', `pui', `pui2comp', `pui2ele', `puireduc'
     y `schur2comp'.


 -- Función: multi_orbit (<P>, [<lvar_1>, <lvar_2>, ..., <lvar_p>])
     <P> es un polinomio en el conjunto de variables contenidas en las
     listas <lvar_1>, <lvar_2>, ..., <lvar_p>.  Esta función restablece
     la órbita del polinomio <P> sobre la acción del producto de los
     grupos simétricos de los conjuntos de variables representadas por
     esas <p> listas.

          (%i1) multi_orbit (a*x + b*y, [[x, y], [a, b]]);
          (%o1)                [b y + a x, a y + b x]
          (%i2) multi_orbit (x + y + 2*a, [[x, y], [a, b, c]]);
          (%o2)        [y + x + 2 c, y + x + 2 b, y + x + 2 a]

     Véase también `orbit' para la acción de un solo grupo simérico.


 -- Función: multi_pui
     Es a la función `pui' lo que la función `multi_elem' es a la
     función `elem'.

          (%i1) multi_pui ([[2, p1, p2], [2, t1, t2]], a*x + a^2 + x^3,
                [[x, y], [a, b]]);
                                                      3
                                          3 p1 p2   p1
          (%o1)              t2 + p1 t1 + ------- - ---
                                             2       2


 -- Función: multinomial (<r>, <part>)
     El argumento <r> es el peso de la partición <part>.  Esta función
     calcula el coeficiente multinomial asociado: si las partes de las
     particiones <part> son <i_1>, <i_2>, ..., <i_k>, el resultado de
     `multinomial' es `<r>!/(<i_1>! <i_2>! ... <i_k>!)'.


 -- Función: multsym (<ppart_1>, <ppart_2>, <n>)
     Calcula el producto de dos polinomios simétricos de <n> variables
     operando solamente con el módulo de la acción del grupo simétrico
     de orden <n>. Los polinomios están en su representación
     particionada.

     Sean los dos polinomios simétricos en `x' e `y': `3*(x + y) +
     2*x*y' y `5*(x^2 + y^2)' cuyas formas particionadas son `[[3, 1],
     [2, 1, 1]]' y `[[5, 2]]', respectivamente; el producto de ambos
     será:

          (%i1) multsym ([[3, 1], [2, 1, 1]], [[5, 2]], 2);
          (%o1)         [[10, 3, 1], [15, 3, 0], [15, 2, 1]]

     o sea, `10*(x^3*y + y^3*x) + 15*(x^2*y + y^2*x) + 15*(x^3 + y^3)'.

     Funciones de cambio de representación de un polinomio simétrico:

     `contract', `cont2part', `explose', `part2cont', `partpol',
     `tcontract' y `tpartpol'.


 -- Función: orbit (<P>, <lvar>)
     Calcula la órbita de un polinomio <P> en las variables de la lista
     <lvar> bajo la acción del grupo simétrico del conjunto de
     variables contenidas en la lista <lvar>.

          (%i1) orbit (a*x + b*y, [x, y]);
          (%o1)                [a y + b x, b y + a x]
          (%i2) orbit (2*x + x^2, [x, y]);
                                  2         2
          (%o2)                 [y  + 2 y, x  + 2 x]

     Véase también `multi_orbit' para la acción de un producto de
     grupos simétricos sobre un polinomio.


 -- Función: part2cont (<ppart>, <lvar>)
     Transforma un polinomio simétrico de su forma particionada a su
     forma contraída. La forma contraída se devuelve con las variables
     contenidas en <lvar>.

          (%i1) part2cont ([[2*a^3*b, 4, 1]], [x, y]);
                                        3    4
          (%o1)                      2 a  b x  y

     Otras funciones para efectuar cambios de representación son:

     `contract', `cont2part', `explose', `partpol', `tcontract' y
     `tpartpol'.


 -- Función: partpol (<psym>, <lvar>)
     Restablece la representación particionada del polinomio simétrico
     <psym> de variables en <lvar>.

          (%i1) partpol (-a*(x + y) + 3*x*y, [x, y]);
          (%o1)               [[3, 1, 1], [- a, 1, 0]]

     Otras funciones para efectuar cambios de representación son:

     `contract', `cont2part', `explose', `part2cont', `tcontract' y
     `tpartpol'.


 -- Función: permut (<l>)
     Devuelve la lista de permutaciones de la lista <l>.

 -- Función: polynome2ele (<P>, <x>)
     Devuelve la lista `<l> = [<n>, <e_1>, ..., <e_n>]', en la que <n>
     es el grado del polinomio <P> de variable <x> y <e_i> es la
     <i>-ésima función simétrica elemental de las raíces de <P>.

          (%i1) polynome2ele (x^7 - 14*x^5 + 56*x^3 - 56*x + 22, x);
          (%o1)          [7, 0, - 14, 0, 56, 0, - 56, - 22]
          (%i2) ele2polynome ([7, 0, -14, 0, 56, 0, -56, -22], x);
                            7       5       3
          (%o2)            x  - 14 x  + 56 x  - 56 x + 22

     La función recíproca es `ele2polynome (<l>, <x>)'.


 -- Función: prodrac (<l>, <k>)
     Siendo <l> una lista que contiene las funciones simétricas
     elementales sobre un conjunto <A>, la función `prodrac' calcula el
     polinomio cuyas raíces son los productos <k> a <k> de los
     elementos de <A>.

 -- Función: pui (<l>, <sym>, <lvar>)
     Descompone el polinomio simétrico <sym>, cuyas variables son las
     contenidas en <lvar>, en las funciones potenciales contenidas en
     la lista <l>.  El primer elemento de la lista <l> almacena el
     cardinal del alfabeto, en caso de que exista; en caso contrario se
     le da el grado del polinomio <sym>.  Si faltan los valores de la
     lista <l>, en su lugar serán colocados valores formales del tipo
     "pi".  El polinomio <sym> puede especificarse de tres formas
     diferentes: contraído (en cuyo caso `pui' debe valer 1, que es el
     valor por defecto), particionado (`pui' valdrá 3) o extendido (por
     ejemplo, el polinomio completo) (en este caso, `pui' valdrá 2). La
     utilización de la función `elem' se hace siguiendo este mismo
     modelo.

          (%i1) pui;
          (%o1)                           1
          (%i2) pui ([3, a, b], u*x*y*z, [x, y, z]);
                                 2
                             a (a  - b) u   (a b - p3) u
          (%o2)              ------------ - ------------
                                  6              3
          (%i3) ratsimp (%);
                                                 3
                                (2 p3 - 3 a b + a ) u
          (%o3)                 ---------------------
                                          6

     Otras funciones para cambio de bases son: `comp2ele', `comp2pui',
     `ele2comp', `ele2pui', `elem', `mon2schur', `multi_elem',
     `multi_pui', `pui2comp', `pui2ele', `puireduc' y `schur2comp'.


 -- Función: pui2comp (<n>, <lpui>)
     Devuelve la lista de las <n> primeras funciones completas (con el
     cardinal en primer lugar) en función de las funciones potenciales
     dadas en la lista <lpui>. Si la lista <lpui> estuviese vacía, el
     cardinal sería <N>; si no estuviese vacía, se tomaría como
     cardinal su primer elemento, de forma similar a como se procede en
     `comp2ele' y en `comp2pui'.

          (%i1) pui2comp (2, []);
                                                 2
                                          p2 + p1
          (%o1)                   [2, p1, --------]
                                             2
          (%i2) pui2comp (3, [2, a1]);
                                                      2
                                           a1 (p2 + a1 )
                                   2  p3 + ------------- + a1 p2
                            p2 + a1              2
          (%o2)     [2, a1, --------, --------------------------]
                               2                  3
          (%i3) ratsimp (%);
                                      2                     3
                               p2 + a1   2 p3 + 3 a1 p2 + a1
          (%o3)        [2, a1, --------, --------------------]
                                  2               6

     Otras funciones para cambio de bases son: `comp2ele', `comp2pui',
     `ele2comp', `ele2pui', `elem', `mon2schur', `multi_elem',
     `multi_pui', `pui', `pui2ele', `puireduc' y `schur2comp'.


 -- Función: pui2ele (<n>, <lpui>)
     Transforma las funciones potenciales a funciones simétricas
     elementales. Si la variable global `pui2ele' vale `girard', se
     recupera la lista de funciones simétricas elementales de 1 <n>, y
     si es igual a `close', se recupera la <n>-ésima función simétrica
     elemental.

     Otras funciones para cambio de bases son: `comp2ele', `comp2pui',
     `ele2comp', `ele2pui', `elem', `mon2schur', `multi_elem',
     `multi_pui', `pui', `pui2comp', `puireduc' y `schur2comp'.


 -- Función: pui2polynome (<x>, <lpui>)
     Calcula el polinomio en <x> cuyas raíces tienen como funciones
     potenciales las dadas en la lista <lpui>.

          (%i1) pui;
          (%o1)                           1
          (%i2) kill(labels);
          (%o0)                         done
          (%i1) polynome2ele (x^3 - 4*x^2 + 5*x - 1, x);
          (%o1)                     [3, 4, 5, 1]
          (%i2) ele2pui (3, %);
          (%o2)                     [3, 4, 6, 7]
          (%i3) pui2polynome (x, %);
                                  3      2
          (%o3)                  x  - 4 x  + 5 x - 1

     Véanse también `polynome2ele' y `ele2polynome'.


 -- Función: pui_direct (<orbite>, [<lvar_1>, ..., <lvar_n>], [<d_1>,
          <d_2>, ..., <d_n>])
     Sea <f> un polinomio en <n> bloques de variables <lvar_1>, ...,
     <lvar_n>.  Sea <c_i> el número de variables en <lvar_i> y <SC> el
     producto de los <n> grupos simétricos de grados <c_1>, ..., <c_n>,
     que actúan sobre <f>.  La lista <orbite> es la órbita,
     representada por `<SC>(<f>)', de la función <f> sobre la acción de
     <SC>, la cual puede ser obtenida por medio de la función
     `multi_orbit'.  Los valores `d_i' son enteros tales que <c_1> <=
     <d_1>, <c_2> <= <d_2>, ..., <c_n> <= <d_n>.  Por último, sea <SD>
     el producto de los grupos simétricos <S_d1> x <S_d2> x ... x
     <S_dn>.

     La función `pui_direct' devuelve las <n> primeras funciones
     potenciales de `<SD>(<f>)' deducidas de las funciones potenciales
     de `<SC>(<f>)', siendo <n> el cardinal de `<SD>(<f>)'.

     El resultado se devuelve en la forma multicontraída respecto de
     <SD>.

          (%i1) l: [[x, y], [a, b]];
          (%o1)                   [[x, y], [a, b]]
          (%i2) pui_direct (multi_orbit (a*x + b*y, l), l, [2, 2]);
                                                 2  2
          (%o2)               [a x, 4 a b x y + a  x ]
          (%i3) pui_direct (multi_orbit (a*x + b*y, l), l, [3, 2]);
                                       2  2     2    2        3  3
          (%o3) [2 a x, 4 a b x y + 2 a  x , 3 a  b x  y + 2 a  x ,

              2  2  2  2      3    3        4  4
          12 a  b  x  y  + 4 a  b x  y + 2 a  x ,

              3  2  3  2      4    4        5  5
          10 a  b  x  y  + 5 a  b x  y + 2 a  x ,

              3  3  3  3       4  2  4  2      5    5        6  6
          40 a  b  x  y  + 15 a  b  x  y  + 6 a  b x  y + 2 a  x ]
          (%i4) pui_direct ([y + x + 2*c, y + x + 2*b, y + x + 2*a],
                [[x, y], [a, b, c]], [2, 3]);
                                       2              2
          (%o4) [3 x + 2 a, 6 x y + 3 x  + 4 a x + 4 a ,

                           2                   3        2       2        3
                        9 x  y + 12 a x y + 3 x  + 6 a x  + 12 a  x + 8 a ]


 -- Función: puireduc (<n>, <lpui>)
     Siendo <lpui> una lista en la que el primer elemento es un entero
     <m>, `puireduc' devuelve las <n> primeras funciones potenciales en
     función de las <m> primeras.

          (%i1) puireduc (3, [2]);
                                                   2
                                             p1 (p1  - p2)
          (%o1)          [2, p1, p2, p1 p2 - -------------]
                                                   2
          (%i2) ratsimp (%);
                                                     3
                                         3 p1 p2 - p1
          (%o2)              [2, p1, p2, -------------]
                                               2


 -- Función: resolvante (<P>, <x>, <f>, [<x_1>, ..., <x_d>])
     Calcula la resolvente del polinomio <P> de variable <x> y grado
     <n> >= <d> por la función <f> de variables <x_1>, ..., <x_d>.
     Para mejorar los cálculos, es importante no incluir en la lista
     `[<x_1>, ..., <x_d>]' las variables que no intervienen en la
     función de transformación <f>.

     Con el fin de hacer más eficaces los cálculos, se puede asignar a
     `resolvante' un indicador que permita seleccionar el algoritmo más
     apropiado:

        *   `unitaire',

        *   `lineaire',

        *   `alternee',

        *   `somme',

        *   `produit',

        *   `cayley',

        *   `generale'.

          (%i1) resolvante: unitaire$
          (%i2) resolvante (x^7 - 14*x^5 + 56*x^3 - 56*x + 22, x, x^3 - 1,
                [x]);

          " resolvante unitaire " [7, 0, 28, 0, 168, 0, 1120, - 154, 7840,
                                   - 2772, 56448, - 33880,

          413952, - 352352, 3076668, - 3363360, 23114112, - 30494464,

          175230832, - 267412992, 1338886528, - 2292126760]
            3       6      3       9      6      3
          [x  - 1, x  - 2 x  + 1, x  - 3 x  + 3 x  - 1,

           12      9      6      3       15      12       9       6      3
          x   - 4 x  + 6 x  - 4 x  + 1, x   - 5 x   + 10 x  - 10 x  + 5 x

                 18      15       12       9       6      3
           - 1, x   - 6 x   + 15 x   - 20 x  + 15 x  - 6 x  + 1,

           21      18       15       12       9       6      3
          x   - 7 x   + 21 x   - 35 x   + 35 x  - 21 x  + 7 x  - 1]
          [- 7, 1127, - 6139, 431767, - 5472047, 201692519, - 3603982011]
                 7      6        5         4          3           2
          (%o2) y  + 7 y  - 539 y  - 1841 y  + 51443 y  + 315133 y

                                                        + 376999 y + 125253
          (%i3) resolvante: lineaire$
          (%i4) resolvante (x^4 - 1, x, x1 + 2*x2 + 3*x3, [x1, x2, x3]);

          " resolvante lineaire "
                 24       20         16            12             8
          (%o4) y   + 80 y   + 7520 y   + 1107200 y   + 49475840 y

                                                              4
                                                 + 344489984 y  + 655360000
          (%i5) resolvante: general$
          (%i6) resolvante (x^4 - 1, x, x1 + 2*x2 + 3*x3, [x1, x2, x3]);

          " resolvante generale "
                 24       20         16            12             8
          (%o6) y   + 80 y   + 7520 y   + 1107200 y   + 49475840 y

                                                              4
                                                 + 344489984 y  + 655360000
          (%i7) resolvante (x^4 - 1, x, x1 + 2*x2 + 3*x3, [x1, x2, x3, x4]);

          " resolvante generale "
                 24       20         16            12             8
          (%o7) y   + 80 y   + 7520 y   + 1107200 y   + 49475840 y

                                                              4
                                                 + 344489984 y  + 655360000
          (%i8) direct ([x^4 - 1], x, x1 + 2*x2 + 3*x3, [[x1, x2, x3]]);
                 24       20         16            12             8
          (%o8) y   + 80 y   + 7520 y   + 1107200 y   + 49475840 y

                                                              4
                                                 + 344489984 y  + 655360000
          (%i9) resolvante :lineaire$
          (%i10) resolvante (x^4 - 1, x, x1 + x2 + x3, [x1, x2, x3]);

          " resolvante lineaire "
                                        4
          (%o10)                       y  - 1
          (%i11) resolvante: symetrique$
          (%i12) resolvante (x^4 - 1, x, x1 + x2 + x3, [x1, x2, x3]);

          " resolvante symetrique "
                                        4
          (%o12)                       y  - 1
          (%i13) resolvante (x^4 + x + 1, x, x1 - x2, [x1, x2]);

          " resolvante symetrique "
                                     6      2
          (%o13)                    y  - 4 y  - 1
          (%i14) resolvante: alternee$
          (%i15) resolvante (x^4 + x + 1, x, x1 - x2, [x1, x2]);

          " resolvante alternee "
                      12      8       6        4        2
          (%o15)     y   + 8 y  + 26 y  - 112 y  + 216 y  + 229
          (%i16) resolvante: produit$
          (%i17) resolvante (x^7 - 7*x + 3, x, x1*x2*x3, [x1, x2, x3]);

          " resolvante produit "
                  35      33         29        28         27        26
          (%o17) y   - 7 y   - 1029 y   + 135 y   + 7203 y   - 756 y

                   24           23          22            21           20
           + 1323 y   + 352947 y   - 46305 y   - 2463339 y   + 324135 y

                    19           18             17              15
           - 30618 y   - 453789 y   - 40246444 y   + 282225202 y

                       14              12             11            10
           - 44274492 y   + 155098503 y   + 12252303 y   + 2893401 y

                        9            8            7             6
           - 171532242 y  + 6751269 y  + 2657205 y  - 94517766 y

                      5             3
           - 3720087 y  + 26040609 y  + 14348907
          (%i18) resolvante: symetrique$
          (%i19) resolvante (x^7 - 7*x + 3, x, x1*x2*x3, [x1, x2, x3]);

          " resolvante symetrique "
                  35      33         29        28         27        26
          (%o19) y   - 7 y   - 1029 y   + 135 y   + 7203 y   - 756 y

                   24           23          22            21           20
           + 1323 y   + 352947 y   - 46305 y   - 2463339 y   + 324135 y

                    19           18             17              15
           - 30618 y   - 453789 y   - 40246444 y   + 282225202 y

                       14              12             11            10
           - 44274492 y   + 155098503 y   + 12252303 y   + 2893401 y

                        9            8            7             6
           - 171532242 y  + 6751269 y  + 2657205 y  - 94517766 y

                      5             3
           - 3720087 y  + 26040609 y  + 14348907
          (%i20) resolvante: cayley$
          (%i21) resolvante (x^5 - 4*x^2 + x + 1, x, a, []);

          " resolvante de Cayley "
                  6       5         4          3            2
          (%o21) x  - 40 x  + 4080 x  - 92928 x  + 3772160 x  + 37880832 x

                                                                 + 93392896

     Para la resolvente de Cayley, los dos últimos argumentos son
     neutros y el polinomio dado en el argumento debe ser
     necesariamente de grado 5.

     Véanse también:
     `resolvante_bipartite', `resolvante_produit_sym',
     `resolvante_unitaire', `resolvante_alternee1', `resolvante_klein',
     `resolvante_klein3', `resolvante_vierer', `resolvante_diedrale'.


 -- Función: resolvante_alternee1 (<P>, <x>)
     Calcula la transformación de `<P>(<x>)' de grado <n> por la
     función $\prod_{1\leq i<j\leq n-1} (x_i-x_j)$.

     Véanse también:
     `resolvante_produit_sym', `resolvante_unitaire',
     `resolvante' , `resolvante_klein', `resolvante_klein3',
     `resolvante_vierer', `resolvante_diedrale', `resolvante_bipartite'.


 -- Función: resolvante_bipartite (<P>, <x>)
     Calcula la transformación de `<P>(<x>)' de grado <n> (<n> par) por
     la función $x_1x_2\ldots x_{n/2}+x_{n/2+1}\ldotsx_n$

          (%i1) resolvante_bipartite (x^6 + 108, x);
                        10        8           6             4
          (%o1)        y   - 972 y  + 314928 y  - 34012224 y

     Véanse también:
     `resolvante_produit_sym', `resolvante_unitaire',
     `resolvante', `resolvante_klein', `resolvante_klein3',
     `resolvante_vierer', `resolvante_diedrale', `resolvante_alternee1'.


 -- Función: resolvante_diedrale (<P>, <x>)
     Calcula la transformación de `<P>(<x>)' por la función `<x_1>
     <x_2> + <x_3> <x_4>'.

          (%i1) resolvante_diedrale (x^5 - 3*x^4 + 1, x);
                 15       12       11       10        9         8         7
          (%o1) x   - 21 x   - 81 x   - 21 x   + 207 x  + 1134 x  + 2331 x

                  6         5          4          3          2
           - 945 x  - 4970 x  - 18333 x  - 29079 x  - 20745 x  - 25326 x

           - 697

     Véanse también:
     `resolvante_produit_sym', `resolvante_unitaire',
     `resolvante_alternee1', `resolvante_klein', `resolvante_klein3',
     `resolvante_vierer', `resolvante'.


 -- Función: resolvante_klein (<P>, <x>)
     Calcula la transformación de `<P>(<x>)' por la función `<x_1>
     <x_2> <x_4> + <x_4>'.

     Véanse también:
     `resolvante_produit_sym', `resolvante_unitaire',
     `resolvante_alternee1', `resolvante', `resolvante_klein3',
     `resolvante_vierer', `resolvante_diedrale'.


 -- Función: resolvante_klein3 (<P>, <x>)
     Calcula la transformación de `<P>(<x>)' por la función `<x_1>
     <x_2> <x_4> + <x_4>'.

     Véanse también:
     `resolvante_produit_sym', `resolvante_unitaire',
     `resolvante_alternee1', `resolvante_klein', `resolvante',
     `resolvante_vierer', `resolvante_diedrale'.


 -- Función: resolvante_produit_sym (<P>, <x>)
     Calcula la lista de todas las resolventes producto del polinomio
     `<P>(<x>)'.

          (%i1) resolvante_produit_sym (x^5 + 3*x^4 + 2*x - 1, x);
                  5      4             10      8       7       6       5
          (%o1) [y  + 3 y  + 2 y - 1, y   - 2 y  - 21 y  - 31 y  - 14 y

              4       3      2       10      8       7    6       5       4
           - y  + 14 y  + 3 y  + 1, y   + 3 y  + 14 y  - y  - 14 y  - 31 y

                 3      2       5      4
           - 21 y  - 2 y  + 1, y  - 2 y  - 3 y - 1, y - 1]
          (%i2) resolvante: produit$
          (%i3) resolvante (x^5 + 3*x^4 + 2*x - 1, x, a*b*c, [a, b, c]);

          " resolvante produit "
                 10      8       7    6        5       4       3     2
          (%o3) y   + 3 y  + 14 y  - y  - 14 y  - 31 y  - 21 y  - 2 y  + 1

     Véanse también:
     `resolvante', `resolvante_unitaire',
     `resolvante_alternee1', `resolvante_klein',
     `resolvante_klein3', `resolvante_vierer',
     `resolvante_diedrale'.


 -- Función: resolvante_unitaire (<P>, <Q>, <x>)
     Calcula la resolvente del polinomio `<P>(<x>)' por el polinomio
     `<Q>(<x>)'.

     Véanse también:
     `resolvante_produit_sym', `resolvante',
     `resolvante_alternee1', `resolvante_klein', `resolvante_klein3',
     `resolvante_vierer', `resolvante_diedrale'.


 -- Función: resolvante_vierer (<P>, <x>)
     Calcula la transformación de `<P>(<x>)' por la función `<x_1>
     <x_2> - <x_3> <x_4>'.

     Véanse también:
     `resolvante_produit_sym', `resolvante_unitaire',
     `resolvante_alternee1', `resolvante_klein', `resolvante_klein3',
     `resolvante', `resolvante_diedrale'.


 -- Función: schur2comp (<P>, <l_var>)
     <P> es un polinomio de variables contenidas en la lista <l_var>.
     Cada una de las variables de <l_var> representa una función
     simétrica completa.  La <i>-ésima función simétrica completa de
     <l_var> se representa como la concatenación de la letra `h' con el
     entero <i>: `h<i>'.  La función `schur2comp' devuelve la expresión
     de <P> en función de las funciones de Schur.

          (%i1) schur2comp (h1*h2 - h3, [h1, h2, h3]);
          (%o1)                         s
                                         1, 2
          (%i2) schur2comp (a*h3, [h3]);
          (%o2)                         s  a
                                         3


 -- Función: somrac (<l>, <k>)
     Si la lista <l> contiene las funciones simétricas elementales de
     un polinomio <P>, la función `somrac' calcula el polinomio cuyas
     raíces son las sumas <k> a <k> de las raíces de <P>.

     Véase también `prodrac'.


 -- Función: tcontract (<pol>, <lvar>)
     Comprueba si el polinomio <pol> es simétrico en las variable
     contenidas en la lista <lvar>. En caso afirmativo, devuelve una
     forma contraída tal como lo hace la función `contract'.

     Otras funciones para efectuar cambios de representación son:
     `contract', `cont2part', `explose', `part2cont', `partpol' y
     `tpartpol'.


 -- Función: tpartpol (<pol>, <lvar>)
     Comprueba si el polinomio <pol> es simétrico en las variable
     contenidas en la lista <lvar>. En caso afirmativo, devuelve una
     forma particionada tal como lo hace la función `partpol'.

     Otras funciones para efectuar cambios de representación son:
     `contract', `cont2part', `explose', `part2cont', `partpol' y
     `tcontract'.


 -- Función: treillis (<n>)
     Devuelve todas las particiones de pesos <n>.

          (%i1) treillis (4);
          (%o1)    [[4], [3, 1], [2, 2], [2, 1, 1], [1, 1, 1, 1]]

     Véanse también `lgtreillis', `ltreillis' y `treinat'.


 -- Función: treinat (<part>)
     Devuelve la lista de las particiones inferiores de la partición
     <part> en su orden natural.

          (%i1) treinat ([5]);
          (%o1)                         [[5]]
          (%i2) treinat ([1, 1, 1, 1, 1]);
          (%o2) [[5], [4, 1], [3, 2], [3, 1, 1], [2, 2, 1], [2, 1, 1, 1],

                                                           [1, 1, 1, 1, 1]]
          (%i3) treinat ([3, 2]);
          (%o3)                 [[5], [4, 1], [3, 2]]

     Véanse también `lgtreillis', `ltreillis' y `treillis'.



File: maxima.info,  Node: Grupos,  Next: Entorno de Ejecución,  Prev: Simetrías,  Up: Top

31 Grupos
*********

* Menu:

* Funciones y variables para grupos::


File: maxima.info,  Node: Funciones y variables para grupos,  Prev: Grupos,  Up: Grupos

31.1 Funciones y variables para grupos
======================================

 -- Función: todd_coxeter (<relaciones>, <subgrupo>)
 -- Función: todd_coxeter (<relaciones>)
     Busca el orden de G/H donde G es el módulo del Grupo Libre de
     <relations>, y H es el subgrupo de G generado por `subgrupo'.
     `subgrupo' es un argumento opcional, cuyo valor por defecto es [].

     En este proceso se obtiene una tabla de multiplicación para la
     acción correcta de G sobre G/H, donde los co-cojuntos son
     enumerados [H,Hg2,Hg3,...]. Esto puede ser observado internamente
     en el `todd_coxeter_state'.

     Ejemplo:

          (%i1) symet(n):=create_list(
                  if (j - i) = 1 then (p(i,j))^^3 else
                      if (not i = j) then (p(i,j))^^2 else
                          p(i,i) , j, 1, n-1, i, 1, j);
                                                                 <3>
          (%o1) symet(n) := create_list(if j - i = 1 then p(i, j)

                                          <2>
           else (if not i = j then p(i, j)    else p(i, i)), j, 1, n - 1,

          i, 1, j)
          (%i2) p(i,j) := concat(x,i).concat(x,j);
          (%o2)        p(i, j) := concat(x, i) . concat(x, j)
          (%i3) symet(5);
                   <2>           <3>    <2>           <2>           <3>
          (%o3) [x1   , (x1 . x2)   , x2   , (x1 . x3)   , (x2 . x3)   ,

                      <2>           <2>           <2>           <3>    <2>
                    x3   , (x1 . x4)   , (x2 . x4)   , (x3 . x4)   , x4   ]
          (%i4) todd_coxeter(%o3);

          Rows tried 426
          (%o4)                          120
          (%i5) todd_coxeter(%o3,[x1]);

          Rows tried 213
          (%o5)                          60
          (%i6) todd_coxeter(%o3,[x1,x2]);

          Rows tried 71
          (%o6)                          20



File: maxima.info,  Node: Entorno de Ejecución,  Next: Miscelánea de opciones,  Prev: Grupos,  Up: Top

32 Entorno de Ejecución
***********************

* Menu:

* Introducción al entorno de ejecución::
* Interrupciones::
* Funciones y variables para el entorno de ejecución::


File: maxima.info,  Node: Introducción al entorno de ejecución,  Next: Interrupciones,  Prev: Entorno de Ejecución,  Up: Entorno de Ejecución

32.1 Introducción al entorno de ejecución
=========================================

El fichero `maxima-init.mac' se carga automáticamente cada vez que se
empieza a ejecutar Maxima.  Se puede utilizar `maxima-init.mac' para
personalizar el entorno de Maxima. Si existe, `maxima-init.mac' se
almacena normalmente en el directorio indicado por `maxima_userdir',
aunque puede estar alojado en cualquier otro directorio que esté al
alcance de la función  `file_search'.

He aquí un ejemplo de fichero `maxima-init.mac':

     setup_autoload ("specfun.mac", ultraspherical, assoc_legendre_p);
     showtime:all;

En este ejemplo, `setup_autoload' le dice a Maxima que cargue en
memoria el fichero `specfun.mac' si cualquiera de las funciones
`ultraspherical' o `assoc_legendre_p' es invocada pero todavía no está
definida. De esta manera, no es necesario recordar cargar el fichero
antes de llamar a las funciones.

La sentencia  `showtime: all' le dice a Maxima que haga una asignación
a la variable `showtime'.  El fichero  `maxima-init.mac' puede contener
cualesquiera otras asignaciones o sentencias de Maxima.


File: maxima.info,  Node: Interrupciones,  Next: Funciones y variables para el entorno de ejecución,  Prev: Introducción al entorno de ejecución,  Up: Entorno de Ejecución

32.2 Interrupciones
===================

El usuario puede detener un cómputo que esté consumiendo recursos
excesivos con el carácter ^C (control-C). La acción que se sigue por
defecto es la detención del cómputo y la impresión de otro prompt. En
este caso, no será posible reiniciar la tarea interrumpida.

Si a la variable Lisp `*debugger-hook*' se le asigna `nil' haciendo

     :lisp (setq *debugger-hook* nil)

entonces tras recibir ^C, Maxima entra en el depurador de Lisp y el
usuario podrá utilizar el depurador para inspeccionar el entorno Lisp.
La tarea que haya sido interrumpida podrá reiniciarse escribiendo
`continue' en el depurado de Lisp. La forma de volver a Maxima desde el
depurador de Lisp, que no sea la de permitir la computación hasta la
terminación de la tarea, dependerá de la versión de Lisp.

En sistemas Unix el carácter ^Z (control-Z) hace que Maxima deje de
ejecutarse devolviendo el control al terminal del sistema. El comando
`fg' hace que la ejecución de Maxima se reanude en el punto que lo dejó.


File: maxima.info,  Node: Funciones y variables para el entorno de ejecución,  Prev: Interrupciones,  Up: Entorno de Ejecución

32.3 Funciones y variables para el entorno de ejecución
=======================================================

 -- Variable del sistema: maxima_tempdir
     La variable `maxima_tempdir' almacena la ruta del directorio en el
     que Maxima crea ciertos ficheros temporales.  En particular, los
     ficheros temporales para la realización de gráficos se guardan en
     `maxima_tempdir'.

     El valor que inicialmente toma esta variable es el directorio de
     inicio del usuario, si Maxima es capaz de localizarlo; en caso
     contrario, Maxima intenta encontrar un directorio que sea
     aceptable.

     A la variable `maxima_tempdir' se le puede asignar una cadena de
     caracteres con la ruta del directorio.

 -- Variable del sistema: maxima_userdir
     La variable `maxima_userdir' almacena la ruta del directorio en el
     que Maxima buscará ficheros Lisp y de Maxima. Maxima también busca
     en otros directorios, guardando las variables `file_search_maxima'
     y `file_search_lisp' la lista completa de búsqueda.

     El valor que inicialmente toma esta variable es el de un
     subdirectorio del directorio de inicio del usuario, si Maxima es
     capaz de localizarlo; en caso contrario, Maxima intenta encontrar
     un directorio que sea aceptable.

     A la variable `maxima_userdir' se le puede asignar una cadena de
     caracteres con la ruta del directorio.  Sin embargo, cambiando el
     valor de la variable `maxima_userdir' no se alteran
     `file_search_maxima' ni `file_search_lisp', cuyos contenidos se
     modifican mediante otro sistema.

 -- Función: room ()
 -- Función: room (true)
 -- Función: room (false)
     Presenta una descrpción del estado de almacenamiento y gestión de
     la pila en Maxima. La llamada `room' invoca a la función Lisp
     homónima.

        * `room ()' prints out a moderate description.

        * `room (true)' prints out a verbose description.

        * `room (false)' prints out a terse description.


 -- Función: sstatus (<keyword>, <item>)
     Si <keyword> es el símbolo `feature', <item> será colocado en la
     lista de propiedades del sistema. Una vez ejecutado `sstatus
     (keyword, item)', `status (feature, item)' devuelve `true'. Si
     <keyword> es el símbolo `nofeature', <item> se borrará de la lista
     de propiedades del sistema.  Esto puede ser de utilidad para los
     autores de paquetes, permitiendo mantener el control sobre las
     propiedades que se han ido estableciendo.

     Véase también `status'.


 -- Función: status (`feature')
 -- Función: status (`feature', <item>)
     Devuelve información sobre la presencia o ausencia de ciertas
     propiedades dependientes del sistema.

        * `status (feature)' devuelve una lista con características del
          sistema. Éstas incluyen la versión de Lisp, tipo de sistema
          operativo, etc. La lista puede variar de un Lisp a otro.

        * `status (feature, item)' devuelve `true' si <item> está en la
          lista de elementos retornados por `status (feature)' y
          `false' en otro caso.  La función `status' no evalúa el
          argumento <item>. El operador de doble comilla simple, `''',
          permite la evaluación. Una propiedad cuyo nombre contenga un
          carácter especial debe ser suministrada como un argumento del
          tipo cadena. Por ejemplo, `status (feature, "ansi-cl")'.

     Véase también `sstatus'.

     La variable `features' contiene una lista de propiedades que se
     aplican a expresiones matemáticas. Véanse `features' y `featurep'
     para más información.


 -- Función: system (<command>)
     Ejecuta la instrucción <command> como un proceso independiente de
     Maxima.  La instrucción se le pasa a la consola del sistema para
     su ejecución.  La función `system' no está soportada por todos los
     sistemas operativos, pero suele estarlo en todos los entornos
     Unix y similares.

     Suponiendo que `_hist.out' es una lista de frecuencias que se
     quieren representar en un diagrama de barras utilizando el
     programa `xgraph',

          (%i1) (with_stdout("_hist.out",
                     for i:1 thru length(hist) do (
                       print(i,hist[i]))),
                 system("xgraph -bar -brw .7 -nl < _hist.out"));

     A fin de hacer el diagrama y eliminar el archivo temporal
     posteriormente, hágase:

          system("(xgraph -bar -brw .7 -nl < _hist.out;  rm -f _hist.out)&")


 -- Función: time (%o1, %o2, %o3, ...)
     Devuelve una lista de los tiempos, en segundos, que fueron
     necesarios para calcular los resultados de las salidas `%o1',
     `%o2', `%o3', .... Los tiempos devueltos son estimaciones hechas
     por Maxima del tiempo interno de computación. La función `time'
     sólo puede utilizarse para variables correspondientes a líneas de
     salida; para cualquier otro tipo de variables, `time' devuelve
     `unknown'.

     Hágase `showtime: true' para que Maxima devuelva el tiempo de
     ejecución de cada línea de salida.


 -- Función: timedate ()
 -- Función: timedate (<T>)
     Sin argumento, `timedate' devuelve una cadena que representa la
     hora y fecha actuales. La cadena tiene el formato `YYYY-MM-DD
     HH:MM:SS[+|-]ZZ:ZZ', donde los campos indicados son: año, mes, día,
     horas, minutos, segundos y número de horas de diferencia con
     respecto a la hora GMT.

     Con argumento, `timedate(<T>)' devuelve la hora <T> como una
     cadena con formato `YYYY-MM-DD HH:MM:SS[+|-]ZZ:ZZ'.  <T> se
     interpreta como el número de segundos transcurridos desde la
     medianoche del uno de enero de 1900, tal como lo devuelve
     `absolute_real_time'.

     Ejemplos:

     `timedate' sin argumento devuelve una cadena con la hora y fecha
     actuales.

          (%i1) d : timedate ();
          (%o1)                      2010-06-08 04:08:09+01:00
          (%i2) print ("timedate reports current time", d) $
          timedate reports current time 2010-06-08 04:08:09+01:00

     `timedate' con argumento devuelve una cadena que representa al
     propio argumento.

          (%i1) timedate (0);
          (%o1)                      1900-01-01 01:00:00+01:00
          (%i2) timedate (absolute_real_time () - 7*24*3600);
          (%o2)                      2010-06-01 04:19:51+01:00

 -- Función: absolute_real_time ()
     Devuelve el número de segundos transcurridos desde la medianoche
     del 1 de enero de 1900 UTC. Este valor es un número entero
     positivo.

     Véanse también `elapsed_real_time' y `elapsed_run_time'.

     Ejemplo:

          (%i1) absolute_real_time ();
          (%o1)                      3385045277
          (%i2) 1900 + absolute_real_time () / (365.25 * 24 * 3600);
          (%o2)                   2007.265612087104


 -- Función: elapsed_real_time ()
     Devuelve los segundos (incluyendo fracciones de segundo)
     transcurridos desde que Maxima se inició (o reinició) la sesión de
     Maxima. Este valor es un decimal en coma flotante.

     Véanse también `absolute_real_time' y `elapsed_run_time'.

     Ejemplo:

          (%i1) elapsed_real_time ();
          (%o1)                       2.559324
          (%i2) expand ((a + b)^500)$
          (%i3) elapsed_real_time ();
          (%o3)                       7.552087


 -- Función: elapsed_run_time ()
     Devuelve una estimación en segundos (incluyendo fracciones de
     segundo) durante los cuales Maxima ha estado realizando cálculos
     desde que se inició (o reinició) la sesión actual.  Este valor es
     un decimal en coma flotante.

     Véanse también `absolute_real_time' y `elapsed_real_time'.

     Ejemplo:

          (%i1) elapsed_run_time ();
          (%o1)                         0.04
          (%i2) expand ((a + b)^500)$
          (%i3) elapsed_run_time ();
          (%o3)                         1.26



File: maxima.info,  Node: Miscelánea de opciones,  Next: Reglas y patrones,  Prev: Entorno de Ejecución,  Up: Top

33 Miscelánea de opciones
*************************

* Menu:

* Introducción a la miscelánea de opciones::
* Share::
* Funciones y variables para la miscelánea de opciones::


File: maxima.info,  Node: Introducción a la miscelánea de opciones,  Next: Share,  Prev: Miscelánea de opciones,  Up: Miscelánea de opciones

33.1 Introducción a la miscelánea de opciones
=============================================

En esta sección se comentan varias opciones que tienen un efecto global
sobre le comportamiento de Maxima. También se comentan varias listas,
como la de las funciones definidas por el usuario.


File: maxima.info,  Node: Share,  Next: Funciones y variables para la miscelánea de opciones,  Prev: Introducción a la miscelánea de opciones,  Up: Miscelánea de opciones

33.2 Share
==========

El directorio "share" de Maxima contiene programas y ficheros de
interés para los usuarios de Maxima, pero no forman parte del núcleo de
Maxima. Estos programas se cargan en memoria con llamadas a las
funciones `load' o `setup_autoload'.

El código `:lisp *maxima-sharedir*' muestra la localización del
directorio "share" dentro del sistema de ficheros del usuario.

El código `printfile ("share.usg")' muestra una lista actualizada de
paquetes en "share". Los usuarios pueden encontrar más información
accediendo directamente a los contenidos del directorio "share".


File: maxima.info,  Node: Funciones y variables para la miscelánea de opciones,  Prev: Share,  Up: Miscelánea de opciones

33.3 Funciones y variables para la miscelánea de opciones
=========================================================

 -- Variable del sistema: askexp
     Cuando se invoca a `asksign', la expresión que se va a analizar es
     precisamente `askexp'.


 -- Variable optativa: genindex
     Valor por defecto: `i'

     La variable `genindex' es el prefijo alfabético utilizado para
     generar la siguiente variable de sumación en caso de necesidad.


 -- Variable optativa: gensumnum
     Valor por defecto: 0

     La variable `gensumnum' es el sufijo numérico utilizado para
     generar la siguiente variable de sumación. Si vale  `false'
     entonces el índice consistirá solamente de  `genindex', sin sufijo
     numérico.

 -- Función: gensym ()
 -- Función: gensym (<x>)
     `gensym()' crea y devuelve una nueva símbolo o variable sin valor
     asignado.

     El nombre del nuevo símbolo está formado por la concatenación de
     un prefijo, cuyo valor por defecto es "g", y de un sufijo, el cual
     es la representación decimal de un número que coincide, por
     defecto, con el valor de un contador interno de Lisp.

     En caso de suministrar el argumento <x>, siendo este una cadena,
     se utilizará como prefijo en lugar de "g", lo cual tendrá efecto
     sólo para esta llamada a `gensym'Â·

     En caso de suministrar el argumento <x>, siendo este un número
     entero, se utilizará como sufijo en lugar del contador interno de
     Lisp, lo cual tendrá efecto sólo para esta llamada a `gensym'Â·

     Si no se suministra el sufijo en forma explícita, y sólo en este
     caso, el contador interno sufrirá un incremento después de haber
     sido utilizado.

     Ejemplos:

          (%i1) gensym();
          (%o1)                         g887
          (%i2) gensym("new");
          (%o2)                        new888
          (%i3) gensym(123);
          (%o3)                         g123

 -- Variable opcional: packagefile
     Valor por defecto: `false'

     Los autores de paquetes que utilizan `save' o `translate' para
     crear librerías para otros usuarios pueden hacer la asignación
     `packagefile: true' para prevenir que se añada información a las
     listas con información del sistema de Maxima, como `values' o
     `functions'.

 -- Función: remvalue (<nombre_1>, ..., <nombre_n>)
 -- Función: remvalue (all)
     Elimina del sistema los valores de las variable de usuario
     <nombre_1>, ..., <nombre_n> (incluso las que tienen subíndices).

     La llamada `remvalue (all)' elimina los valores de todas las
     variables en `values', la lista de todas las variables a las que
     el usuario a dado algún nombre, pero no de aquéllas a las que
     Maxima asigna automáticamente un valor.

     Véase también `values'.


 -- Función: rncombine (<expr>)
     Transforma <expr> combinando todos los términos de <expr> que
     tengan denominadores idénticos o que difieran unos de otros por
     factores numéricos. Su comportamiento es diferente al de la
     función `combine', que combina términos con iguales denominadores.

     Haciendo `pfeformat: true' y utilizando `combine' se consiguen
     resultados similares a aquéllos que se pueden obtener con
     `rncombine', pero `rncombine' realiza el paso adicional de
     multiplicar denominadores numéricos. Esto da como resultado
     expresiones en las que se pueden reconocer algunas cancelaciones.

     Antes de utilizar esta función ejecútese `load(rncomb)'.

 -- Función: setup_autoload (<nombre_fichero>, <función_1>, ...,
          <función_n>)
     Especifica que si alguna de las funciones <function_1>, ...,
     <function_n> es referenciada pero todavía no ha sido definida, se
     cargará <nombre_fichero> mediante una llamada a `load'. El
     <nombre_fichero> normalmente contendrá las definiciones de las
     funciones especificadas, aunque esto no es imperativo.

     La función `setup_autoload' no opera con arreglos de funciones.

     La función `setup_autoload' no evalúa sus argumentos.

     Ejemplo:

          (%i1) legendre_p (1, %pi);
          (%o1)                  legendre_p(1, %pi)
          (%i2) setup_autoload ("specfun.mac", legendre_p, ultraspherical);
          (%o2)                         done
          (%i3) ultraspherical (2, 1/2, %pi);
          Warning - you are redefining the Macsyma function ultraspherical
          Warning - you are redefining the Macsyma function legendre_p
                                      2
                           3 (%pi - 1)
          (%o3)            ------------ + 3 (%pi - 1) + 1
                                2
          (%i4) legendre_p (1, %pi);
          (%o4)                          %pi
          (%i5) legendre_q (1, %pi);
                                        %pi + 1
                                %pi log(-------)
                                        1 - %pi
          (%o5)                 ---------------- - 1
                                       2


 -- Función: tcl_output (<list>, <i0>, <skip>)
 -- Función: tcl_output (<list>, <i0>)
 -- Función: tcl_output ([<list_1>, ..., <list_n>], <i>)
     Imprime los elementos de una lista encerrándolos con llaves `{ }',
     de forma apropiada para ser utilizado en un programa en el
     lenguaje Tcl/Tk.

     `tcl_output (<list>, <i0>, <skip>)' imprime <list>, empezando por
     el elemento <i0> siguiendo luego con los elementos `<i0> +
     <skip>', `<i0> + 2 <skip>', etc.

     `tcl_output (<list>, <i0>)' equivale a `tcl_output (<list>, <i0>,
     2)'.

     `tcl_output ([<list_1>, ..., <list_n>], <i>)' imprime los
     <i>-ésimos elementos de <list_1>, ..., <list_n>.

     Ejemplos:

          (%i1) tcl_output ([1, 2, 3, 4, 5, 6], 1, 3)$

           {1.000000000     4.000000000
           }
          (%i2) tcl_output ([1, 2, 3, 4, 5, 6], 2, 3)$

           {2.000000000     5.000000000
           }
          (%i3) tcl_output ([3/7, 5/9, 11/13, 13/17], 1)$

           {((RAT SIMP) 3 7) ((RAT SIMP) 11 13)
           }
          (%i4) tcl_output ([x1, y1, x2, y2, x3, y3], 2)$

           {$Y1 $Y2 $Y3
           }
          (%i5) tcl_output ([[1, 2, 3], [11, 22, 33]], 1)$

           {SIMP 1.000000000     11.00000000
           }


File: maxima.info,  Node: Reglas y patrones,  Next: Conjuntos,  Prev: Miscelánea de opciones,  Up: Top

34 Reglas y patrones
********************

* Menu:

* Introducción a reglas y patrones::
* Funciones y variables sobre reglas y patrones::


File: maxima.info,  Node: Introducción a reglas y patrones,  Next: Funciones y variables sobre reglas y patrones,  Prev: Reglas y patrones,  Up: Reglas y patrones

34.1 Introducción a reglas y patrones
=====================================

Esta sección describe las reglas de simplificación y los patrones de
comparación definidos por el usuario. Hay dos grupos de funciones que
implementan diferentes esquemas de comparación de patrones. En un grupo
están `tellsimp', `tellsimpafter', `defmatch', `defrule', `apply1',
`applyb1' y `apply2'. En el otro, se encuentran `let' y `letsimp'.
Ambos esquemas definen patrones en términos de variables de patrones
declaradas mediante  `matchdeclare'.

Las reglas de comparación de patrones definidas por `tellsimp' y
`tellsimpafter' se aplican automáticamente por el simplificador de
Maxima. Las reglas definidas por `defmatch', `defrule' y `let' se
aplican previa llamada a una función.

Hay otros mecanismos para las reglas; las relativas a polinomios se
controlan mediante `tellrat' y las del álgebra conmutativa y no
conmutativa se definen en el paquete `affine'.


File: maxima.info,  Node: Funciones y variables sobre reglas y patrones,  Prev: Introducción a reglas y patrones,  Up: Reglas y patrones

34.2 Funciones y variables sobre reglas y patrones
==================================================

 -- Función: apply1 (<expr>, <regla_1>, ..., <regla_n>)
     Aplica de forma repetida la <regla_1> a <expr> hasta que falla, a
     continuación aplica repetidamente la misma regla a todas las
     subexpresiones de <expr>, de izquierda a derecha, hasta que la
     <regla_1> haya fallado en todas las subexpresiones. Llámese
     <expr_2> al resultado de transformar <expr> de esta forma.
     Entonces la <regla_2> se aplica de la misma manera comenzando en
     el nivel superior de <expr_2>. Cuando la <regla_n> falla en la
     última expresión, se devuelve el resultado.

     `maxapplydepth' es el nivel de las subexpresiones más internas
     procesadas por `apply1' y `apply2'.

     Véase también `applyb1', `apply2' y `let'.


 -- Función: apply2 (<expr>, <regla_1>, ..., <regla_n>)
     Si la <regla_1> falla en una subexpresión dada, entonces se aplica
     la <regla_2> repetidamente, etc. Sólo si todas las reglas fallan
     en una subexpresión serán aplicadas todas las reglas de forma
     repetida a la siguiente subexpresión. Si alguna de las reglas
     tiene éxito entonces la misma subexpresión es reprocesada,
     comenzando por la primera regla.

     `maxapplydepth' es el nivel de las subexpresiones más internas
     procesadas por `apply1' y `apply2'.

     Véase también `applyb1' y `let'.


 -- Función: applyb1 (<expr>, <regla_1>, ..., <regla_n>)
     Aplica la <regla_1> reiteradamente hasta la subexpresión más
     interna de <expr> hasta que falle, a continuación pasa a aplicar
     la misma regla en un nivel superior (esto es, en subexpresiones
     más grandes), hasta que la <regla_1> falle en la expresión de
     nivel más alto. Después se aplica la <regla_2> de la misma manera
     al resultado obtenido de <regla_1>. Tras la aplicación de la
     <regla_n> a la expresión de mayor nivel, se devuelve el resultado.

     La función `applyb1' es similar a `apply1' pero opera de
     abajo-arriba, en lugar de arriba-abajo.

     `maxapplyheight' es la máxima altura a la que llega `applyb1'
     antes de terminar su cometido.

     Véase también `apply1', `apply2' y `let'.


 -- Variable opcional: current_let_rule_package
     Valor por defecto: `default_let_rule_package'

     La variable `current_let_rule_package' es el nombre del paquete de
     reglas que están utilizando las funciones del paquete `let'
     (`letsimp', etc.), a menos que se especifique otro paquete de
     reglas. A esta variable se le puede asignar el nombre de cualquier
     paquete de reglas definido por medio de la instrucción `let'.

     Si se hace la llamada `letsimp (expr, rule_pkg_name)', el paquete
     de reglas `rule_pkg_name' será utilizado únicamente para esa
     llamada y el valor de `current_let_rule_package' no cambia.


 -- Variable opcional: default_let_rule_package
     Valor por defecto: `default_let_rule_package'

     La variable `default_let_rule_package' es el nombre del paquete de
     reglas utilizado cuando el usuario no especifica otro
     explícitamente con `let' o cambiando el valor de
     `current_let_rule_package'.


 -- Función: defmatch (<nombre_prog>, <patrón>, <x_1>, ..., <x_n>)
 -- Función: defmatch (<progname>, <pattern>)
     Define una función `<nombre_prog>(<expr>, <x_1>, ..., <x_n>)' que
     analiza si <expr> coincide con el <patrón>.

     El argumento <patrón> es una expresión que contiene los argumentos
     de patrón <x_1>, ..., <x_n> y algunas variables de patrón.  Los
     argumentos de patrón se dan de forma explícita como argumentos a
     `defmatch', mientras que las variables de patrón se declaran
     mediante la función `matchdeclare'.  Cualquier variable no
     declarada bien como variable patrón en `matchdeclare', bien como
     argumento patrón en `defmatch' se hace coincidir con ella misma.

     El primer argumento de la función definida <nombre_prog> es una
     expresión a ser comparada con el patrón y los demás argumentos son
     los argumentos que se corresponden con las variables ficticias
     <x_1>, ..., <x_n> del patrón.

     Si el resultado de la comparación es positivo, <nombre_prog>
     devuelve una lista de ecuaciones cuyos miembros izquierdos son los
     argumentos y variables de patrón, y cuyos miembros derechos son
     las subexpresiones en las que se han producido las coincidencias
     con patrones. A las variables de patrón, no a los argumentos, se
     les asignan las subexpresiones con las que coinciden. Si la
     comparación falla, <nombre_prog> devuelve `false'.

     Un patrón literal, es decir, que no contiene ni argumentos ni
     variables de patrón, devuelve `true' en caso de coincidencia.

     A literal pattern (that is, a pattern which contains neither
     pattern arguments nor pattern variables) returns `true' if the
     match succeeds.

     Véase también `matchdeclare', `defrule', `tellsimp' y
     `tellsimpafter'.

     Ejemplos:

     Define una función `linearp(expr, x)' que comprueba si `expr' es
     de la forma `a*x + b', donde ni `a' ni `b' contienen a `x' y `a'
     es no nulo.  La función definida reconoce expresiones lineales
     respecto de cualquier variable, pues el argumento de patrón `x' es
     pasado a `defmatch'.

          (%i1) matchdeclare (a, lambda ([e], e#0 and freeof(x, e)),
                              b, freeof(x));
          (%o1)                         done
          (%i2) defmatch (linearp, a*x + b, x);
          (%o2)                        linearp
          (%i3) linearp (3*z + (y + 1)*z + y^2, z);
                                   2
          (%o3)              [b = y , a = y + 4, x = z]
          (%i4) a;
          (%o4)                         y + 4
          (%i5) b;
                                          2
          (%o5)                          y
          (%i6) x;
          (%o6)                           x

     Define una función `linearp(expr)' que comprueba si `expr' es de
     la forma `a*x + b', donde ni `a' ni `b' contienen a `x' y `a' es
     no nulo.  La función definida sólo reconoce expresiones lineales
     únicamente respecto de `x', pues no se le pasa a `defmatch' nigún
     argumento de patrón

          (%i1) matchdeclare (a, lambda ([e], e#0 and freeof(x, e)),
                              b, freeof(x));
          (%o1)                         done
          (%i2) defmatch (linearp, a*x + b);
          (%o2)                        linearp
          (%i3) linearp (3*z + (y + 1)*z + y^2);
          (%o3)                         false
          (%i4) linearp (3*x + (y + 1)*x + y^2);
                                       2
          (%o4)                  [b = y , a = y + 4]

     Define una función `checklimits(expr)' que comprueba si `expr' es
     una integral definida.

          (%i1) matchdeclare ([a, f], true);
          (%o1)                         done
          (%i2) constinterval (l, h) := constantp (h - l);
          (%o2)        constinterval(l, h) := constantp(h - l)
          (%i3) matchdeclare (b, constinterval (a));
          (%o3)                         done
          (%i4) matchdeclare (x, atom);
          (%o4)                         done
          (%i5) simp : false;
          (%o5)                         false
          (%i6) defmatch (checklimits, 'integrate (f, x, a, b));
          (%o6)                      checklimits
          (%i7) simp : true;
          (%o7)                         true
          (%i8) 'integrate (sin(t), t, %pi + x, 2*%pi + x);
                                 x + 2 %pi
                                /
                                [
          (%o8)                 I          sin(t) dt
                                ]
                                /
                                 x + %pi
          (%i9) checklimits (%);
          (%o9)    [b = x + 2 %pi, a = x + %pi, x = t, f = sin(t)]


 -- Función: defrule (<nombre_regla>, <patrón>, <reemplazamiento>)
     Define y da nombre a una regla de reemplazamiento para el patrón
     dado. Si la regla <nombre_regla> es aplicada a una expresión (por
     `apply1', `applyb1' o `apply2'), cada subexpresión que coincida
     con el patrón será reemplazada por el contenido de
     <reemplazamiento>.

     Las propias reglas pueden ser tratadas como funciones que
     transforman una expresión mediante una operación consistente en la
     búsqueda de una coincidencia y posterior aplicación de un
     reemplazamiento. Si la comparación falla, la función que
     implementa la regla devuelve `false'.


 -- Función: disprule (<nombre_regla_1>, ..., <nombre_regla_n>)
 -- Función: disprule (all)
     Muestra las reglas de <nombre_regla_1>, ..., <nombre_regla_n>, tal
     como son devueltas por `defrule', `tellsimp' o `tellsimpafter', o
     un patrón definido por `defmatch'.  Cada regla se muestra con una
     etiqueta de expresión intermedia (`%t').

     La llamada `disprule (all)' muestra todas las reglas.

     La función `disprule' no evalúa sus argumentos y devuelve la lista
     de etiquetas de expresiones intermedias correspondientes a las
     reglas mostradas.

     Véase también `letrules', que muestra las reglas definidas por
     `let'.

     Ejemplos:

          (%i1) tellsimpafter (foo (x, y), bar (x) + baz (y));
          (%o1)                   [foorule1, false]
          (%i2) tellsimpafter (x + y, special_add (x, y));
          (%o2)                   [+rule1, simplus]
          (%i3) defmatch (quux, mumble (x));
          (%o3)                         quux
          (%i4) disprule (foorule1, "+rule1", quux);
          (%t4)        foorule1 : foo(x, y) -> baz(y) + bar(x)

          (%t5)          +rule1 : y + x -> special_add(x, y)

          (%t6)                quux : mumble(x) -> []

          (%o6)                    [%t4, %t5, %t6]
          (%i6) ''%;
          (%o6) [foorule1 : foo(x, y) -> baz(y) + bar(x),
               +rule1 : y + x -> special_add(x, y), quux : mumble(x) -> []]


 -- Función: let (<prod>, <repl>, <predname>, <arg_1>, ..., <arg_n>)
 -- Función: let ([<prod>, <repl>, <predname>, <arg_1>, ..., <arg_n>],
          <nombre_paquete>)
     Define una regla de sustitución para `letsimp' tal que <prod> es
     sustituido por <repl>, donde <prod> es un producto de potencias
     positivas o negativas de los términos siguientes:

        * Átomos que `letsimp' buscará a menos que antes de llamar a
          `letsimp' se utilice la función `matchdeclare' para asociar
          un predicado con el átomo. En este caso `letsimp' hará
          coincidir el átomo con cualquier término del producto que
          satisfaga el predicado.

        * Expresiones básicas como `sin(x)', `n!', `f(x,y)', etc.  Como
          en el caso anterior, `letsimp' buscará coincidencias exactas,
          a menos que se utilice `matchdeclare' para asociar un
          predicado con el argumento de la expresión básica (`sin(x)',
          `n!', `f(x,y)', ...).

     Si se incluye un predicado en la función `let' seguido de una
     lista de argumentos, una coincidencia aceptable  (es decir, una
     que fuese aceptada si se hubiese omitido el predicado) se aceptará
     sólo si `predname (arg_1', ..., arg_n')' vale `true', donde
     <arg_i'> es el valor coincidente con <arg_i>.  El argumento
     <arg_i> puede ser el nombre de cualquier átomo o el argumento de
     cualquier expresión básica que aparezca en <prod>.  <repl> puede
     ser cualquier expresión racional. Si cualquiera de los átomos o
     argumentos de <prod> aparece en <repl> se llevan a cabo las
     sustituciones correspondientes.

     La variable global `letrat' controla la simplificación de los
     cocientes por `letsimp'. Cuando `letrat' vale  `false', `letsimp'
     simplifica separadamente el numerador y denominador de  <expr> y
     no simplifica el cociente. Sustituciones como que `n!/n' se
     reduzca a `(n-1)!' ya no se realizarán. Cuando  `letrat' vale
     `true', entonces se simplifican el numerador, el denominador y el
     cociente, en este orden.

     Estas funciones de sustitución permiten al usuario trabajar con
     varios paquetes de reglas al mismo tiempo. Cada paquete de reglas
     puede contener cierto número de reglas `let' que son referenciadas
     por un nombre dado por el usuario.  `let ([<prod>, <repl>,
     <predname>, <arg_1>, ..., <arg_n>], <nombre_paquete>)' añade la
     regla  <predname> al paquete de reglas  <nombre_paquete>. `letsimp
     (<expr>, <package_name>)' aplica las reglas de <nombre_paquete>.
     La llamada `letsimp (<expr>, <nombre_paquete1>, <nombre_paquete2>,
     ...)' es equivalente a `letsimp (<expr>, <nombre_paquete1>)'
     seguida de `letsimp (%, <nombre_paquete2>)', ....

     `current_let_rule_package' es el nombre del paquete de reglas que
     se está utilizando. A esta variable se le puede asignar el nombre
     de cualquier paquete de reglas definido mediante el comando `let'.
     Siempre que una de las funciones incluidas en el paquete  `let'
     sean invocadas sin nombre de paquete, se utilizará el paquete cuyo
     nombre se guarde en `current_let_rule_package'. Si se hace una
     llamada tal como `letsimp (<expr>, <rule_pkg_name>)', el paquete
     de reglas <rule_pkg_name> es utilizado solamente para ese comando
     `letsimp', sin efectuarse cambios en `current_let_rule_package'. A
     menos que se indique otra cosa, `current_let_rule_package' toma
     por defecto el valor de `default_let_rule_package'.

          (%i1) matchdeclare ([a, a1, a2], true)$
          (%i2) oneless (x, y) := is (x = y-1)$
          (%i3) let (a1*a2!, a1!, oneless, a2, a1);
          (%o3)         a1 a2! --> a1! where oneless(a2, a1)
          (%i4) letrat: true$
          (%i5) let (a1!/a1, (a1-1)!);
                                  a1!
          (%o5)                   --- --> (a1 - 1)!
                                  a1
          (%i6) letsimp (n*m!*(n-1)!/m);
          (%o6)                      (m - 1)! n!
          (%i7) let (sin(a)^2, 1 - cos(a)^2);
                                  2               2
          (%o7)                sin (a) --> 1 - cos (a)
          (%i8) letsimp (sin(x)^4);
                                  4           2
          (%o8)                cos (x) - 2 cos (x) + 1


 -- Variable opcional: letrat
     Valor por defecto: `false'

     Cuando `letrat' vale `false', `letsimp' simplifica separadamente
     el numerador y denominador de una fracción sin simplificar luego
     el cociente.

     Cuando `letrat' vale `true', se simplifican el numerador,
     denominador y cociente, por este orden.

          (%i1) matchdeclare (n, true)$
          (%i2) let (n!/n, (n-1)!);
                                   n!
          (%o2)                    -- --> (n - 1)!
                                   n
          (%i3) letrat: false$
          (%i4) letsimp (a!/a);
                                         a!
          (%o4)                          --
                                         a
          (%i5) letrat: true$
          (%i6) letsimp (a!/a);
          (%o6)                       (a - 1)!


 -- Función: letrules ()
 -- Función: letrules (<nombre_paquete>)
     Muestra las reglas de un paquete de reglas. La llamada `letrules
     ()' muestra las reglas del paquete de reglas actual. La llamada
     `letrules (<nombre_paquete>)' muestra las reglas de
     <nombre_paquete>.

     El paquete de reglas actual tiene su nombre almacenado en by
     `current_let_rule_package'. A menos que se indique de otra manera,
     `current_let_rule_package' toma por defecto el valor de
     `default_let_rule_package'.

     Véase también `disprule', que muestra las reglas definidas por
     `tellsimp' y `tellsimpafter'.


 -- Función: letsimp (<expr>)
 -- Función: letsimp (<expr>, <nombre_paquete>)
 -- Función: letsimp (<expr>, <nombre_paquete_1>, ...,
          <nombre_paquete_n>)
     Aplica repetidamente las reglas definidas por `let' hasta que no
     se puedan hacer más cambios en <expr>.

     La llamada `letsimp (<expr>)' utiliza las reglas de
     `current_let_rule_package'.

     La llamada `letsimp (<expr>, <nombre_paquete>)' utiliza las reglas
     de <nombre_paquete> sin efectuar cambios en
     `current_let_rule_package'.

     La llamada `letsimp (<expr>, <nombre_paquete_1>, ...,
     <nombre_paquete_n>)' es equivalente a `letsimp (<expr>,
     <nombre_paquete_1>', seguida de  `letsimp (%, <nombre_paquete_2>)'
     y así sucesivamente.


 -- Variable opcional: let_rule_packages
     Valor por defecto: `[default_let_rule_package]'

     La variable `let_rule_packages' guarda una lista con todos los
     paquetes de reglas definidos por el usuario, junto con el paquete
     por defecto `default_let_rule_package'.


 -- Función: matchdeclare (<a_1>, <pred_1>, ..., <a_n>, <pred_n>)
     Asocia un predicado <pred_k> con una variable o lista de variables
     <a_k>, de forma que  <a_k> se comparará con expresiones para las
     cuales el predicado devuelva algo que no sea `false'.

     Un predicado puede ser el nombre de una función, una expresión
     lambda, una llamada a función, una llamada a una expresión lambda
     sin el último argumento, `true' o `all'.  Cualquier expresión se
     hace coincidir con `true' o `all'.

     Si el predicado se especifica como una llamada a función o a una
     expresión lambda, la expresión a ser analizada es añadida a la
     lista de argumentos, siendo los argumentos evaluados en el momento
     de ser evaluada la comparación.  En cambio, si el predicado se
     especifica como un nombre de función o como una expresión lambda,
     la expresión a ser analizada será su único argumento. No es
     necesario definir una función de predicado cuando se hace una
     llamada a `matchdeclare'; el predicado no se evalúa hasta que se
     ensaya  una comparación.

     Un predicado puede devolver tanto una expresión booleana, como
     `true' o `false'.  Las expresiones booleanas se evalúan con `is'
     dentro de la regla, por lo que no es necesario llamar a `is' desde
     dentro del predicado.

     Si una expresión satisface un predicado, se asigna a la variable
     de comparación la expresión, excepto cuando las variables de
     comparación son operandos de sumas `+' o multiplicaciones `*'.
     Solamente las sumas y multiplicaciones son tratadas de forma
     especial; los demás operadores n-arios (tanto los del sistema como
     los definidos por el usuario) son tratados como funciones
     ordinarias.

     En el caso de sumas y multiplicaciones, a la variable de
     comparación se le puede asignar una expresión simple que satisfaga
     el predicado de comparación, o una suma o producto,
     respectivamente, de tales expresiones. Los predicados son
     evaluados en el orden en el que sus variables asociadas aparecen
     en el patrón de comparación, y un término que satisfaga más de un
     predicado es tomado por el primer predicado que satisfaga. Cada
     predicado se compara con todos los operandos de la suma o producto
     antes de ser evaluado el siguiente predicado. Además, si 0 o 1,
     respectivamente, satisface un predicado de comparación, y no hay
     otros términos que lo satisfagan, se asignará el 0 o 1 a la
     variable de comparación asociada al predicado.

     El algoritmo para procesar patrones de suma y multiplicación hace
     que los resultados de algunas comparaciones dependan del orden de
     los términos en el patrón de comparación y en la expresión a ser
     comparada. Sin embargo, si todos los predicados de comparación son
     mutuamente excluyentes, el resultado de la comparación no depende
     para nada de la ordenación, puesto que un predicado de comparación
     no puede aceptar términos aceptados por otros predicados.

     Invocando `matchdeclare' con una variable <a> como argumento
     cambia la propiedad de `matchdeclare' para  <a>, si ya había una
     declarada; solamente el `matchdeclare' más reciente está activo
     cuando se define una regla. Cambios posteriores en la propiedad de
     `matchdeclare' (via `matchdeclare' o `remove') no afectan a las
     reglas existentes.

     `propvars (matchdeclare)' devuelve la lista de todas las variables
     para las cuales hay una propiedad de `matchdeclare'. La llamada
     `printprops (<a>, matchdeclare)' devuelve el predicado para la
     variable `a'.  La llamada `printprops (all, matchdeclare)'
     devuelve la lista de predicados de todas las variables de
     `matchdeclare'. La llamada `remove (<a>, matchdeclare)' borra la
     propiedad `matchdeclare' de <a>.

     Las funciones `defmatch', `defrule', `tellsimp', `tellsimpafter' y
     `let' construyen reglas que analizan expresiones mediante patrones.

     `matchdeclare' no evalúa sus argumentos y siempre devuelve `done'.

     Ejemplos:

     Un predicado puede ser el nombre de una función, una expresión
     lambda, una llamada a función, una llamada a una expresión lambda
     sin el último argumento, `true' o `all'.

          (%i1) matchdeclare (aa, integerp);
          (%o1)                         done
          (%i2) matchdeclare (bb, lambda ([x], x > 0));
          (%o2)                         done
          (%i3) matchdeclare (cc, freeof (%e, %pi, %i));
          (%o3)                         done
          (%i4) matchdeclare (dd, lambda ([x, y], gcd (x, y) = 1) (1728));
          (%o4)                         done
          (%i5) matchdeclare (ee, true);
          (%o5)                         done
          (%i6) matchdeclare (ff, all);
          (%o6)                         done

     Si una expresión satisface un predicado, se asigna a la variable
     de comparación la expresión.

          (%i1) matchdeclare (aa, integerp, bb, atom);
          (%o1)                         done
          (%i2) defrule (r1, bb^aa, ["integer" = aa, "atom" = bb]);
                              aa
          (%o2)        r1 : bb   -> [integer = aa, atom = bb]
          (%i3) r1 (%pi^8);
          (%o3)               [integer = 8, atom = %pi]

     En el caso de sumas y multiplicaciones, a la variable de
     comparación se le puede asignar una expresión simple que satisfaga
     el predicado de comparación, o una suma o producto,
     respectivamente, de tales expresiones.

          (%i1) matchdeclare (aa, atom, bb, lambda ([x], not atom(x)));
          (%o1)                         done
          (%i2) defrule (r1, aa + bb,
                        ["all atoms" = aa, "all nonatoms" = bb]);
          bb + aa partitions `sum'
          (%o2)  r1 : bb + aa -> [all atoms = aa, all nonatoms = bb]
          (%i3) r1 (8 + a*b + sin(x));
          (%o3)     [all atoms = 8, all nonatoms = sin(x) + a b]
          (%i4) defrule (r2, aa * bb,
                         ["all atoms" = aa, "all nonatoms" = bb]);
          bb aa partitions `product'
          (%o4)   r2 : aa bb -> [all atoms = aa, all nonatoms = bb]
          (%i5) r2 (8 * (a + b) * sin(x));
          (%o5)    [all atoms = 8, all nonatoms = (b + a) sin(x)]


 -- Variable opcional: maxapplydepth
     Valor por defecto: 10000

     La variable `maxapplydepth' es la máxima profundidad a la que van
     a introducirse `apply1' y  `apply2'.


 -- Variable opcional: maxapplyheight
     Valor por defecto: 10000

     La variable `maxapplyheight' es la m2'axima altura a la que
     escalará `applyb1' antes de detenerse.


 -- Función: remlet (<prod>, <nombre>)
 -- Función: remlet ()
 -- Función: remlet (all)
 -- Función: remlet (all, <nombre>)
     Elimina la última regla de sustitución <prod> -> repl que haya
     sido definida por la función `let'. Si se suministar el nombre la
     regla será borrada del paquete con ese mismo nombre.

     Las llamadas `remlet()' y `remlet(all)' eliminan todas las reglas
     de sustitución del paquete de reglas actual. Si se suministra el
     nombre de un paquete de reglas, como en `remlet (all, <nombre>)',
     el paquete de reglas con ese  <nombre> es también eliminado.

     Si es necesario cambiar una sustitución haciendo uso de la misma
     producción, no es necesario llamar a  `remlet', simplemente
     redefínase la sustitución utilizando la misma producción con la
     función  `let' junto con el nuevo reemplazamiento y/o nombre de
     predicado. De ser llamado nuevamente `remlet (<prod>)' la
     sustitución original sería recuperada.

     Véase también `remrule', que elimina una regla definida por
     `tellsimp' o `tellsimpafter'.


 -- Función: remrule (<op>, <nombre_regla>)
 -- Función: remrule (<op>, all)
     Elimina las reglas previamente definidas por `tellsimp' o
     `tellsimpafter'.

     La llamada `remrule (<op>, <nombre_regla>)' elimina la regla de
     nombre  <nombre_regla> del operador <op>.

     Independientemente de que  <op> sea un operador propio de Maxima o
     haya sido definido por el usario (como los establecidos por
     `infix', `prefix', etc.), tanto <op> como <rulename> deben ir
     encerrados entre comillas dobles.

     La llamada `remrule (<function>, all)' borra todas las reglas para
     el operador <op>.

     Véase también `remlet', que elimina una regla definida mediante
     `let'.

     Ejemplos:

          (%i1) tellsimp (foo (aa, bb), bb - aa);
          (%o1)                   [foorule1, false]
          (%i2) tellsimpafter (aa + bb, special_add (aa, bb));
          (%o2)                   [+rule1, simplus]
          (%i3) infix ("@@");
          (%o3)                          @@
          (%i4) tellsimp (aa @@ bb, bb/aa);
          (%o4)                   [@@rule1, false]
          (%i5) tellsimpafter (quux (%pi, %e), %pi - %e);
          (%o5)                  [quuxrule1, false]
          (%i6) tellsimpafter (quux (%e, %pi), %pi + %e);
          (%o6)             [quuxrule2, quuxrule1, false]
          (%i7) [foo (aa, bb), aa + bb, aa @@ bb, quux (%pi, %e),
                 quux (%e, %pi)];
                                               bb
          (%o7) [bb - aa, special_add(aa, bb), --, %pi - %e, %pi + %e]
                                               aa
          (%i8) remrule (foo, foorule1);
          (%o8)                          foo
          (%i9) remrule ("+", ?\+rule1);
          (%o9)                           +
          (%i10) remrule ("@@", ?\@\@rule1);
          (%o10)                         @@
          (%i11) remrule (quux, all);
          (%o11)                        quux
          (%i12) [foo (aa, bb), aa + bb, aa @@ bb, quux (%pi, %e),
                  quux (%e, %pi)];
          (%o12) [foo(aa, bb), bb + aa, aa @@ bb, quux(%pi, %e),
                                                   quux(%e, %pi)]


 -- Función: tellsimp (<patrón>, <reemplazamiento>)
     La función `tellsimp' es similar a  `tellsimpafter' pero coloca
     nueva información antes que la antigua, de manera que se aplica
     antes que las reglas de simplificación de Maxima.

     La función `tellsimp' se utiliza cuando es importante utilizar la
     expresión antes de que el simplificador opere sobre ella; por
     ejemplo, cuando el simplificador ya "sabe" algo sobre una
     expresión, pero lo que devuelve no es lo que quiere el usuario. En
     cambio, cuando  el simplificador ya "sabe" algo sobre una
     expresión pero lo que devuelve no es lo suficiente para el
     usuario, entonces éste podrá estar interesado en utilizar
     `tellsimpafter'.

     El patrón no puede ser una suma, ni un producto, ni una variable
     ni un número.

     `rules' es la lista de reglas definidas por `defrule', `defmatch',
     `tellsimp' y `tellsimpafter'.

     Ejemplos:

          (%i1) matchdeclare (x, freeof (%i));
          (%o1)                         done
          (%i2) %iargs: false$
          (%i3) tellsimp (sin(%i*x), %i*sinh(x));
          (%o3)                 [sinrule1, simp-%sin]
          (%i4) trigexpand (sin (%i*y + x));
          (%o4)         sin(x) cos(%i y) + %i cos(x) sinh(y)
          (%i5) %iargs:true$
          (%i6) errcatch(0^0);
           0
          0  has been generated
          (%o6)                          []
          (%i7) ev (tellsimp (0^0, 1), simp: false);
          (%o7)                  [^rule1, simpexpt]
          (%i8) 0^0;
          (%o8)                           1
          (%i9) remrule ("^", %th(2)[1]);
          (%o9)                           ^
          (%i10) tellsimp (sin(x)^2, 1 - cos(x)^2);
          (%o10)                 [^rule2, simpexpt]
          (%i11) (1 + sin(x))^2;
                                                2
          (%o11)                    (sin(x) + 1)
          (%i12) expand (%);
                                             2
          (%o12)               2 sin(x) - cos (x) + 2
          (%i13) sin(x)^2;
                                            2
          (%o13)                     1 - cos (x)
          (%i14) kill (rules);
          (%o14)                        done
          (%i15) matchdeclare (a, true);
          (%o15)                        done
          (%i16) tellsimp (sin(a)^2, 1 - cos(a)^2);
          (%o16)                 [^rule3, simpexpt]
          (%i17) sin(y)^2;
                                            2
          (%o17)                     1 - cos (y)


 -- Función: tellsimpafter (<patrón>, <reemplazamiento>)
     Define una regla de simplificación que el simplificador aplicará
     después de las reglas de simplificación propias de de Maxima. El
     <patrón> es una expresión que contiene variables de patrón
     (declaradas por `matchdeclare') junto con otros átomos y
     operadores. El contenido de <reemplazamiento> sustituye una
     expresión que coincida con el patrón; a las variables de patrón en
     <reemplazamiento> se les asignan los valores coincidentes en la
     expresión.

     El <patrón> puede ser una expresión no atómica en la que el
     operador principal no sea una variable de patrón; la regla de
     simplificación se asocia con el operador principal. Los nombres de
     las funciones (con una excepción que se indica más abajo), listas
     y arrays pueden aparecer en el <patrón> como operador principal
     sólo como literales (no variables de patrones); esto excluye
     expresiones como  `aa(x)' y `bb[y]', si tanto `aa' como `bb' son
     patrones de variables. Nombres de funciones, listas y arrays que
     sean variables de patrón pueden aparecer como operadores que no
     sean el operador principal de  <patrón>.

     Hay una excepción a la regla indicada más arriba concerniente a
     los nombres de funciones. El nombre de una función subindicada en
     una expresión tal como `aa[x](y)' puede ser una variable de patrón
     porque el operador principal no es  `aa' sino el átomo de Lisp
     `mqapply'. Esta es una consecuencia de la representación de
     expresiones que contienen funciones subindicadas.

     Las reglas de simplificación se aplican tras las evaluaciones (a
     menos que se supriman con el apóstrofo o la variable `noeval').
     Las reglas establecidas por `tellsimpafter' se aplican en el orden
     en que han sido definidas y después de las reglas propias de
     Maxima. Las reglas se aplican de abajo arriba, esto es, se aplican
     primero a las subexpresiones antes que a toda la expresión. Puede
     ser necesario simplificar repetidamente un resultado (por ejemplo,
     mediante el operador de doble comilla simple `''' o la variable
     `infeval') para asegurar que se aplican todas las reglas.

     Las variables de patrón se tratan como variables locales en las
     reglas de simplificación. Una vez definida una regla, el valor de
     una variable de patrón no afecta a la regla, ni se ve influenciada
     poe ésta. Una asignación a una variable de patrón que resulta de
     la aplicación exitosa de una regla no afecta a la asignación
     actual de la variable de patrón. Sin embargo, como cualquier otro
     átomo de Maxima, las propiedades de las variables de patrón (tal
     como se definen con `put' y sus funciones relacionadas) son
     globales.

     La regla construida por  `tellsimpafter' es nombrada detrás del
     operador principal de <patrón>. Reglas para operadores de Maxima y
     operadores definidos por el usuario con `infix', `prefix',
     `postfix', `matchfix' y `nofix', tienen nombres que son cadenas
     alfanuméricas de Maxima. Reglas para otras funciones tienen
     nombres que son identificadores ordinarios de Maxima.

     El tratamiento de formas nominales y verbales es hasta cierto
     punto confuso. Si se define una regla para una forma nominal (o
     verbal)  y ya existe una regla para la correspondiente forma
     verbal (o nominal), la regla recién definida se aplica a ambas
     formas (nominal y verbal). Si no existe regla para una forma
     verbal (o nominal) la regla recién definida se aplica únicamente a
     la forma nominal (o verbal).

     La regla construida por  `tellsimpafter' es una típica función de
     Lisp. Si el nombre de la regla es `$foorule1', la sentencia `:lisp
     (trace $foorule1)' hace una traza de la función y  `:lisp
     (symbol-function '$foorule1)' muestra su definición.

     La función `tellsimpafter' no evalúa sus argumentos y devuelve la
     lista de reglas para el operador principal de  <patrón>, incluida
     la regla recién establecida.

     Véanse también `matchdeclare', `defmatch', `defrule', `tellsimp',
     `let', `kill', `remrule' y `clear_rules'.

     Ejemplos:

     <pattern> puede ser cualquier expresión no atómica en la que el
     operador principal no sea una variable de patrón.

          (%i1) matchdeclare (aa, atom, [ll, mm], listp, xx, true)$
          (%i2) tellsimpafter (sin (ll), map (sin, ll));
          (%o2)                 [sinrule1, simp-%sin]
          (%i3) sin ([1/6, 1/4, 1/3, 1/2, 1]*%pi);
                              1  sqrt(2)  sqrt(3)
          (%o3)              [-, -------, -------, 1, 0]
                              2     2        2
          (%i4) tellsimpafter (ll^mm, map ("^", ll, mm));
          (%o4)                  [^rule1, simpexpt]
          (%i5) [a, b, c]^[1, 2, 3];
                                          2   3
          (%o5)                      [a, b , c ]
          (%i6) tellsimpafter (foo (aa (xx)), aa (foo (xx)));
          (%o6)                   [foorule1, false]
          (%i7) foo (bar (u - v));
          (%o7)                    bar(foo(u - v))

     Las reglas se aplican en el orden en que se definen. Si dos reglas
     coinciden con una expresión, se aplica aquélla que haya sido
     definida en primer lugar.

          (%i1) matchdeclare (aa, integerp);
          (%o1)                         done
          (%i2) tellsimpafter (foo (aa), bar_1 (aa));
          (%o2)                   [foorule1, false]
          (%i3) tellsimpafter (foo (aa), bar_2 (aa));
          (%o3)              [foorule2, foorule1, false]
          (%i4) foo (42);
          (%o4)                       bar_1(42)

     Las variables de patrón se tratan como variables locales en las
     reglas de simplificación.  (Compárese con `defmatch', que trata
     las variables de patrón como globales.)

          (%i1) matchdeclare (aa, integerp, bb, atom);
          (%o1)                         done
          (%i2) tellsimpafter (foo(aa, bb), bar('aa=aa, 'bb=bb));
          (%o2)                   [foorule1, false]
          (%i3) bb: 12345;
          (%o3)                         12345
          (%i4) foo (42, %e);
          (%o4)                 bar(aa = 42, bb = %e)
          (%i5) bb;
          (%o5)                         12345

     Como cualquier otro átomo, las propiedades de las variables de
     patrón son globales, incluso cuando sus valores sean locales. En
     este ejemplo se declara una propiedad de asignación a treavés de
     `define_variable'. Esta es una propiedad del átomo  `bb' en todo
     Maxima.

          (%i1) matchdeclare (aa, integerp, bb, atom);
          (%o1)                         done
          (%i2) tellsimpafter (foo(aa, bb), bar('aa=aa, 'bb=bb));
          (%o2)                   [foorule1, false]
          (%i3) foo (42, %e);
          (%o3)                 bar(aa = 42, bb = %e)
          (%i4) define_variable (bb, true, boolean);
          (%o4)                         true
          (%i5) foo (42, %e);
          Error: bb was declared mode boolean, has value: %e
           -- an error.  Quitting.  To debug this try debugmode(true);

     Las reglas se nombran después de los operadores principales. Los
     nombres de reglas tanto para las funciones de Maxima como para las
     definidas por el usuario son cadenas alfanuméricas, mientras que
     los nombres de las otras funciones son identificadores típicos.

          (%i1) tellsimpafter (foo (%pi + %e), 3*%pi);
          (%o1)                   [foorule1, false]
          (%i2) tellsimpafter (foo (%pi * %e), 17*%e);
          (%o2)              [foorule2, foorule1, false]
          (%i3) tellsimpafter (foo (%i ^ %e), -42*%i);
          (%o3)         [foorule3, foorule2, foorule1, false]
          (%i4) tellsimpafter (foo (9) + foo (13), quux (22));
          (%o4)                   [+rule1, simplus]
          (%i5) tellsimpafter (foo (9) * foo (13), blurf (22));
          (%o5)                  [*rule1, simptimes]
          (%i6) tellsimpafter (foo (9) ^ foo (13), mumble (22));
          (%o6)                  [^rule1, simpexpt]
          (%i7) rules;
          (%o7) [trigrule0, trigrule1, trigrule2, trigrule3, trigrule4,
          htrigrule1, htrigrule2, htrigrule3, htrigrule4, foorule1,
          foorule2, foorule3, +rule1, *rule1, ^rule1]
          (%i8) foorule_name: first (%o1);
          (%o8)                       foorule1
          (%i9) plusrule_name: first (%o4);
          (%o9)                        +rule1
          (%i10) [?mstringp (foorule_name), symbolp (foorule_name)];
          (%o10)                    [false, true]
          (%i11) [?mstringp (plusrule_name), symbolp (plusrule_name)];
          (%o11)                    [true, true]
          (%i12) remrule (foo, foorule1);
          (%o12)                         foo
          (%i13) remrule ("^", "^rule1");
          (%o13)                          ^

     Un ejemplo de producto anticonmutativo.

          (%i1) gt (i, j) := integerp(j) and i < j;
          (%o1)           gt(i, j) := integerp(j) and i < j
          (%i2) matchdeclare (i, integerp, j, gt(i));
          (%o2)                         done
          (%i3) tellsimpafter (s[i]^^2, 1);
          (%o3)                 [^^rule1, simpncexpt]
          (%i4) tellsimpafter (s[i] . s[j], -s[j] . s[i]);
          (%o4)                   [.rule1, simpnct]
          (%i5) s[1] . (s[1] + s[2]);
          (%o5)                    s  . (s  + s )
                                    1     2    1
          (%i6) expand (%);
          (%o6)                      1 - s  . s
                                          2    1
          (%i7) factor (expand (sum (s[i], i, 0, 9)^^5));
          (%o7) 100 (s  + s  + s  + s  + s  + s  + s  + s  + s  + s )
                      9    8    7    6    5    4    3    2    1    0


 -- Función: clear_rules ()
     Ejecuta `kill (rules)' y después inicializa el siguiente número de
     regla a 1 para la adición `+', multiplicación `*' y exponenciación
     `^'.



File: maxima.info,  Node: Conjuntos,  Next: Definición de Funciones,  Prev: Reglas y patrones,  Up: Top

35 Conjuntos
************

* Menu:

* Introducción a los conjuntos::
* Funciones y variables para los conjuntos::


File: maxima.info,  Node: Introducción a los conjuntos,  Next: Funciones y variables para los conjuntos,  Prev: Conjuntos,  Up: Conjuntos

35.1 Introducción a los conjuntos
=================================

Maxima dispone de funciones para realizar operaciones con conjuntos,
como la intersección o la unión. Los conjuntos deben ser finitos y
definidos por enumeración. Maxima trata a los conjuntos y a las listas
como objectos de distinta naturaleza, lo que permite trabajar con
conjuntos cuyos elementos puedan ser también conjuntos o listas.

Además de funciones para operar con conjuntos finitos, Maxima dispone
también de algunas funciones sobre combinatoria, como los números de
Stirling de primera y segunda especie, números de Bell, coeficientes
multinomiales, particiones de enteros no negativos y algunos otros.
Maxima también define la función delta de Kronecker.

35.1.1 Utilización
------------------

Para construir un conjunto cuyos elementos sean `a_1, ..., a_n', se
utiliza la instrucción  `set(a_1, ..., a_n)' o `{a_1, ..., a_n}'; para
formar un conjunto vacío, basta con hacer `set()' o `{}'. Para
introducir conjuntos en Maxima, `set (...)' y `{ ... }' son
equivalentes. Los conjuntos se muestran siempre con llave.

Si un elemento se indica más de una vez, el proceso de simplificación
elimina los elementos redundantes.

     (%i1) set();
     (%o1)                          {}
     (%i2) set(a, b, a);
     (%o2)                        {a, b}
     (%i3) set(a, set(b));
     (%o3)                       {a, {b}}
     (%i4) set(a, [b]);
     (%o4)                       {a, [b]}
     (%i5) {};
     (%o5)                          {}
     (%i6) {a, b, a};
     (%o6)                        {a, b}
     (%i7) {a, {b}};
     (%o7)                       {a, {b}}
     (%i8) {a, [b]};
     (%o8)                       {a, [b]}

Dos elementos candidatos a formar parte de un conjunto, <x> e <y>, son
redundantes, esto es, se consideran el mismo elemento a efectos de
consruir el conjunto, si y sólo si `is (<x> = <y>)' devuelve el valor
`true'. Nótese que `is (equal (<x>, <y>))' puede devolver `true' y `is
(<x> = <y>)' retornar `false'; en cuyo caso los elementos <x> e <y> se
considerarían distintos.

     (%i1) x: a/c + b/c;
                                   b   a
     (%o1)                         - + -
                                   c   c
     (%i2) y: a/c + b/c;
                                   b   a
     (%o2)                         - + -
                                   c   c
     (%i3) z: (a + b)/c;
                                   b + a
     (%o3)                         -----
                                     c
     (%i4) is (x = y);
     (%o4)                         true
     (%i5) is (y = z);
     (%o5)                         false
     (%i6) is (equal (y, z));
     (%o6)                         true
     (%i7) y - z;
                                b + a   b   a
     (%o7)                    - ----- + - + -
                                  c     c   c
     (%i8) ratsimp (%);
     (%o8)                           0
     (%i9) {x, y, z};
                               b + a  b   a
     (%o9)                    {-----, - + -}
                                 c    c   c

Para formar un conjunto a partir de los miembros de una lista úsese
`setify'.

     (%i1) setify([b, a]);
     (%o1)                        {a, b}

Los elementos `x' e `y' de un conjunto se consideran iguales si `is(x =
y)' devuelve el valor `true'. Así, `rat(x)' y `x' se consideran el
mismo elemento de un conjunto; consecuentemente,

     (%i1) {x, rat(x)};
     (%o1)                          {x}

Además, puesto que  `is((x-1)*(x+1) = x^2 - 1)' devuelve `false',
`(x-1)*(x+1)' y `x^2-1' se consideran elementos diferentes; así

     (%i1) {(x - 1)*(x + 1), x^2 - 1};
                                            2
     (%o1)               {(x - 1) (x + 1), x  - 1}

Para reducir este conjunto a otro unitario, aplicar `rat' a cada
elemento del conjunto:

     (%i1) {(x - 1)*(x + 1), x^2 - 1};
                                            2
     (%o1)               {(x - 1) (x + 1), x  - 1}
     (%i2) map (rat, %);
                                   2
     (%o2)/R/                    {x  - 1}

Para eliminar redundancias con otros conjuntos, será necesario utilizar
otras funciones de simplificación. He aquí un ejemplo que utiliza
`trigsimp':

     (%i1) {1, cos(x)^2 + sin(x)^2};
                                 2         2
     (%o1)                {1, sin (x) + cos (x)}
     (%i2) map (trigsimp, %);
     (%o2)                          {1}

Se entiende que un conjunto está simplificado cuando entre sus
elementos no hay redundancias y se hayan ordenados. La versión actual
de las funciones para conjuntos utiliza la función `orderlessp' de
Maxima para ordenar sus elementos; sin embargo, futuras versiones de
las funciones para operar con conjuntos podrán utilizar otras funciones
de ordenación.

Algunas operaciones con conjuntos, tales como la sustitución, fuerzan
automáticamente una re-simplificación; por ejemplo,

     (%i1) s: {a, b, c}$
     (%i2) subst (c=a, s);
     (%o2)                        {a, b}
     (%i3) subst ([a=x, b=x, c=x], s);
     (%o3)                          {x}
     (%i4) map (lambda ([x], x^2), set (-1, 0, 1));
     (%o4)                        {0, 1}

Maxima considera a las listas y conjuntos como objetos diferentes;
funciones tales como `union' y `intersection' emitirán un error si
alguno de sus argumentos no es un conjunto. Si se necesita aplicar una
función de conjunto a una lista, se deberá utilizar la función `setify'
para convertirla previamente en conjunto.  Así,

     (%i1) union ([1, 2], {a, b});
     Function union expects a set, instead found [1,2]
      -- an error.  Quitting.  To debug this try debugmode(true);
     (%i2) union (setify ([1, 2]), {a, b});
     (%o2)                     {1, 2, a, b}

Para extraer todos los elementos de un conjunto `s' que satisfagan un
predicado `f', úsese `subset(s,f)'. (Un predicado es una función
booleana.) Por ejemplo, para encontrar las ecuaciones en un conjunto
dado que no dependan de la variable `z', se hará

     (%i1) subset ({x + y + z, x - y + 4, x + y - 5},
                   lambda ([e], freeof (z, e)));
     (%o1)               {- y + x + 4, y + x - 5}

La sección `Funciones y variables para los conjuntos' incluye una lista
completa de funciones para operar con conjuntos en  Maxima.

35.1.2 Iteraciones con elementos
--------------------------------

Hay dos formas para operar iterativamente sobre los elementos de un
conjunto. Una es utilizar `map'; por ejemplo:

     (%i1) map (f, {a, b, c});
     (%o1)                  {f(a), f(b), f(c)}

La otra forma consiste en hacer uso de la construcción `for <x> in <s>
do'

     (%i1) s: {a, b, c};
     (%o1)                       {a, b, c}
     (%i2) for si in s do print (concat (si, 1));
     a1
     b1
     c1
     (%o2)                         done

Las funciones de Maxima  `first' y `rest' funcionan también con
conjuntos.  En este caso, `first' devuelve el primer elemento que se
muestra del conjunto, el cual puede depender de la implementación del
sistema. Si `s' es un conjunto, entonces `rest(s)' equivale a `disjoin
(first(s), s)'. Hay otras funciones que trabajan correctamente con
conjuntos. En próximas versiones de las funciones para operar con
conjuntos es posible que `first' y `rest' trabajen de modo diferente o
que ya no lo hagan en absoluto.

35.1.3 Fallos
-------------

Las funciones para operar con conjuntos utilizan la función `orderlessp'
de Maxima para ordenar los elementos de los conjuntos, así como la
función `like' de Lisp para decidir sobre la igualdad de dichos
elementos. Ambas funciones tienen fallos que son conocidos y que pueden
aflorar si se trabaja con conjuntos que tengan elementos en formato de
listas o matrices y que contengan expresiones racionales canónicas
(CRE).  Un ejemplo es

     (%i1) {[x], [rat (x)]};
     Maxima encountered a Lisp error:

       The value #:X1440 is not of type LIST.

     Automatically continuing.
     To reenable the Lisp debugger set *debugger-hook* to nil.

Esta expresión provoca una parada de Maxima junto con la emisión de un
mensaje de error, el cual dependerá de la versión de Lisp que utilice
Maxima. Otro ejemplo es

     (%i1) setify ([[rat(a)], [rat(b)]]);
     Maxima encountered a Lisp error:

       The value #:A1440 is not of type LIST.

     Automatically continuing.
     To reenable the Lisp debugger set *debugger-hook* to nil.

Estos fallos son causados por fallos en  `orderlessp' y `like', no por
fallos cuyo origen se encuentre en las funciones para conjuntos.  Para
ilustrarlo, se pueden ejecutar las siguientes expresiones

     (%i1) orderlessp ([rat(a)], [rat(b)]);
     Maxima encountered a Lisp error:

       The value #:B1441 is not of type LIST.

     Automatically continuing.
     To reenable the Lisp debugger set *debugger-hook* to nil.
     (%i2) is ([rat(a)] = [rat(a)]);
     (%o2)                         false

Hasta que estos errores no se corrijan, no es aconsejable construir
conjuntos que tengan por elementos listas o matrices que contengan
expresiones en forma CRE; sin embargo, un conjunto con elementos de la
forma CRE no deberían dar problemas:

     (%i1) {x, rat (x)};
     (%o1)                          {x}

La función `orderlessp' de Maxima tiene otro fallo que puede causar
problemas con las funciones para conjuntos, en concreto, que el
predicado de ordenación `orderlessp' no es transitivo. El ejemplo más
simple que ilustra este punto es

     (%i1) q: x^2$
     (%i2) r: (x + 1)^2$
     (%i3) s: x*(x + 2)$
     (%i4) orderlessp (q, r);
     (%o4)                         true
     (%i5) orderlessp (r, s);
     (%o5)                         true
     (%i6) orderlessp (q, s);
     (%o6)                         false

El fallo puede causar problemas con todas las funciones para conjuntos,
así como también con otras funciones de Maxima.  Es probable, pero no
seguro, que este fallo se puede evitar si todos los elementos del
conjunto están en la forma de expresión racional canónica (CRE) o han
sido simplificados con `ratsimp'.

Los mecanismos `orderless' y `ordergreat' de Maxima son incompatibles
con las funciones para conjuntos. Si se necesitan utilizar `orderless' o
`ordergreat', hágase antes de construir los conjuntos y no se utilice
la instrucción `unorder'.

Se ruega a todo usuario que crea haber encontrado un fallo en las
funciones para conjuntos que lo comunique en la base de datos de
Maxima. Véase `bug_report'.

35.1.4 Autores
--------------

Stavros Macrakis de Cambridge, Massachusetts y Barton Willis de la
University of Nebraska at Kearney (UNK).


File: maxima.info,  Node: Funciones y variables para los conjuntos,  Prev: Introducción a los conjuntos,  Up: Conjuntos

35.2 Funciones y variables para los conjuntos
=============================================

 -- Función: adjoin (<x>, <a>)
     Calcula la unión del conjunto <a> y `{<x>}'.

     La función `adjoin' emite un mensaje de error si <a> no es un
     conjunto literal.

     Las sentencias `adjoin(<x>, <a>)' y `union(set(<x>), <a>)' son
     equivalentes, aunque `adjoin' puede ser algo más rápida que
     `union'.

     Véase también `disjoin'.

     Ejemplos:

          (%i1) adjoin (c, {a, b});
          (%o1)                       {a, b, c}
          (%i2) adjoin (a, {a, b});
          (%o2)                        {a, b}


 -- Función: belln (<n>)
     Representa el n-ésimo número de Bell, de modo que `belln(n)' es el
     número de particiones de un conjunto de <n> elementos.

     El argumento <n> debe ser un entero no negativo.

     La función `belln' se distribuye sobre ecuaciones, listas,
     matrices y conjuntos.

     Ejemplos:

     `belln' se aplica a enteros no negativos,

          (%i1) makelist (belln (i), i, 0, 6);
          (%o1)               [1, 1, 2, 5, 15, 52, 203]
          (%i2) is (cardinality (set_partitions ({})) = belln (0));
          (%o2)                         true
          (%i3) is (cardinality (set_partitions ({1, 2, 3, 4, 5, 6}))
                                      = belln (6));
          (%o3)                         true

     Si <n> no es un entero no negativo, la función `belln(n)' no hace
     cálculo alguno.

          (%i1) [belln (x), belln (sqrt(3)), belln (-9)];
          (%o1)        [belln(x), belln(sqrt(3)), belln(- 9)]

 -- Función: cardinality (<a>)
     Devuelve el número de elementos del conjunto <a>.

     La función `cardinality' ignora los elementos redundantes, incluso
     cuando la simplificación está desabilitada.

     Ejemplos:

          (%i1) cardinality ({});
          (%o1)                           0
          (%i2) cardinality ({a, a, b, c});
          (%o2)                           3
          (%i3) simp : false;
          (%o3)                         false
          (%i4) cardinality ({a, a, b, c});
          (%o4)                           3

 -- Función: cartesian_product (<b_1>, ... , <b_n>)
     Devuelve un conjunto formado por listas de la forma `[<x_1>, ...,
     <x_n>]', siendo <x_1>, ..., <x_n> elementos de los conjuntos
     <b_1>, ... , <b_n>, respectivamente.

     La función `cartesian_product' emite un mensaje de error si alguno
     de sus argumentos no es un conjunto literal.

     Ejemplos:

          (%i1) cartesian_product ({0, 1});
          (%o1)                      {[0], [1]}
          (%i2) cartesian_product ({0, 1}, {0, 1});
          (%o2)           {[0, 0], [0, 1], [1, 0], [1, 1]}
          (%i3) cartesian_product ({x}, {y}, {z});
          (%o3)                      {[x, y, z]}
          (%i4) cartesian_product ({x}, {-1, 0, 1});
          (%o4)              {[x, - 1], [x, 0], [x, 1]}

 -- Función: disjoin (<x>, <a>)
     Devuelve el conjunto <a> sin el elemento <x>.  Si <x> no es
     elemento de <a>, entonces el resultado es el propio <a>.

     La función `disjoin' emite un mensaje de error si <a> no es un
     conjunto literal.

     Las sentencias `disjoin(<x>, <a>)', `delete(<x>, <a>)' y
     `setdifference(<a>, set(<x>))' son todas ellas equivalentes; pero
     en general, `disjoin' será más rápida que las otras.

     Ejemplos:

          (%i1) disjoin (a, {a, b, c, d});
          (%o1)                       {b, c, d}
          (%i2) disjoin (a + b, {5, z, a + b, %pi});
          (%o2)                      {5, %pi, z}
          (%i3) disjoin (a - b, {5, z, a + b, %pi});
          (%o3)                  {5, %pi, b + a, z}

 -- Función: disjointp (<a>, <b>)
     Devuelve `true' si y sólo si los conjuntos  <a> y <b> son
     disjuntos.

     La función `disjointp' emite un mensaje de error si <a> o <b> no
     son conjuntos literales.

     Ejemplos:

          (%i1) disjointp ({a, b, c}, {1, 2, 3});
          (%o1)                         true
          (%i2) disjointp ({a, b, 3}, {1, 2, 3});
          (%o2)                         false

 -- Función: divisors (<n>)
     Calcula el conjunto de divisores de <n>.

     La sentencia `divisors(<n>)' devuelve un conjunto de enteros si
     <n> es un entero no nulo.  El conjunto de divisores incluye los
     elementos 1 y <n>.  Los divisores de un entero negativo son los
     divisores de su valor absoluto.

     La función `divisors' se distribuye sobre las ecuaciones, listas,
     matrices y conjuntos.

     Ejemplos:

     Se puede comprobar que 28 es un número perfecto: la suma de sus
     divisores (excepto él mismo) es 28.

          (%i1) s: divisors(28);
          (%o1)                 {1, 2, 4, 7, 14, 28}
          (%i2) lreduce ("+", args(s)) - 28;
          (%o2)                          28

     La función `divisors' es simplificadora.  Haciendo la sustitución
     de `a' por 8 en `divisors(a)' devuelve los divisores sin tener que
     reevaluar `divisors(8)',

          (%i1) divisors (a);
          (%o1)                      divisors(a)
          (%i2) subst (8, a, %);
          (%o2)                     {1, 2, 4, 8}

     La función `divisors' se distribuye sobre ecuaciones, listas,
     matrices y conjuntos.

          (%i1) divisors (a = b);
          (%o1)               divisors(a) = divisors(b)
          (%i2) divisors ([a, b, c]);
          (%o2)        [divisors(a), divisors(b), divisors(c)]
          (%i3) divisors (matrix ([a, b], [c, d]));
                            [ divisors(a)  divisors(b) ]
          (%o3)             [                          ]
                            [ divisors(c)  divisors(d) ]
          (%i4) divisors ({a, b, c});
          (%o4)        {divisors(a), divisors(b), divisors(c)}

 -- Función: elementp (<x>, <a>)
     Devuelve `true' si y sólo si <x> es miembro del conjunto <a>.

     La función `elementp' emite un mensaje de error si <a> no es un
     conjunto literal.

     Ejemplos:

          (%i1) elementp (sin(1), {sin(1), sin(2), sin(3)});
          (%o1)                         true
          (%i2) elementp (sin(1), {cos(1), cos(2), cos(3)});
          (%o2)                         false

 -- Función: emptyp (<a>)
     Devuelve `true' si y sólo si <a> es el conjunto vacío o la lista
     vacía.

     Ejemplos:

          (%i1) map (emptyp, [{}, []]);
          (%o1)                     [true, true]
          (%i2) map (emptyp, [a + b, {{}}, %pi]);
          (%o2)                 [false, false, false]

 -- Función: equiv_classes (<s>, <F>)
     Devuelve el conjunto de las clases de equivalencia del conjunto <s>
     respecto de la relación de equivalencia <F>.

     El argumento <F> es una función de dos variables definida sobre el
     producto cartesiano <s> por <s>.  El valor devuelto por <F> debe
     ser `true' o `false', o bien una expresión <expr> tal que
     `is(<expr>)' tome el valor `true' o `false'.

     Si <F> no es una relación de equivalencia, `equiv_classes' la
     acepta sin emitir ningún mensaje de error, pero el resultado será
     incorrecto en general.

     Ejemplos:

     La relación de equivalencia es una expresión lambda que devuelve
     `true' o `false',

          (%i1) equiv_classes ({1, 1.0, 2, 2.0, 3, 3.0},
                                lambda ([x, y], is (equal (x, y))));
          (%o1)            {{1, 1.0}, {2, 2.0}, {3, 3.0}}

     La relación de equivalencia es el nombre de una función relacional
     en la que `is' evalúa a `true' o `false',

          (%i1) equiv_classes ({1, 1.0, 2, 2.0, 3, 3.0}, equal);
          (%o1)            {{1, 1.0}, {2, 2.0}, {3, 3.0}}

     Las clases de equivalencia son números que difieren en un múltiplo
     de 3.

          (%i1) equiv_classes ({1, 2, 3, 4, 5, 6, 7},
                        lambda ([x, y], remainder (x - y, 3) = 0));
          (%o1)              {{1, 4, 7}, {2, 5}, {3, 6}}

 -- Función: every (<f>, <s>)
 -- Función: every (<f>, <L_1>, ..., <L_n>)
     Devuelve `true' si el predicado <f> vale `true' para todos los
     argumentos dados.

     Dado un conjunto como segundo argumento, `every(<f>, <s>)'
     devuelve `true' si `is(<f>(<a_i>))' devuelve `true' para todos los
     <a_i> pertenecientes <s>.  La función `every' puede evaluar o no
     <f> para todos los <a_i> pertenecientes <s>.  Puesto que los
     conjuntos no están ordenados, `every' puede evaluar `<f>(<a_i>)'
     en cualquier orden.

     Dada una o más listas como argumentos, `every(<f>, <L_1>, ...,
     <L_n>)' devuelve `true' si `is(<f>(<x_1>, ..., <x_n>))' devuelve
     `true' para todo <x_1>, ..., <x_n> en <L_1>, ..., <L_n>,
     respectivamente.  La función `every' puede evaluar o no <f> para
     cualquier combinación de <x_1>, ..., <x_n>; además, `every' evalúa
     las listas en el orden creciente del índice.

     Dado un conjunto vacío `{}' o lista vacía `[]' como argumentos,
     `every' devuelve `false'.

     Si la variable global `maperror' vale `true', todas las listas
     <L_1>, ..., <L_n> deben ser de igual longitud.  Si `maperror' vale
     `false', los argumentos en forma de listas se truncan para igualar
     sus longitudes a la de la lista más corta.

     Los valores que devuelve el predicado <f> cuando toman (mediante
     `is') un valor diferente a `true' y `false' se controlan con la
     variable global `prederror'.  Si `prederror' vale `true', tales
     valores se consideran como `false' y la respuesta de `every' es
     `false'.  Si `prederror' vale `false', tales valores se consideran
     como desconocidos (`unknown') y la respuesta de `every' es
     `unknown'.

     Ejemplos:

     Se aplica `every' a un único conjunto.  El predicado es una
     función de un argumento.

          (%i1) every (integerp, {1, 2, 3, 4, 5, 6});
          (%o1)                         true
          (%i2) every (atom, {1, 2, sin(3), 4, 5 + y, 6});
          (%o2)                         false

     Se aplica `every' a dos listas.  El predicado es una función de
     dos argumentos.

          (%i1) every ("=", [a, b, c], [a, b, c]);
          (%o1)                         true
          (%i2) every ("#", [a, b, c], [a, b, c]);
          (%o2)                         false

     Las respuestas del predicado <f> que se evalúan a cualquier cosa
     diferente de `true' y `false' están controlados por la variable
     global `prederror'.

          (%i1) prederror : false;
          (%o1)                         false
          (%i2) map (lambda ([a, b], is (a < b)), [x, y, z],
                             [x^2, y^2, z^2]);
          (%o2)              [unknown, unknown, unknown]
          (%i3) every ("<", [x, y, z], [x^2, y^2, z^2]);
          (%o3)                        unknown
          (%i4) prederror : true;
          (%o4)                         true
          (%i5) every ("<", [x, y, z], [x^2, y^2, z^2]);
          (%o5)                         false

 -- Función: extremal_subset (<s>, <f>, max)
 -- Función: extremal_subset (<s>, <f>, min)
     Calcula el subconjunto de <s> para el cual la función <f> toma sus
     valores mayor y menor.

     La sentencia `extremal_subset(<s>, <f>, max)' devuelve el
     subconjunto del conjunto o lista <s> para el cual la función real
     <f> toma su valor máximo.

     La sentencia `extremal_subset(<s>, <f>, min)' devuelve el
     subconjunto del conjunto o lista <s> para el cual la función real
     <f> toma su valor mínimo.

     Ejemplos

          (%i1) extremal_subset ({-2, -1, 0, 1, 2}, abs, max);
          (%o1)                       {- 2, 2}
          (%i2) extremal_subset ({sqrt(2), 1.57, %pi/2}, sin, min);
          (%o2)                       {sqrt(2)}

 -- Función: flatten (<expr>)
     Recoge los argumentos de subexpresiones con el mismo operador que
     <expr> y construye con ellas otra expresión a partir de estos
     argumentos.

     Aquellas subexpresiones en las que el operador es diferente del
     operador principal de `expr' se copian sin modificarse, incluso
     cuando ellas mismas contengan subexpresiones en las que el
     operador sea el mismo que el de `expr'.

     Es posible que `flatten' construya expresiones en las que el número
     de argumentos difiera del número admitido por el operador, lo cual
     hará que se emita un mensaje de error. La función `flatten' no
     intentará detectar estas situaciones.

     Las expresiones que tengan representaciones especiales, por
     ejemplo las racionales canónicas (CRE), no admiten que se aplique
     sobre ellas la función `flatten'; en tales casos se devuelve el
     argumento sin modificación.

     Ejemplos:

     Aplicada a una lista, `flatten' reune todos los elementos que son
     a su vez listas.

          (%i1) flatten ([a, b, [c, [d, e], f], [[g, h]], i, j]);
          (%o1)            [a, b, c, d, e, f, g, h, i, j]

     Aplicado a un conjunto, `flatten' reune todos los elementos que
     son a su vez conjuntos.

          (%i1) flatten ({a, {b}, {{c}}});
          (%o1)                       {a, b, c}
          (%i2) flatten ({a, {[a], {a}}});
          (%o2)                       {a, [a]}

     La función `flatten' es similar a la declaración del operador
     principal como n-ario. Sin embargo, `flatten' no tiene efecto
     alguno sobre subexpresiones que tengan un operador diferente del
     principal, mientras que sí lo tiene una declaración n-aria.

          (%i1) expr: flatten (f (g (f (f (x)))));
          (%o1)                     f(g(f(f(x))))
          (%i2) declare (f, nary);
          (%o2)                         done
          (%i3) ev (expr);
          (%o3)                      f(g(f(x)))

     La función `flatten' trata las funciones subindicadas como a
     cualquier otro operador.

          (%i1) flatten (f[5] (f[5] (x, y), z));
          (%o1)                      f (x, y, z)
                                      5

     Es posible que `flatten' construya expresiones en las que el número
     de argumentos difiera del número admitido por el operador.

          (%i1) 'mod (5, 'mod (7, 4));
          (%o1)                   mod(5, mod(7, 4))
          (%i2) flatten (%);
          (%o2)                     mod(5, 7, 4)
          (%i3) ''%, nouns;
          Wrong number of arguments to mod
           -- an error.  Quitting.  To debug this try debugmode(true);

 -- Función: full_listify (<a>)
     Sustituye los operadores de conjunto presentes en <a> por
     operadores de listas, devolviendo el resultado.  La función
     `full_listify' sustituye operadores de conjuntos en subexpresiones
     anidadas, incluso cuando el operador principal no es `set'.

     La función `listify' sustituye únicamente el operador principal.

     Ejemplos:

          (%i1) full_listify ({a, b, {c, {d, e, f}, g}});
          (%o1)               [a, b, [c, [d, e, f], g]]
          (%i2) full_listify (F (G ({a, b, H({c, d, e})})));
          (%o2)              F(G([a, b, H([c, d, e])]))

 -- Función: fullsetify (<a>)
     Si <a> es una lista, sustituye el operador de lista por el de
     conjunto, aplicando posteriormente `fullsetify' a todos los
     elementos que son a su vez conjuntos.  Si <a> no es una lista, se
     devuelve sin cambio alguno.

     La función `setify' sustituye solamente el operador principal.

     Ejemplos:

     En la salida `(%o2)' el argumento de `f' no se convierte en
     conjunto porque el operador principal de `f([b])' no es una lista.

          (%i1) fullsetify ([a, [a]]);
          (%o1)                       {a, {a}}
          (%i2) fullsetify ([a, f([b])]);
          (%o2)                      {a, f([b])}

 -- Función: identity (<x>)
     La función `identity' devuelve su argumento cualquiera que sea
     éste.

     Ejemplos:

     La función `identity' puede utilizarse como predicado cuando los
     argumentos ya son valores booleanos.

          (%i1) every (identity, [true, true]);
          (%o1)                         true

 -- Función: integer_partitions (<n>)
 -- Función: integer_partitions (<n>, <len>)
     Devuelve particiones enteras de <n>, esto es, listas de enteros
     cuyas sumas son <n>.

     La sentencia `integer_partitions(<n>)' devuelve el conjunto de
     todas las particiones del entero <n>.  Cada partición es una lista
     ordenada de mayor a menor.

     La sentencia `integer_partitions(<n>, <len>)' devuelve todas las
     particiones de longitud <len> o menor; en este caso, se añaden
     ceros a cada partición con menos de <len> términos para que todas
     ellas sean de longitud <len>. Las particiones son listas ordenadas
     de mayor a menor.

     Una lista [a_1, ..., a_m] es una partición de un entero no
     negativo n si (1) cada a_i es entero no nulo y (2) a_1 + ... + a_m
     = n. Así, 0 no tiene particiones.

     Ejemplos:

          (%i1) integer_partitions (3);
          (%o1)               {[1, 1, 1], [2, 1], [3]}
          (%i2) s: integer_partitions (25)$
          (%i3) cardinality (s);
          (%o3)                         1958
          (%i4) map (lambda ([x], apply ("+", x)), s);
          (%o4)                         {25}
          (%i5) integer_partitions (5, 3);
          (%o5) {[2, 2, 1], [3, 1, 1], [3, 2, 0], [4, 1, 0], [5, 0, 0]}
          (%i6) integer_partitions (5, 2);
          (%o6)               {[3, 2], [4, 1], [5, 0]}

     Para encontrar todas las particiones que satisfagan cierta
     condición, utilícese la función `subset'; he aquí un ejemplo que
     encuentra todas las particiones de 10 formadas por números primos.

          (%i1) s: integer_partitions (10)$
          (%i2) cardinality (s);
          (%o2)                          42
          (%i3) xprimep(x) := integerp(x) and (x > 1) and primep(x)$
          (%i4) subset (s, lambda ([x], every (xprimep, x)));
          (%o4) {[2, 2, 2, 2, 2], [3, 3, 2, 2], [5, 3, 2], [5, 5], [7, 3]}

 -- Función: intersect (<a_1>, ..., <a_n>)
     Es una forma abreviada de la función `intersection'.

 -- Función: intersection (<a_1>, ..., <a_n>)
     Devuelve el conjunto de todos los elementos que son comunes a los
     conjuntos  <a_1> a <a_n>.

     Emite un mensaje de error en caso de que cualquiera de los <a_i>
     no sea un conjunto.

     Ejemplos:

          (%i1) S_1 : {a, b, c, d};
          (%o1)                     {a, b, c, d}
          (%i2) S_2 : {d, e, f, g};
          (%o2)                     {d, e, f, g}
          (%i3) S_3 : {c, d, e, f};
          (%o3)                     {c, d, e, f}
          (%i4) S_4 : {u, v, w};
          (%o4)                       {u, v, w}
          (%i5) intersection (S_1, S_2);
          (%o5)                          {d}
          (%i6) intersection (S_2, S_3);
          (%o6)                       {d, e, f}
          (%i7) intersection (S_1, S_2, S_3);
          (%o7)                          {d}
          (%i8) intersection (S_1, S_2, S_3, S_4);
          (%o8)                          {}

 -- Función: kron_delta (<x1>, <y1>, ..., <xp>, <yp>)
     Es la función delta de Kronecker.

     La función `kron_delta' devuelve 1 cuando <xi> y <yi> son iguales
     para todos los pares, devolviendo 0 si existe un par en el que
     <xi> y <yi> no sean iguales. La igualdad se determina utilizando
     `is(equal(xi,xj))' y la desigualdad con `is(notequal(xi,xj))'. En
     caso de un solo argumento, `kron_delta' devuelve un mensaje de
     error.

     Ejemplos:

          (%i1) kron_delta(a,a);
          (%o1)                                  1
          (%i2) kron_delta(a,b,a,b);
          (%o2)                          kron_delta(a, b)
          (%i3) kron_delta(a,a,b,a+1);
          (%o3)                                  0
          (%i4) assume(equal(x,y));
          (%o4)                            [equal(x, y)]
          (%i5) kron_delta(x,y);
          (%o5)                                  1

 -- Función: listify (<a>)
     Si <a> es un conjunto, devuelve una lista con los elementos de <a>;
     si  <a> no es un conjunto, devuelve <a>.

     La función `full_listify' sustituye todos los operadores de
     conjunto en <a> por operadores de lista.

     Ejemplos:

          (%i1) listify ({a, b, c, d});
          (%o1)                     [a, b, c, d]
          (%i2) listify (F ({a, b, c, d}));
          (%o2)                    F({a, b, c, d})

 -- Función: lreduce (<f>, <s>)
 -- Función: lreduce (<f>, <s>, <init>)
     Amplía la función binaria <F> a n-aria mediante composición,
     siendo <s> una lista.

     La sentencia  `lreduce(<F>, <s>)' devuelve `F(... F(F(s_1, s_2),
     s_3), ... s_n)'.  Si se incluye el argumento opcional <s_0>, el
     resultado equivale a `lreduce(<F>, cons(<s_0>, <s>))'.

     La función <F> se aplica primero a los elementos del extremo
     izquierdo de la lista, de ahí el nombre `lreduce', (left reduce).

     Véanse también `rreduce', `xreduce' y `tree_reduce'.

     Ejemplos:

     La función `lreduce' sin el argumento opcional,

          (%i1) lreduce (f, [1, 2, 3]);
          (%o1)                     f(f(1, 2), 3)
          (%i2) lreduce (f, [1, 2, 3, 4]);
          (%o2)                  f(f(f(1, 2), 3), 4)

     La función `lreduce' con el argumento opcional,

          (%i1) lreduce (f, [1, 2, 3], 4);
          (%o1)                  f(f(f(4, 1), 2), 3)

     La función `lreduce' aplicada a operadores binarios de Maxima.  El
     símbolo `/' es el operador división.

          (%i1) lreduce ("^", args ({a, b, c, d}));
                                         b c d
          (%o1)                       ((a ) )
          (%i2) lreduce ("/", args ({a, b, c, d}));
                                          a
          (%o2)                         -----
                                        b c d


 -- Función: makeset (<expr>, <x>, <s>)
     Genera un conjunto cuyos miembros se generan a partir de la
     expresión <expr>, siendo <x> una lista de variables de <expr> y
     <s> un conjunto o lista de listas.  Para generar los elementos del
     conjunto, se evalúa <expr> asignando a las variables de <x> los
     elementos de <s> en paralelo.

     Los elementos de <s> deben tener la misma longitud que <x>.  La
     lista de variables <x> debe ser una lista de símbolos sin
     subíndices. Cuando se trate de un único símbolo, <x> debe
     expresarse como una lista de un elemento y cada elemento de <s>
     debe ser una lista de un sólo elemento.

     Véase también `makelist'.

     Ejemplos:

          (%i1) makeset (i/j, [i, j], [[1, a], [2, b], [3, c], [4, d]]);
                                     1  2  3  4
          (%o1)                     {-, -, -, -}
                                     a  b  c  d
          (%i2) S : {x, y, z}$
          (%i3) S3 : cartesian_product (S, S, S);
          (%o3) {[x, x, x], [x, x, y], [x, x, z], [x, y, x], [x, y, y],
          [x, y, z], [x, z, x], [x, z, y], [x, z, z], [y, x, x],
          [y, x, y], [y, x, z], [y, y, x], [y, y, y], [y, y, z],
          [y, z, x], [y, z, y], [y, z, z], [z, x, x], [z, x, y],
          [z, x, z], [z, y, x], [z, y, y], [z, y, z], [z, z, x],
          [z, z, y], [z, z, z]}
          (%i4) makeset (i + j + k, [i, j, k], S3);
          (%o4) {3 x, 3 y, y + 2 x, 2 y + x, 3 z, z + 2 x, z + y + x,
                                                 z + 2 y, 2 z + x, 2 z + y}
          (%i5) makeset (sin(x), [x], {[1], [2], [3]});
          (%o5)               {sin(1), sin(2), sin(3)}

 -- Función: moebius (<n>)
     Representa la función de Moebius.

     Si <n> es el producto de k números primos diferentes,
     `moebius(<n>)' devuelve (-1)^k, retornando 1 si <n> = 1 y 0 para
     cualesquiera otros enteros positivos.

     La función de Moebius se distribuye respecto de ecuaciones,
     listas, matrices y conjuntos.

     Ejemplos:

          (%i1) moebius (1);
          (%o1)                           1
          (%i2) moebius (2 * 3 * 5);
          (%o2)                          - 1
          (%i3) moebius (11 * 17 * 29 * 31);
          (%o3)                           1
          (%i4) moebius (2^32);
          (%o4)                           0
          (%i5) moebius (n);
          (%o5)                      moebius(n)
          (%i6) moebius (n = 12);
          (%o6)                    moebius(n) = 0
          (%i7) moebius ([11, 11 * 13, 11 * 13 * 15]);
          (%o7)                      [- 1, 1, 1]
          (%i8) moebius (matrix ([11, 12], [13, 14]));
                                     [ - 1  0 ]
          (%o8)                      [        ]
                                     [ - 1  1 ]
          (%i9) moebius ({21, 22, 23, 24});
          (%o9)                      {- 1, 0, 1}

 -- Función: multinomial_coeff (<a_1>, ..., <a_n>)
 -- Función: multinomial_coeff ()
     Calcula el coeficiente multinomial.

     Si todos los <a_k> son enteros no negativos, el coeficiente
     multinomial es el número de formas de colocar  `<a_1> + ... +
     <a_n>' objetos diferentes en  n cajas con <a_k> elementos en la
     k-ésima caja. En general, `multinomial_coeff (<a_1>, ..., <a_n>)'
     calcula `(<a_1> + ... + <a_n>)!/(<a_1>! ... <a_n>!)'.

     Si no se dan argumentos, `multinomial_coeff()' devuelve 1.

     Se puede usar `minfactorial' para simplificar el valor devuelto
     por `multinomial_coeff'.

     Ejemplos:

          (%i1) multinomial_coeff (1, 2, x);
                                      (x + 3)!
          (%o1)                       --------
                                        2 x!
          (%i2) minfactorial (%);
                               (x + 1) (x + 2) (x + 3)
          (%o2)                -----------------------
                                          2
          (%i3) multinomial_coeff (-6, 2);
                                       (- 4)!
          (%o3)                       --------
                                      2 (- 6)!
          (%i4) minfactorial (%);
          (%o4)                          10

 -- Función: num_distinct_partitions (<n>)
 -- Función: num_distinct_partitions (<n>, <list>)
     Si <n> es un entero no negativo, devuelve el número de particiones
     enteras distintas de <n>, en caso contrario
     `num_distinct_partitions' devuelve una forma nominal.

     La sentencia `num_distinct_partitions(<n>, list)' devuelve una
     lista con el número de particiones distintas de 1, 2, 3, ..., <n>.

     Una partición distinta de <n> es una lista de números enteros
     positivos distintos k_1, ..., k_m tales que <n> = k_1 + ... + k_m.

     Ejemplos:

          (%i1) num_distinct_partitions (12);
          (%o1)                          15
          (%i2) num_distinct_partitions (12, list);
          (%o2)      [1, 1, 1, 2, 2, 3, 4, 5, 6, 8, 10, 12, 15]
          (%i3) num_distinct_partitions (n);
          (%o3)              num_distinct_partitions(n)

 -- Función: num_partitions (<n>)
 -- Función: num_partitions (<n>, <list>)
     Si <n> es un entero no negativo, devuelve el número de particiones
     enteras de <n>, en caso contrario `num_partitions' devuelve una
     expresión nominal.

     La sentencia `num_partitions(<n>, list)' devuelve una lista con
     los números de particiones enteras de 1, 2, 3, ..., <n>.

     Siendo <n> un entero no negativo, `num_partitions(<n>)' es igual a
     `cardinality(integer_partitions(<n>))'; sin embargo,
     `num_partitions' no construye el conjunto de particiones, por lo
     que es más rápido.

     Ejemplos:

          (%i1) num_partitions (5) = cardinality (integer_partitions (5));
          (%o1)                         7 = 7
          (%i2) num_partitions (8, list);
          (%o2)            [1, 1, 2, 3, 5, 7, 11, 15, 22]
          (%i3) num_partitions (n);
          (%o3)                   num_partitions(n)

 -- Función: partition_set (<a>, <f>)
     Particiona el conjunto <a> respecto del predicado <f>.

     La función `partition_set' devuelve una lista con dos conjuntos;
     el primer conjunto es el subconjunto de <a> para el cual el
     predicado <f> devuelve `false' y el segundo contiene al resto de
     elementos de <a>.

     La función `partition_set' no aplica `is' al valor devuelto por
     <f>.

     La función `partition_set' emite un mensaje de error si <a> no es
     un conjunto literal.

     Véase también `subset'.

     Ejemplos:

          (%i1) partition_set ({2, 7, 1, 8, 2, 8}, evenp);
          (%o1)                   [{1, 7}, {2, 8}]
          (%i2) partition_set ({x, rat(y), rat(y) + z, 1},
                            lambda ([x], ratp(x)));
          (%o2)/R/              [{1, x}, {y, y + z}]

 -- Función: permutations (<a>)
     Devuelve un conjunto con todas las permutaciones distintas de los
     miembros de la lista o conjunto  <a>. Cada permutación es una
     lista, no un conjunto.

     Si <a> es una lista, sus miembros duplicados no son eliminados
     antes de buscar sus permutaciones.

     Si <a> no es una lista o conjunto, `permutations' emite un mensaje
     de error.

     Véase también `random_permutation'.

     Ejemplos:

          (%i1) permutations ([a, a]);
          (%o1)                       {[a, a]}
          (%i2) permutations ([a, a, b]);
          (%o2)           {[a, a, b], [a, b, a], [b, a, a]}

 -- Función: powerset (<a>)
 -- Función: powerset (<a>, <n>)
     Devuelve el conjunto de todos los subconjuntos del conjunto <a> o
     un sunconjunto de ellos.

     La sentencia `powerset(<a>)' devuelve el conjunto de todos los
     subconjuntos de <a>, que contendrá `2^cardinality(<a>)' elementos.

     La sentencia `powerset(<a>, <n>)' devuelve el conjunto de todos
     los subconjuntos de <a> de cardinalidad <n>.

     La función `powerset' emite un mensaje de error si <a> no es un
     conjunto literal o si <n> no es un entero no negativo.

     Ejemplos:

          (%i1) powerset ({a, b, c});
          (%o1) {{}, {a}, {a, b}, {a, b, c}, {a, c}, {b}, {b, c}, {c}}
          (%i2) powerset ({w, x, y, z}, 4);
          (%o2)                    {{w, x, y, z}}
          (%i3) powerset ({w, x, y, z}, 3);
          (%o3)     {{w, x, y}, {w, x, z}, {w, y, z}, {x, y, z}}
          (%i4) powerset ({w, x, y, z}, 2);
          (%o4)   {{w, x}, {w, y}, {w, z}, {x, y}, {x, z}, {y, z}}
          (%i5) powerset ({w, x, y, z}, 1);
          (%o5)                 {{w}, {x}, {y}, {z}}
          (%i6) powerset ({w, x, y, z}, 0);
          (%o6)                         {{}}

 -- Función: random_permutation (<a>)
     Devuelve una permutación aleatoria del conjunto o lista <a>,
     siguiendo el algoritmo de Knuth.

     El valor devuelto es una lista nueva distinta del argumento,
     incluso cuando todos los elementos son iguales. Sin embargo, los
     elementos del argumento no se copian.

     Ejemplos:

          (%i1) random_permutation ([a, b, c, 1, 2, 3]);
          (%o1)                  [c, 1, 2, 3, a, b]
          (%i2) random_permutation ([a, b, c, 1, 2, 3]);
          (%o2)                  [b, 3, 1, c, a, 2]
          (%i3) random_permutation ({x + 1, y + 2, z + 3});
          (%o3)                 [y + 2, z + 3, x + 1]
          (%i4) random_permutation ({x + 1, y + 2, z + 3});
          (%o4)                 [x + 1, y + 2, z + 3]


 -- Función: rreduce (<f>, <s>)
 -- Función: rreduce (<f>, <s>, <init>)
     Amplía la función binaria <F> a n-aria mediante composición,
     siendo <s> una lista.

     La sentencia  `rreduce(<F>, <s>)' devuelve `F(s_1, ... F(s_{n -
     2}, F(s_{n - 1}, s_n)))'.  Si se incluye el argumento opcional
     <s_{n + 1}>, el resultado equivale a `rreduce(<F>, endcons(<s_{n +
     1}>, <s>))'.

     La función <F> se aplica primero a los elementos del extremo
     derecho de la lista, de ahí el nombre `rreduce', (right reduce).

     Véanse también `lreduce', `xreduce' y `tree_reduce'.

     Ejemplos:

     La función `rreduce' sin el argumento opcional,

          (%i1) rreduce (f, [1, 2, 3]);
          (%o1)                     f(1, f(2, 3))
          (%i2) rreduce (f, [1, 2, 3, 4]);
          (%o2)                  f(1, f(2, f(3, 4)))

     La función `rreduce' con el argumento opcional,

          (%i1) rreduce (f, [1, 2, 3], 4);
          (%o1)                  f(1, f(2, f(3, 4)))

     La función `rreduce' aplicada a operadores binarios de Maxima.  El
     símbolo `/' es el operador división.

          (%i1) rreduce ("^", args ({a, b, c, d}));
                                           d
                                          c
                                         b
          (%o1)                         a
          (%i2) rreduce ("/", args ({a, b, c, d}));
                                         a c
          (%o2)                          ---
                                         b d

 -- Función: setdifference (<a>, <b>)
     Devuelve el conjunto con los elementos del conjunto <a> que no
     pertenecen al conjunto <b>.

     La función `setdifference' emite un mensaje de error si <a> o <b>
     no son conjuntos.

     Ejemplos:

          (%i1) S_1 : {a, b, c, x, y, z};
          (%o1)                  {a, b, c, x, y, z}
          (%i2) S_2 : {aa, bb, c, x, y, zz};
          (%o2)                 {aa, bb, c, x, y, zz}
          (%i3) setdifference (S_1, S_2);
          (%o3)                       {a, b, z}
          (%i4) setdifference (S_2, S_1);
          (%o4)                     {aa, bb, zz}
          (%i5) setdifference (S_1, S_1);
          (%o5)                          {}
          (%i6) setdifference (S_1, {});
          (%o6)                  {a, b, c, x, y, z}
          (%i7) setdifference ({}, S_1);
          (%o7)                          {}

 -- Función: setequalp (<a>, <b>)
     Devuelve  `true' si los conjuntos <a> y <b> tienen el mismo número
     de elementos y `is (<x> = <y>)' vale `true' para `x' perteneciente
     a <a> e `y' perteneciente a <b>, considerados en el orden que
     determina la función `listify'. En caso contrario, `setequalp'
     devuelve `false'.

     Ejemplos:

          (%i1) setequalp ({1, 2, 3}, {1, 2, 3});
          (%o1)                         true
          (%i2) setequalp ({a, b, c}, {1, 2, 3});
          (%o2)                         false
          (%i3) setequalp ({x^2 - y^2}, {(x + y) * (x - y)});
          (%o3)                         false

 -- Función: setify (<a>)
     Construye un conjunto con los miembros de la lista <a>.  Los
     elementos duplicados de la lista <a> son borrados y ordenados de
     acuerdo con el predicado `orderlessp'.

     La función `setify' emite un mensaje de error si <a> no es un
     conjunto literal.

     Ejemplos:

          (%i1) setify ([1, 2, 3, a, b, c]);
          (%o1)                  {1, 2, 3, a, b, c}
          (%i2) setify ([a, b, c, a, b, c]);
          (%o2)                       {a, b, c}
          (%i3) setify ([7, 13, 11, 1, 3, 9, 5]);
          (%o3)                {1, 3, 5, 7, 9, 11, 13}

 -- Función: setp (<a>)
     Devuelve `true' si y sólo si <a> es un conjunto de Maxima.

     La función `setp' devuelve `true' tanto cuando el conjunto tiene
     como cuando no tiene elementos repetidos.

     La función `setp' is equivalent to the Maxima function `setp(a) :=
     not atom(a) and op(a) = 'set'.

     Ejemplos:

          (%i1) simp : false;
          (%o1)                         false
          (%i2) {a, a, a};
          (%o2)                       {a, a, a}
          (%i3) setp (%);
          (%o3)                         true

 -- Función: set_partitions (<a>)
 -- Función: set_partitions (<a>, <n>)
     Devuelve el conjunto de todas las particiones de <a> o un
     subconjunto de ellas.

     La sentencia `set_partitions(<a>, <n>)' devuelve un conjunto con
     todas las descomposiciones de <a> en <n> conjuntos no vacíos
     disjuntos.

     La sentencia `set_partitions(<a>)' devuelve el conjunto de todas
     las particiones.

     La función `stirling2' devuelve la cardinalidad del conjunto de
     las particiones de un conjunto.

     Se dice que un conjunto P es una partición del conjunto S si
     verifica

       1. cada elemento de P es un conjunto no vacío,

       2. los elementos de P son disjuntos,

       3. la unión de los elementos de P es igual a  S.

     Ejemplos:

     El conjunto vacío forma una partición de sí mismo,

          (%i1) set_partitions ({});
          (%o1)                         {{}}

     La cardinalidad del conjunto de particiones de un conjunto puede
     calcularse con `stirling2',

          (%i1) s: {0, 1, 2, 3, 4, 5}$
          (%i2) p: set_partitions (s, 3)$
          (%i3) cardinality(p) = stirling2 (6, 3);
          (%o3)                        90 = 90

     Cada elemento de `p' debería tener <n> = 3 miembros,

          (%i1) s: {0, 1, 2, 3, 4, 5}$
          (%i2) p: set_partitions (s, 3)$
          (%i3) map (cardinality, p);
          (%o3)                          {3}

     Por último, para cada miembro de `p', la unión de sus elementos
     debe ser igual a `s',

          (%i1) s: {0, 1, 2, 3, 4, 5}$
          (%i2) p: set_partitions (s, 3)$
          (%i3) map (lambda ([x], apply (union, listify (x))), p);
          (%o3)                 {{0, 1, 2, 3, 4, 5}}

 -- Función: some (<f>, <a>)
 -- Función: some (<f>, <L_1>, ..., <L_n>)
     Devuelve `true' si el predicado <f> devuelve `true' para al menos
     uno de sus argumentos.  Si el segundo argumento es un conjunto,
     `some (<f>, <a>)' devuelve `true' si `<f>(<a_i>)' devuelve también
     `true' para alguno de los <a_i> en <a>; puede ser que `some' no
     evalúe <f> para todos los <a_i> de <s>.  Puesto que los conjuntos
     no están ordenados, `some' puede evaluar `<f>(<a_i>)' en cualquier
     orden.

     Dada una o más listas como argumentos, `some (<f>, <L_1>, ...,
     <L_n>)' devuelve `true' si `<f>(<x_1>, ..., <x_n>)' devuelve
     también `true' para al menos un  <x_1>, ..., <x_n> de <L_1>, ...,
     <L_n>, respectivamente; puede ser que `some' no evalúe <f> para
     todos las combinaciones <x_1>, ..., <x_n>. La función `some' evalúa
     las listas en el orden creciente de su índice

     Dado un conjunto vacío `{}' o una lista vacía como argumentos,
     `some' devuelve `false'.

     Si la variable global `maperror' vale `true', todas las listas
     <L_1>, ..., <L_n> deben tener igual número de elementos. Si
     `maperror' vale `false', los argumentos se truncan para tener todos
     el número de elementos de la lista más corta.

     Los valores que devuelve el predicado <f> cuando toman (mediante
     `is') un valor diferente a `true' y `false' se controlan con la
     variable global `prederror'.  Si `prederror' vale `true', tales
     valores se consideran como `false'.  Si `prederror' vale `false',
     tales valores se consideran como desconocidos (`unknown').

     Ejemplos:

     La función `some' aplicada a un único conjunto.  El predicado es
     una función de un argumento,

          (%i1) some (integerp, {1, 2, 3, 4, 5, 6});
          (%o1)                         true
          (%i2) some (atom, {1, 2, sin(3), 4, 5 + y, 6});
          (%o2)                         true

     La función `some' aplicada a dos listas.  El predicado es una
     función de dos argumentos,

          (%i1) some ("=", [a, b, c], [a, b, c]);
          (%o1)                         true
          (%i2) some ("#", [a, b, c], [a, b, c]);
          (%o2)                         false

     Las respuestas del predicado <f> que se evalúan a cualquier cosa
     diferente de `true' y `false' están controlados por la variable
     global `prederror'.

          (%i1) prederror : false;
          (%o1)                         false
          (%i2) map (lambda ([a, b], is (a < b)), [x, y, z],
                               [x^2, y^2, z^2]);
          (%o2)              [unknown, unknown, unknown]
          (%i3) some ("<", [x, y, z], [x^2, y^2, z^2]);
          (%o3)                        unknown
          (%i4) some ("<", [x, y, z], [x^2, y^2, z + 1]);
          (%o4)                         true
          (%i5) prederror : true;
          (%o5)                         true
          (%i6) some ("<", [x, y, z], [x^2, y^2, z^2]);
          (%o6)                         false
          (%i7) some ("<", [x, y, z], [x^2, y^2, z + 1]);
          (%o7)                         true

 -- Función: stirling1 (<n>, <m>)
     Es el número de Stirling de primera especie.

     Si tanto <n> como <m> son enteros no negativos, el valor que toma
     `stirling1 (<n>, <m>)' es el número de permutaciones de un
     conjunto de <n> elementos con <m> ciclos. Para más detalles, véase
     Graham, Knuth and Patashnik Concrete Mathematics.  Maxima utiliza
     una relación recursiva para definir `stirling1 (<n>, <m>)' para
     <m> menor que 0; no está definida para <n> menor que 0 ni para
     argumentos no enteros.

     La función `stirling1' es simplificadora. Maxima reconoce las
     siguientes identidades:

       1. stirling1(0, n) = kron_delta(0, n) (Ref. [1])

       2. stirling1(n, n) = 1 (Ref. [1])

       3. stirling1(n, n - 1) = binomial(n, 2) (Ref. [1])

       4. stirling1(n + 1, 0) = 0 (Ref. [1])

       5. stirling1(n + 1, 1) = n! (Ref. [1])

       6. stirling1(n + 1, 2) = 2^n  - 1 (Ref. [1])

     Estas identidades se aplican cuando los argumentos son enteros
     literales o símbolos declarados como enteros y el primer argumento
     es no negativo. La función `stirling1' no simplifica para
     argumentos no enteros.

     Referencias:

     [1] Donald Knuth, The Art of Computer Programming, Tercera
     Edición, Volumen 1, Sección 1.2.6, Ecuaciones 48, 49 y 50.

     Ejemplos:

          (%i1) declare (n, integer)$
          (%i2) assume (n >= 0)$
          (%i3) stirling1 (n, n);
          (%o3)                           1

     La función `stirling1' no simplifica en caso de argumentos no
     enteros,

          (%i1) stirling1 (sqrt(2), sqrt(2));
          (%o1)              stirling1(sqrt(2), sqrt(2))

     Maxima aplicas algunas identidades a `stirling1',

          (%i1) declare (n, integer)$
          (%i2) assume (n >= 0)$
          (%i3) stirling1 (n + 1, n);
                                      n (n + 1)
          (%o3)                       ---------
                                          2
          (%i4) stirling1 (n + 1, 1);
          (%o4)                          n!

 -- Función: stirling2 (<n>, <m>)
     Es el número de Stirling de segunda especie.

     Si <n> y <m> son enteros no negativos, `stirling2 (<n>, <m>)' es
     el número de formas en las que se puede particionar un conjunto de
     cardinal <n> en <m> subconjuntos disjuntos.  Maxima utiliza una
     relación recursiva para definir `stirling2 (<n>, <m>)' con <m>
     menor que 0; la función no está definida para  <n> menor que 0  ni
     para argumentos no enteros.

     La función `stirling2' es simplificadora. Maxima reconoce las
     siguientes identidades:

       1. stirling2(0, n) = kron_delta(0, n) (Ref. [1])

       2. stirling2(n, n) = 1 (Ref. [1])

       3. stirling2(n, n - 1) = binomial(n, 2) (Ref. [1])

       4. stirling2(n + 1, 1) = 1 (Ref. [1])

       5. stirling2(n + 1, 2) = 2^n  - 1 (Ref. [1])

       6. stirling2(n, 0) = kron_delta(n, 0) (Ref. [2])

       7. stirling2(n, m) = 0 when m > n (Ref. [2])

       8. stirling2(n, m) = sum((-1)^(m - k) binomial(m k) k^n,i,1,m) /
          m!  si m y n son enteros y n no negativo. (Ref. [3])

     Estas identidades se aplican cuando los argumentos son enteros
     literales o símbolos declarados como enteros y el primer argumento
     es no negativo. La función `stirling2' no simplifica para
     argumentos no enteros.

     Referencias:

     [1] Donald Knuth. The Art of Computer Programming, Tercera
     Edición, Volumen 1, Sección 1.2.6, Ecuaciones 48, 49 y 50.

     [2] Graham, Knuth y Patashnik. Concrete Mathematics, Tabla 264.

     [3] Abramowitz y Stegun. Handbook of Mathematical Functions,
     Sección 24.1.4.

     Ejemplos:

          (%i1) declare (n, integer)$
          (%i2) assume (n >= 0)$
          (%i3) stirling2 (n, n);
          (%o3)                           1

     La función `stirling2' no simplifica en caso de argumentos no
     enteros,

          (%i1) stirling2 (%pi, %pi);
          (%o1)                  stirling2(%pi, %pi)

     Maxima aplicas algunas identidades a `stirling2',

          (%i1) declare (n, integer)$
          (%i2) assume (n >= 0)$
          (%i3) stirling2 (n + 9, n + 8);
                                   (n + 8) (n + 9)
          (%o3)                    ---------------
                                          2
          (%i4) stirling2 (n + 1, 2);
                                        n
          (%o4)                        2  - 1

 -- Función: subset (<a>, <f>)
     Devuelve el subconjunto del conjunto <a> que satisface el
     predicado <f>.

     La función `subset' devuelve el conjunto que contiene a los
     elementos de <a> para los cuales <f> devuelve un resultado
     diferente de `false'. La función `subset' no aplica `is' al valor
     retornado por <f>.

     La función `subset' emite un mensaje de error si <a> no es un
     conjunto literal.

     Véase también `partition_set'.

     Ejemplos:

          (%i1) subset ({1, 2, x, x + y, z, x + y + z}, atom);
          (%o1)                     {1, 2, x, z}
          (%i2) subset ({1, 2, 7, 8, 9, 14}, evenp);
          (%o2)                      {2, 8, 14}

 -- Función: subsetp (<a>, <b>)
     Devuelve `true' si y sólo si el conjunto <a> es un subconjunto de
     <b>.

     La función `subsetp' emite un mensaje de error si cualesquiera <a>
     o <b> no es un conjunto literal.

     Ejemplos:

          (%i1) subsetp ({1, 2, 3}, {a, 1, b, 2, c, 3});
          (%o1)                         true
          (%i2) subsetp ({a, 1, b, 2, c, 3}, {1, 2, 3});
          (%o2)                         false

 -- Función: symmdifference (<a_1>, ..., <a_n>)
     Devuelve la diferencia simétrica de los conjuntos ` <a_1>, ...,
     <a_n>'.

     Dados dos argumentos, `symmdifference (<a>, <b>)' equivale a
     `union (setdifference (<a>, <b>), setdifference (<b>, <a>))'.

     La función `symmdifference' emite un mensaje de error si alguno de
     su argumentos no es un conjunto literal.

     Ejemplos:

          (%i1) S_1 : {a, b, c};
          (%o1)                       {a, b, c}
          (%i2) S_2 : {1, b, c};
          (%o2)                       {1, b, c}
          (%i3) S_3 : {a, b, z};
          (%o3)                       {a, b, z}
          (%i4) symmdifference ();
          (%o4)                          {}
          (%i5) symmdifference (S_1);
          (%o5)                       {a, b, c}
          (%i6) symmdifference (S_1, S_2);
          (%o6)                        {1, a}
          (%i7) symmdifference (S_1, S_2, S_3);
          (%o7)                       {1, b, z}
          (%i8) symmdifference ({}, S_1, S_2, S_3);
          (%o8)                       {1,b, z}

 -- Función: tree_reduce (<F>, <s>)
 -- Función: tree_reduce (<F>, <s>, <s_0>)
     Amplía la función binaria <F> a n-aria, siendo <s> una lista.

     La función `tree_reduce' equivale a lo suguiente: Aplicar <F> a
     pares sucesivos de elementos para formar una nueva lista
     `[<F>(<s_1>, <s_2>), <F>(<s_3>, <s_4>), ...]', llevando el
     elemento final sin cambiar si el número de elementos es impar;
     después repetir hasta que la lista se reduzca a un único elemento,
     que es el valor de retorno.

     Cuando está presente el argumento opcional <s_0>, el resultado
     equivale a `tree_reduce(<F>, cons(<s_0>, <s>)'.

     Para la suma de números decimales en coma flotante, `tree_reduce'
     puede devolver una suma que tenga un error de redondeo menor que
     el conseguido por `rreduce' o `lreduce'.

     Los elementos de <s> y los resultados parciales pueden colocarse
     en un árbol binario de mínima profundidad, de ahí el nombre de
     tree_reduce.

     Ejemplos:

     La función `tree_reduce' aplicada a una lista con un número par de
     elementos,

          (%i1) tree_reduce (f, [a, b, c, d]);
          (%o1)                  f(f(a, b), f(c, d))

     La función `tree_reduce' aplicada a una lista con un número impar
     de elementos,

          (%i1) tree_reduce (f, [a, b, c, d, e]);
          (%o1)               f(f(f(a, b), f(c, d)), e)

 -- Function: union (<a_1>, ..., <a_n>)
     Devuelve la unión de los conjuntos <a_1> hasta <a_n>.

     La sentencia `union()' (sin argumentos) devuelve el conjunto vacío.

     La función `union' emite un mensaje de error si alguno de sus
     argumentos no es un conjunto literal.

     Ejemplos:

          (%i1) S_1 : {a, b, c + d, %e};
          (%o1)                   {%e, a, b, d + c}
          (%i2) S_2 : {%pi, %i, %e, c + d};
          (%o2)                 {%e, %i, %pi, d + c}
          (%i3) S_3 : {17, 29, 1729, %pi, %i};
          (%o3)                {17, 29, 1729, %i, %pi}
          (%i4) union ();
          (%o4)                          {}
          (%i5) union (S_1);
          (%o5)                   {%e, a, b, d + c}
          (%i6) union (S_1, S_2);
          (%o6)              {%e, %i, %pi, a, b, d + c}
          (%i7) union (S_1, S_2, S_3);
          (%o7)       {17, 29, 1729, %e, %i, %pi, a, b, d + c}
          (%i8) union ({}, S_1, S_2, S_3);
          (%o8)       {17, 29, 1729, %e, %i, %pi, a, b, d + c}

 -- Función: xreduce (<F>, <s>)
 -- Función: xreduce (<F>, <s>, <s_0>)
     Amplía la función <F> a n-aria mediante composición; si <F> ya es
     n-aria, aplica <F> a <s>.  Si <F> no es n-aria, `xreduce' equivale
     a `lreduce'.  El argumento <s> debe ser una lista.

     Funciones n-arias reconocidas por Maxima son la suma `+', la
     multiplicación `*', `and', `or', `max', `min' y `append'. Las
     funciones también se pueden declarar n-arias mediante
     `declare(<F>, nary)'; para estas funciones, `xreduce' será más
     rápida que `rreduce' o `lreduce'.

     Cuando está presente el argumento opcional <s_0>, el resultado
     equivale a `xreduce(<s>, cons(<s_0>, <s>))'.

     La suma de números decimales en coma flotante no es exactamente
     asociativa; aún así, `xreduce' aplica la suma n-aria cuando <s>
     contiene números en coma flotante.

     Ejemplos:

     La función `xreduce' aplicada a una función n-aria; `F' es
     invocada una sóla vez, con todos sus argumentos,

          (%i1) declare (F, nary);
          (%o1)                         done
          (%i2) F ([L]) := L;
          (%o2)                      F([L]) := L
          (%i3) xreduce (F, [a, b, c, d, e]);
          (%o3)         [[[[[("[", simp), a], b], c], d], e]

     La función `xreduce' aplicada a una función que se desconoce si es
     n-aria; `G' es invocada varias veces, con dos argumentos de cada
     vez,

          (%i1) G ([L]) := L;
          (%o1)                      G([L]) := L
          (%i2) xreduce (G, [a, b, c, d, e]);
          (%o2)         [[[[[("[", simp), a], b], c], d], e]
          (%i3) lreduce (G, [a, b, c, d, e]);
          (%o3)                 [[[[a, b], c], d], e]


File: maxima.info,  Node: Definición de Funciones,  Next: Programación,  Prev: Conjuntos,  Up: Top

36 Definición de Funciones
**************************

* Menu:

* Introducción a la definición de funciones::
* Funciones::
* Macros::
* Funciones y variables para la definición de funciones::


File: maxima.info,  Node: Introducción a la definición de funciones,  Next: Funciones,  Prev: Definición de Funciones,  Up: Definición de Funciones

36.1 Introducción a la definición de funciones
==============================================


File: maxima.info,  Node: Funciones,  Next: Macros,  Prev: Introducción a la definición de funciones,  Up: Definición de Funciones

36.2 Funciones
==============

36.2.1 Funciones ordinarias
---------------------------

Para definir una función en Maxima es necesario utilizar el operador
':='.

Por ejemplo,

     f(x) := sin(x)
define una función `f'. También se pueden definir funciones anónimas
utilizando `lambda'; por ejemplo,

     lambda ([i, j], ...)

puede utilizarse en lugar de `f' donde

     f(i,j) := block ([], ...);
     map (lambda ([i], i+1), l)

devolvería una lista con todos sus elementos aumentados en una unidad.

También se puede definir una función con un número variable de
argumentos, sin más que añadir un argumento final al que se le asigna
una lista con todos los argumentos adicionales.:

     (%i1) f ([u]) := u;
     (%o1)                      f([u]) := u
     (%i2) f (1, 2, 3, 4);
     (%o2)                     [1, 2, 3, 4]
     (%i3) f (a, b, [u]) := [a, b, u];
     (%o3)               f(a, b, [u]) := [a, b, u]
     (%i4) f (1, 2, 3, 4, 5, 6);
     (%o4)                 [1, 2, [3, 4, 5, 6]]

El miembro derecho de una función debe ser una expresión. Así, si se
quiere una secuencia de expresiones, se debe hacer

     f(x) := (expr1, expr2, ...., exprn);

siendo el valor que alcance exprn el devuelto por la función.

Si se quiere hacer un `return' desde alguna de las expresiones de la
función, se debe utilizar la estructura  `block' junto con `return'.
Por ejemplo,

     block ([], expr1, ..., if (a > 10) then return(a), ..., exprn)

es una expresión de pleno derecho, por lo que puede ocupar el lado
derecho de la definición de una función. Aquí puede ocurrir que el
retorno se produzca antes que se alcance la última expresión.

Los primeros corchetes del bloque (`[]') pueden contener una lista de
variables junto con posibles asignaciones, tal como `[a: 3, b, c: []]',
lo que provocará que las tres variables `a',`b' y `c' se consideren
locales y sean independientes de otras globales con el mismo nombre;
las variables locales sólo estarán activas mientras se ejecute el
código que está dentro de la estructura `block', o dentro de funciones
que son llamadas desde dentro de `block'. A esto se le llama asignación
dinámica, pues las variables sobreviven desde el inicio del bloque
hasta que éste deje de estar operativo. Una vez se salga del bloque los
valores originales de las variables, si es que los había, quedan
restaurados. Es recomendable proteger las variables de esta forma. Se
tendrá en cuenta que las asignaciones a las variables del bloque se
hacen en paralelo, lo que significa que si como en el ejemplo anterior
se hace `c: a' en el momento de entrar en el bloque, el valor de `c'
será el que tenía `a' antes de entrar en el bloque, es decir, antes de
la asignación `a: 3'. Así, haciendo lo siguiente

     block ([a: a], expr1, ... a: a+3, ..., exprn)

se prevendría de que el valor externo de `a' fuese alterado, pero
permitiría acceder a él desde dentro del bloque. La parte derecha de
las asignaciones se evalúa dentro de su contexto antes de hacer
efectiva la asignación. Utilizando únicamente `block([x],..' haría que
`x' se tuviese a sí misma como valor, justo como si se acabase de
iniciar una nueva sesión de Maxima.

Los valores de los argumentos de una funcón se tratan exactamente de la
misma forma que las variables de un bloque. Así, con

     f(x) := (expr1, ..., exprn);

y

     f(1);

se estaría en un contexto similar para la evaluación de las expresiones
como si se hubiera hecho

     block ([x: 1], expr1, ..., exprn)

Dentro de las funciones, cuando el lado derecho de la definición deba
ser evaluado será útil hacer uso de `define' y posiblemente de `buildq'.

36.2.2 Funciones array
----------------------

Una función array almacena el valor de la función la primera vez que es
invocada con un argumento dado, devolviendo el valor almacenado sin
recalcularlo cuando es llamada con ese mismo argumento.  Estas
funciones reciben también el nombre de funciones memorizadoras.

Los nombres de las funciones array son añadidos a la lista global
`arrays', no a la lista global `functions'.  La función `arrayinfo'
devuelve la lista de argumentos para los que hay valores almacenados y
`listarray' devuelve precisamente estos valores almacenados.  Las
funciones `dispfun' y `fundef' devuelven la definición de la función
array.

La función `arraymake' construye una llamada a una función array, de
forma similar a como lo hace `funmake' para las funciones ordinarias.
Por otro lado, `arrayapply' aplica una función array a sus argumentos,
tal como lo hace `apply' con las funciones ordinarias. No existe para
las funciones array nada similar a `map', aunque `map(lambda([<x>],
<a>[<x>]), <L>)' o `makelist(<a>[<x>], <x>, <L>)', siendo <L> una
lista, podrían suplantar esta carencia.

La función `remarray' borra la definición de una función array, así
como cualesquiera valores almacenados que tenga asociados, tal como
`remfunction' lo hace con las funciones ordinarias.

La llamada `kill(<a>[<x>])' borra el valor de la función array <a>
almacenado para el argumento <x>; la próxima vez que se llame a <a> con
el argumento <x>, se recalculará el valor correspondiente.  Sin
embargo, no hay forma de borrar todos los valores almacenados de una
sola vez, excepto mediante `kill(<a>)' o `remarray(<a>)', con lo que se
borra también la definición de la propia función.


File: maxima.info,  Node: Macros,  Next: Funciones y variables para la definición de funciones,  Prev: Funciones,  Up: Definición de Funciones

36.3 Macros
===========

 -- Función: buildq (<L>, <expr>)
     Sustituye en paralelo las variables nombradas en la lista <L> en
     la expresión <expr>, sin evaluar ésta.  La expresión resultante se
     simplifica pero no se evalúa hasta que `buildq' termine de hacer
     las sustituciones.

     Los elementos de <L> son símbolos o expresiones de asignación del
     tipo `<symbol>: <value>', evaluadas en paralelo. Esto es, el valor
     de una variable en la parte derecha de una asignación es el valor
     que toma dicha variable en el contexto desde el que se invoca a
     `buildq'. En caso de que a una variable de <L> no se le haga una
     signación explícita, su valor en `buildq' es el mismo que tiene en
     el contexto desde el que se llama a `buildq'.

     Las variables referenciadas en <L> se sustituyen en <expr> en
     paralelo. Esto es, la sustitución para cada variable se determina
     antes de que se hagan las sustituciones, de forma que la
     sustitución de una variable no tiene efecto alguno sobre las otras.

     Si alguna variable <x> aparece como `splice (<x>)' en <expr>,
     entonces a <x> se le debe asignar una lista, la cual será
     interpolada en <expr> en lugar de hacer una simple sustitución;
     ver ejemplo más abajo.

     Cualesquiera otras variables de <expr> que no aparezcan en <L> se
     traspasan al resultado tal cual, incluso cuando tienen asignados
     valores en el contexto desde el que se llama a `buildq'.

     Ejemplos:

     `a' queda asociada explícitamente a `x', mientras que `b' tiene la
     misma asociación (29) que en el contexto de llamada y `c' es
     traspasado al resultado sin ser sustituido. La expresión
     resultante no se evalúa hasta que no se le obligue a ello mediante
     la evaluación explícita `''%'.

          (%i1) (a: 17, b: 29, c: 1729)$
          (%i2) buildq ([a: x, b], a + b + c);
          (%o2)                      x + c + 29
          (%i3) ''%;
          (%o3)                       x + 1758

     En este ejemplo, `e' se asocia a una lista, la cual aparece como
     tal en los argumentos de `foo' e interpolada en los argumentos de
     `bar'.

          (%i1) buildq ([e: [a, b, c]], foo (x, e, y));
          (%o1)                 foo(x, [a, b, c], y)
          (%i2) buildq ([e: [a, b, c]], bar (x, splice (e), y));
          (%o2)                  bar(x, a, b, c, y)

     Como se ve a continuación, el resultado se simplifica tras las
     sustituciones. Si la simplificación se realizase antes que las
     sustituciones, ambos resultados serían iguales.

          (%i1) buildq ([e: [a, b, c]], splice (e) + splice (e));
          (%o1)                    2 c + 2 b + 2 a
          (%i2) buildq ([e: [a, b, c]], 2 * splice (e));
          (%o2)                        2 a b c

     Las variables de <L> se asocian en paralelo; si se hiciese
     secuencialmente, el primer resultado sería `foo (b, b)'. Las
     sustituciones se llevan a cabo en paralelo. Compárese el segundo
     resultado con el resultado de `subst', que hace las sustituciones
     de forma secuencial.

          (%i1) buildq ([a: b, b: a], foo (a, b));
          (%o1)                       foo(b, a)
          (%i2) buildq ([u: v, v: w, w: x, x: y, y: z, z: u],
                        bar (u, v, w, x, y, z));
          (%o2)                 bar(v, w, x, y, z, u)
          (%i3) subst ([u=v, v=w, w=x, x=y, y=z, z=u],
                       bar (u, v, w, x, y, z));
          (%o3)                 bar(u, u, u, u, u, u)

     Se construye a continuación un sistema de ecuaciones con algunas
     variables o expresiones en el lado izquierdo y sus valores en el
     derecho; `macroexpand' muestra la expresión devuelta por
     `show_values'.

          (%i1) show_values ([L]) ::= buildq ([L], map ("=", 'L, L));
          (%o1)   show_values([L]) ::= buildq([L], map("=", 'L, L))
          (%i2) (a: 17, b: 29, c: 1729)$
          (%i3) show_values (a, b, c - a - b);
          (%o3)          [a = 17, b = 29, c - b - a = 1683]
          (%i4) macroexpand (show_values (a, b, c - a - b));
          (%o4)    map(=, '([a, b, c - b - a]), [a, b, c - b - a])

     Dada una función con varios argumentos, se crea otra función en la
     cual algunos argumentos son fijos.

          (%i1) curry (f, [a]) :=
                  buildq ([f, a], lambda ([[x]], apply (f, append (a, x))))$
          (%i2) by3 : curry ("*", 3);
          (%o2)        lambda([[x]], apply(*, append([3], x)))
          (%i3) by3 (a + b);
          (%o3)                       3 (b + a)

 -- Función: macroexpand (<expr>)
     Devuelve la macroexpansión de <expr>, sin evaluarla, cuando `expr'
     es una llamada a una función macro; en caso contrario,
     `macroexpand' devuelve <expr>.

     Si la expansión de <expr> devuelve otra llamada a una función
     macro, esta llamada también se expande.

     La función `macroexpand' no evalúa su argumento.  Sin embargo, si
     la expansión de una llamada a función macro tiene efectos
     laterales, éstos se ejecutan.

     Véanse también `::=', `macros' y `macroexpand1'.

     Ejemplos:

          (%i1) g (x) ::= x / 99;
                                              x
          (%o1)                      g(x) ::= --
                                              99
          (%i2) h (x) ::= buildq ([x], g (x - a));
          (%o2)            h(x) ::= buildq([x], g(x - a))
          (%i3) a: 1234;
          (%o3)                         1234
          (%i4) macroexpand (h (y));
                                        y - a
          (%o4)                         -----
                                         99
          (%i5) h (y);
                                      y - 1234
          (%o5)                       --------
                                         99


 -- Función: macroexpand1 (<expr>)
     Devuelve la macroexpansión de <expr>, sin evaluarla, cuando `expr'
     es una llamada a una función macro; en caso contrario,
     `macroexpand1' devuelve <expr>.

     La función `macroexpand1' no evalúa su argumento.  Sin embargo, si
     la expansión de una llamada a función macro tiene efectos
     laterales, éstos se ejecutan.

     Si la expansión de <expr> devuelve otra llamada a una función
     macro, esta llamada no se expande.

     Véanse también `::=', `macros' y `macroexpand'.

     Ejemplos:

          (%i1) g (x) ::= x / 99;
                                              x
          (%o1)                      g(x) ::= --
                                              99
          (%i2) h (x) ::= buildq ([x], g (x - a));
          (%o2)            h(x) ::= buildq([x], g(x - a))
          (%i3) a: 1234;
          (%o3)                         1234
          (%i4) macroexpand1 (h (y));
          (%o4)                       g(y - a)
          (%i5) h (y);
                                      y - 1234
          (%o5)                       --------
                                         99


 -- Variable global: macros
     Valor por defecto: `[]'

     La variable `macros' es la lista de las funciones macro definidas
     por el usuario.  El operador de definición de funciones macro
     `::=' coloca la nueva función macro en esta lista, mientras que
     `kill', `remove' y `remfunction' eliminan las funciones macro de
     la lista.

     Véase también `infolists'.


 -- Función: splice (<a>)
     Interpola la lista nombrada por el átomo  <a> dentro de una
     expresión, pero sólo si `splice' aparece dentro de `buildq'; en
     otro caso, `splice' se considera una función no definida. Si <a>
     aparece dentro de `buildq' sin `splice', entonces queda sustituida
     por una lista dentro del resultado. El argumento de `splice' debe
     ser un átomo, no pudiendo ser una lista literal ni una expresión
     que devuelva una lista.

     Normalmente `splice' suministra los argumentos para una función u
     operador. Para una función `f', la expresión `f (splice (<a>))'
     dentro de `buildq' se convierte en `f (<a>[1], <a>[2], <a>[3],
     ...)'. Dado un operador `o', la expresión `"o" (splice (<a>)'
     dentro de `buildq' se convierte en `"o" (<a>[1], <a>[2], <a>[3],
     ...)', donde `o' puede ser cualquier tipo de operador, normalmente
     uno que admita varios argumentos. Nótese que el operador debe ir
     encerrado entre comillas dobles `"'.

     Ejemplos:

          (%i1) buildq ([x: [1, %pi, z - y]], foo (splice (x)) / length (x));
                                 foo(1, %pi, z - y)
          (%o1)                -----------------------
                               length([1, %pi, z - y])
          (%i2) buildq ([x: [1, %pi]], "/" (splice (x)));
                                          1
          (%o2)                          ---
                                         %pi
          (%i3) matchfix ("<>", "<>");
          (%o3)                          <>
          (%i4) buildq ([x: [1, %pi, z - y]], "<>" (splice (x)));
          (%o4)                   <>1, %pi, z - y<>



File: maxima.info,  Node: Funciones y variables para la definición de funciones,  Prev: Macros,  Up: Definición de Funciones

36.4 Funciones y variables para la definición de funciones
==========================================================

 -- Función: apply (<F>, [<x_1>, ..., <x_n>])
     Construye y evalúa la expresión `<F>(<arg_1>, ..., <arg_n>)'.

     La función `apply' no hace distinciones entre funciones array y
     funciones ordinarias; cuando <F> es el nombre de una función array,
     `apply' evalúa `<F>(...)', esto es, hace una llamada con
     paréntesis en lugar de corchetes. La función `arrayapply' evalúa
     una llamada a función con corchetes para estos casos.

     Ejemplos:

     La función `apply' evalúa sus argumentos.  En este ejemplo, `min'
     se aplica al valor de `L'.

          (%i1) L : [1, 5, -10.2, 4, 3];
          (%o1)                 [1, 5, - 10.2, 4, 3]
          (%i2) apply (min, L);
          (%o2)                        - 10.2

     La función `apply' evalúa sus argumentos, incluso cuando la
     función <F> no lo hace.

          (%i1) F (x) := x / 1729;
                                             x
          (%o1)                     F(x) := ----
                                            1729
          (%i2) fname : F;
          (%o2)                           F
          (%i3) dispfun (F);
                                             x
          (%t3)                     F(x) := ----
                                            1729

          (%o3)                         [%t3]
          (%i4) dispfun (fname);
          fname is not the name of a user function.
           -- an error.  Quitting.  To debug this try debugmode(true);
          (%i5) apply (dispfun, [fname]);
                                             x
          (%t5)                     F(x) := ----
                                            1729

          (%o5)                         [%t5]

     La función `apply' evalúa el nombre de función <F>.  La comilla
     simple `'' evita la evaluación.  El nombre `demoivre' corresponde
     a una variable global y también a una función.

          (%i1) demoivre;
          (%o1)                         false
          (%i2) demoivre (exp (%i * x));
          (%o2)                  %i sin(x) + cos(x)
          (%i3) apply (demoivre, [exp (%i * x)]);
          demoivre evaluates to false
          Improper name or value in functional position.
           -- an error.  Quitting.  To debug this try debugmode(true);
          (%i4) apply ('demoivre, [exp (%i * x)]);
          (%o4)                  %i sin(x) + cos(x)


 -- Función: block ([<v_1>, ..., <v_m>], <expr_1>, ..., <expr_n>)
 -- Función: block (<expr_1>, ..., <expr_n>)
     La función `block' evalúa <expr_1>, ..., <expr_n> secuencialmente
     y devuelve el valor de la última expresión evaluada. La secuencia
     puede alterarse con las funciones `go', `throw' y `return'. La
     última expresión es <expr_n> a menos que `return' o una expresión
     que contenga un `throw' sea evaluada. Las variables <v_1>, ...,
     <v_m> son locales en el bloque; éstas se distiguen de las globales
     que tengan el mismo nombre. Si no se declaran variables locales
     entonces se puede omitir la lista. Dentro del bloque, cualquier
     otra variable distinta de <v_1>, ..., <v_m> se considera global.

     La función `block' guarda los valores actuales de las variables
     <v_1>, ..., <v_m>, si los tienen, a la entrada del bloque y luego
     las evalúa a sí mismas, es decir les saca el valor temporalmente.
     A las variables locales se les puede asignar cualquier valor
     dentro del bloque, pero al salir de éste, los valores inicialmente
     almacenados quedan restaurados, al tiempo que los asignados dentro
     del bloque se pierden.

     La declaración `local(<v_1>, ..., <v_m>)' dentro de un bloque
     almacena las propiedades asociadas a los símbolos <v_1>, ...,
     <v_m>, borra cualesquiera otras propiedades antes de evaluar las
     expresiones y restaura las propiedades guardadas antes de
     abandonar el bloque.  Algunas declaraciones, como `:=', `array',
     `dependencies', `atvalue', `matchdeclare', `atomgrad', `constant',
     `nonscalar', `assume' y otras se implementan como propiedades de
     símbolos.  El efecto producido por `local' consiste en hacer que
     tales declaraciones tengan efecto sólo dentro del bloque, en otro
     caso las declaraciones dentro del bloque tendrían un efecto global
     que afectarían al exterior de `block'.

     Un `block' puede aparecer dentro de otro `block'. Las variables
     locales se inicializan cada vez que se entra dentro de un nuevo
     bloque. Las variables locales de un bloque se consideran globales
     dentro de otro anidado dentro del primero. Si una variable es no
     local dentro de un bloque, su valor es el que le corresponde en el
     bloque superior. Este criterio se conoce con el nombre de "alcance
     dinámico".

     El valor del bloque es el de la última sentencia o el argumento de
     la función `return', que puede utilizarse para salir del bloque.
     La función `go' puede usarse para transferir el control a la
     sentencia del bloque que esté etiquetada con el argumento de `go'.
     Para etiquetar una sentencia basta que vaya precedida de un
     argumento atómico como cualquier otra sentencia dentro del bloque.
     Por ejemplo, `block ([x], x:1, tururu, x: x+1, ..., go(tururu),
     ...)'.  El argumento de `go' debe ser el nombre de una etiqueta
     colocada dentro del bloque. No se puede utilzar `go' para
     trasladarse a una etiqueta de un bloque que no sea el que contenga
     a `go'.

     Normalmente los bloques aparecerán al lado derecho de las
     definiciones de funciones, pero también pueden utilizarse en otros
     contextos.


 -- Función: break (<expr_1>, ..., <expr_n>)
     Calcula e imprime <expr_1>, ..., <expr_n> para luego provocar la
     detención de Maxima, de modo que el usuario pueda examinar y
     cambiar el entorno de ejecución. Pulsando posteriormente `exit;'
     el cálculo se reanuda.


 -- Función: catch (<expr_1>, ..., <expr_n>)
     Evalúa <expr_1>, ..., <expr_n> una a una;  si alguna de ellas
     conlleva la evaluación de una expresión de la forma `throw (arg)',
     entonces el valor de `catch' es el de `throw (arg)' y ya no se
     evalúan más expresiones. Esta respuesta pasa todos los niveles de
     anidamiento hasta el `catch' más próximo. Si no hay ningún `catch'
     que contenga un `throw' se emite un mensaje de error.

     Si la evaluación de los argumentos no conlleva la evaluación de
     ningún `throw', entonces el valor de `catch' es el devuelto por
     <expr_n>.

          (%i1) lambda ([x], if x < 0 then throw(x) else f(x))$
          (%i2) g(l) := catch (map (''%, l))$
          (%i3) g ([1, 2, 3, 7]);
          (%o3)               [f(1), f(2), f(3), f(7)]
          (%i4) g ([1, 2, -3, 7]);
          (%o4)                          - 3

     La función `g' devuelve las imágenes por `f' de todos los
     elementos de la lista `l' si ésta contiene únicamente números no
     negativos; si no es este el caso, entonces `g' captura el primer
     negativo que encuentra y lo devuelve por medio del `throw'.


 -- Function: compfile (<filename>, <f_1>, ..., <f_n>)
 -- Function: compfile (<filename>, functions)
 -- Function: compfile (<filename>, all)
     Traduce funciones de Maxima a código Lisp, guardándolo luego en el
     fichero <filename>.

     Con la llamada `compfile(<filename>, <f_1>, ..., <f_n>)' se
     traducen las funciones especificadas, mientras que
     `compfile(<filename>, functions)' y `compfile(<filename>, all)'
     traducen las funciones definidas por el usuario.

     El código Lisp traducido no se evalúa, ni el fichero de salida es
     procesado por el compilador de Lisp.  La función `translate' crea
     y evalúa las traducciones Lisp, mientras que `compile_file'
     traduce primero de Maxima a Lisp y luego ejecuta el compilador
     Lisp.

     Véanse también `translate', `translate_file' y `compile_file'.


 -- Función: compile (<f_1>, ..., <f_n>)
 -- Función: compile (functions)
 -- Función: compile (all)
     Traduce las funciones de Maxima <f_1>, ..., <f_n> a Lisp,
     evaluando el código resultante, y llama a la función Lisp
     `COMPILE' para cada función traducida. La función `compile'
     devuelve una lista con los nombres de las funciones compiladas.

     Las llamadas `compile (all)' o `compile (functions)' compilan
     todas las funciones definidas por el usuario.

     La función `compile' no evalúa sus argumentos, pero con el
     operador comilla-comilla (`''') sí lo hace.


 -- Función: define (<f>(<x_1>, ..., <x_n>), <expr>)
 -- Función: define (<f>[<x_1>, ..., <x_n>], <expr>)
 -- Función: define (funmake (<f>, [<x_1>, ..., <x_n>]), <expr>)
 -- Función: define (arraymake (<f>, [<x_1>, ..., <x_n>]), <expr>)
 -- Función: define (ev (<expr_1>), <expr_2>)
     Define una función de nombre <f> con argumentos <x_1>, ..., <x_n>
     y cuerpo <expr>.  `define' evalúa siempre su segundo argumento, a
     menos que se indique lo contrario con el operador de comilla
     simple. La función así definida puede ser una función ordinaria de
     Maxima (con sus argumentos encerrados entre paréntesis) o una
     función array (con sus argumentos encerrados entre corchetes).

     Cuando el último o único argumento <x_n> es una lista de un solo
     elemento, la función definida por `define' acepta un número
     variable de argumentos. Los valores de los argumentos se van
     asignando uno a uno a <x_1>, ..., <x_(n - 1)>, y los que queden,
     si los hay, se asignan a <x_n> en forma de lista.

     Cuando el primer argumento de `define' es una expresión de la
     forma `<f>(<x_1>, ..., <x_n>)' o `<f>[<x_1>, ..., <x_n>]', se
     evalúan los argumentos de la función, pero no <f>, incluso cuando
     se trate de una función o variable ya existente con ese nombre.

     Cuando el primer argumento es una expresión con operador `funmake',
     `arraymake' o `ev', se evalúa este primer argumento, lo que
     permite calcular la función.

     Todas las definiciones de funciones aparecen en el mismo espacio
     de nombres; definiendo una función `f' dentro de otra función `g'
     no limita automáticamente el alcance de `f' a `g'.  Sin embargo,
     `local(f)' hace que la definición de la función `f' sea efectiva
     sólo dentro del bloque o expresión compuesta en el que aparece
     `local'.

     Si un argumento formal <x_k> es un símbolo afectado por el
     operador comilla simple (expresión nominal), la función definida
     por `define' no evalúa el correspondiente valor de argumento.  En
     cualquier otro caso, los argumentos que se pasan son evaluados.

     Véanse también `:=' y `::='.

     Ejemplos:

     `define' evalúa siempre su segundo argumento, a menos que se
     indique lo contrario con el operador de comilla simple.

          (%i1) expr : cos(y) - sin(x);
          (%o1)                    cos(y) - sin(x)
          (%i2) define (F1 (x, y), expr);
          (%o2)              F1(x, y) := cos(y) - sin(x)
          (%i3) F1 (a, b);
          (%o3)                    cos(b) - sin(a)
          (%i4) F2 (x, y) := expr;
          (%o4)                   F2(x, y) := expr
          (%i5) F2 (a, b);
          (%o5)                    cos(y) - sin(x)

     La función así definida puede ser una función ordinaria de Maxima
     o una función array.

          (%i1) define (G1 (x, y), x.y - y.x);
          (%o1)               G1(x, y) := x . y - y . x
          (%i2) define (G2 [x, y], x.y - y.x);
          (%o2)                G2     := x . y - y . x
                                 x, y

     Cuando el último o único argumento <x_n> es una lista de un solo
     elemento, la función definida por `define' acepta un número
     variable de argumentos.

          (%i1) define (H ([L]), '(apply ("+", L)));
          (%o1)                H([L]) := apply("+", L)
          (%i2) H (a, b, c);
          (%o2)                       c + b + a

     Cuando el primer argumento es una expresión con operador `funmake',
     `arraymake' o `ev', se evalúa este primer argumento.

          (%i1) [F : I, u : x];
          (%o1)                        [I, x]
          (%i2) funmake (F, [u]);
          (%o2)                         I(x)
          (%i3) define (funmake (F, [u]), cos(u) + 1);
          (%o3)                  I(x) := cos(x) + 1
          (%i4) define (arraymake (F, [u]), cos(u) + 1);
          (%o4)                   I  := cos(x) + 1
                                   x
          (%i5) define (foo (x, y), bar (y, x));
          (%o5)                foo(x, y) := bar(y, x)
          (%i6) define (ev (foo (x, y)), sin(x) - cos(y));
          (%o6)             bar(y, x) := sin(x) - cos(y)


 -- Función: define_variable (<name>, <default_value>, <mode>)
     Introduce una variable global en el entorno de Maxima. La función
     `define_variable' puede ser útil en los paquetes escritos por los
     usuarios que vayan a ser compilados o traducidos con frecuencia.

     La función `define_variable' ejecuta los siguientes pasos:

       1. `mode_declare (<name>, <mode>)' declara el modo de <name> al
          traductor.  Véase `mode_declare' para ver la lista de modos
          aceptables.

       2. Si aún no tiene asignación, se le da a la variable
          <default_value> el valor <name>.

       3. `declare (<name>, special)' la declara como especial.

       4. Asocia <name> a una función de comprobación para asegurar que
          a <name> sólo se le asignan valores del modo declarado.

     La propiedad `value_check' se puede asociar a cualquier variable
     que haya sido definida mediante `define_variable' en cualquiera de
     los modos diferentes a `any'. La propiedad `value_check' puede ser
     una expresión lambda o una función de una variable, que será
     invocada al intentar asignar un valor a la variable; el argumento
     pasado a la función `value_check' es el valor que se le quiere
     asignar a la variable.

     La función `define_variable' evalúa `default_value' pero no `name'
     ni `mode'; el valor que devuelve es el valor actual de `name', el
     cual es `default_value' si a `name' no se le ha aplicado ninguna
     asignación, o el valor de dicha asignación en caso contrario.

     Ejemplos:

     `foo' es una variable booleana con valor inicial `true'.
          (%i1) define_variable (foo, true, boolean);
          (%o1)                         true
          (%i2) foo;
          (%o2)                         true
          (%i3) foo: false;
          (%o3)                         false
          (%i4) foo: %pi;
          Error: foo was declared mode boolean, has value: %pi
           -- an error.  Quitting.  To debug this try debugmode(true);
          (%i5) foo;
          (%o5)                         false

     `bar' es una variable entera, cuyo valor habrá de ser primo.
          (%i1) define_variable (bar, 2, integer);
          (%o1)                           2
          (%i2) qput (bar, prime_test, value_check);
          (%o2)                      prime_test
          (%i3) prime_test (y) := if not primep(y) then
                                     error (y, "is not prime.");
          (%o3) prime_test(y) :=
                   if not primep(y) then error(y, "is not prime.")
          (%i4) bar: 1439;
          (%o4)                         1439
          (%i5) bar: 1440;
          1440 is not prime.
          #0: prime_test(y=1440)
           -- an error.  Quitting.  To debug this try debugmode(true);
          (%i6) bar;
          (%o6)                         1439

     `baz_quux' es una variable a la que no se le podrá asignar valor
     alguno.  El modo `any_check' es como `any', pero `any_check'
     activa el mecanismo `value_check', cosa que `any' no hace.
          (%i1) define_variable (baz_quux, 'baz_quux, any_check);
          (%o1)                       baz_quux
          (%i2) F: lambda ([y], if y # 'baz_quux then
                           error ("Cannot assign to `baz_quux'."));
          (%o2) lambda([y], if y # 'baz_quux
                             then error(Cannot assign to `baz_quux'.))
          (%i3) qput (baz_quux, ''F, value_check);
          (%o3) lambda([y], if y # 'baz_quux
                             then error(Cannot assign to `baz_quux'.))
          (%i4) baz_quux: 'baz_quux;
          (%o4)                       baz_quux
          (%i5) baz_quux: sqrt(2);
          Cannot assign to `baz_quux'.
          #0: lambda([y],if y # 'baz_quux then
                       error("Cannot assign to `baz_quux'."))(y=sqrt(2))
           -- an error.  Quitting.  To debug this try debugmode(true);
          (%i6) baz_quux;
          (%o6)                       baz_quux


 -- Función: dispfun (<f_1>, ..., <f_n>)
 -- Función: dispfun (all)
     Muestra la deficnión de las funciones de usuario <f_1>, ...,
     <f_n>. Cada argumento puede ser el nombre de una macro (definida
     mediante `::='), una función ordinaria (definida mediante `:=' o
     `define'), una función arreglo  (definida mediante `:=' o
     `define', pero encerrando los argumentos dentro de corchetes `[
     ]'), una función de subíndice (definida mediante `:=' o `define',
     pero encerrando algunos argumentos entre corchetes y otros entre
     paréntesis  `( )'), una función de subíndice seleccionada por un
     subíndice variable, o una función de subíndice definida con un
     subíndice constante.

     La llamada `dispfun (all)' muestra todas las funciones de usuario
     tal como las dan las listas `functions', `arrays' y `macros',
     omitiendo las funciones con subíndices definidas con subíndices
     constantes.

     La función `dispfun' crea una etiqueta (`%t1', `%t2', etc.) para
     cada función mostrada, y asigna la definición de la función a la
     etiqueta. En contraste, `fundef' devuelve las definiciones de las
     funciones.

     La función `dispfun' no evalúa sus argumentos; el operador de
     comilla-comilla `''' permite la evaluación.

     La función `dispfun' devuelve la lista de etiquetas de expresiones
     intermedias correspondientes a las funciones mostradas.

     Ejemplos:

          (%i1) m(x, y) ::= x^(-y);
                                               - y
          (%o1)                   m(x, y) ::= x
          (%i2) f(x, y) :=  x^(-y);
                                               - y
          (%o2)                    f(x, y) := x
          (%i3) g[x, y] :=  x^(-y);
                                              - y
          (%o3)                     g     := x
                                     x, y
          (%i4) h[x](y) :=  x^(-y);
                                              - y
          (%o4)                     h (y) := x
                                     x
          (%i5) i[8](y) :=  8^(-y);
                                              - y
          (%o5)                     i (y) := 8
                                     8
          (%i6) dispfun (m, f, g, h, h[5], h[10], i[8]);
                                               - y
          (%t6)                   m(x, y) ::= x

                                               - y
          (%t7)                    f(x, y) := x

                                              - y
          (%t8)                     g     := x
                                     x, y

                                              - y
          (%t9)                     h (y) := x
                                     x

                                              1
          (%t10)                     h (y) := --
                                      5        y
                                              5

                                               1
          (%t11)                    h  (y) := ---
                                     10         y
                                              10

                                              - y
          (%t12)                    i (y) := 8
                                     8

          (%o12)       [%t6, %t7, %t8, %t9, %t10, %t11, %t12]
          (%i12) ''%;
                               - y              - y            - y
          (%o12) [m(x, y) ::= x   , f(x, y) := x   , g     := x   ,
                                                      x, y
                            - y           1              1             - y
                  h (y) := x   , h (y) := --, h  (y) := ---, i (y) := 8   ]
                   x              5        y   10         y   8
                                          5             10


 -- Función: fullmap (<f>, <expr_1>, ...)
     Similar a `map', pero conservará el mapeado descendente de todas
     las subexpresiones hasta que los operadores principales ya no sean
     los mismos.

     La función `fullmap' es utilizada por el simplificador de Maxima
     en algunas transformaciones matriciales, por lo que Maxima
     generará en algunas ocasiones mensajes de error relacionados con
     `fullmap' aunque el usuario no haya invocado explícitamente esta
     función.

          (%i1) a + b * c;
          (%o1)                        b c + a
          (%i2) fullmap (g, %);
          (%o2)                   g(b) g(c) + g(a)
          (%i3) map (g, %th(2));
          (%o3)                     g(b c) + g(a)


 -- Función: fullmapl (<f>, <list_1>, ...)
     Similar a `fullmap', pero `fullmapl' sólo hace mapeo sobre listas
     y matrices.

          (%i1) fullmapl ("+", [3, [4, 5]], [[a, 1], [0, -1.5]]);
          (%o1)                [[a + 3, 4], [4, 3.5]]


 -- Variable del sistema: functions
     Valor por defecto: `[]'

     La variable `functions' es una lista que contiene los nombres de
     las funciones ordinarias de Maxima. Una función ordinaria es
     aquella que ha sido construida mediante cualquiera de los métodos
     `define' o `:=' y que es invocada utilizando paréntesis. Una
     función puede definirse durante una sesión de Maxima o en un
     fichero que posteriormente será cargado en memoria por `load' o
     `batch'.

     Las funciones array, que son invocadas con corchetes (`F[x]'), y
     las funciones subindicadas, que son las invocadas con corchetes y
     paréntesis (`F[x](y)') se registran en la variable global `arrays',
     no en `functions'.

     Las funciones Lisp no se registran en ninguna lista.

     Ejemplos:

          (%i1) F_1 (x) := x - 100;
          (%o1)                   F_1(x) := x - 100
          (%i2) F_2 (x, y) := x / y;
                                                x
          (%o2)                    F_2(x, y) := -
                                                y
          (%i3) define (F_3 (x), sqrt (x));
          (%o3)                   F_3(x) := sqrt(x)
          (%i4) G_1 [x] := x - 100;
          (%o4)                    G_1  := x - 100
                                      x
          (%i5) G_2 [x, y] := x / y;
                                               x
          (%o5)                     G_2     := -
                                       x, y    y
          (%i6) define (G_3 [x], sqrt (x));
          (%o6)                    G_3  := sqrt(x)
                                      x
          (%i7) H_1 [x] (y) := x^y;
                                                y
          (%o7)                     H_1 (y) := x
                                       x
          (%i8) functions;
          (%o8)              [F_1(x), F_2(x, y), F_3(x)]
          (%i9) arrays;
          (%o9)                 [G_1, G_2, G_3, H_1]


 -- Función: fundef (<f>)
     Devuelve la definición de la función <f>.

     Cada argumento puede ser el nombre de una macro (definida mediante
     `::='), una función ordinaria (definida mediante `:=' o `define'),
     una función arreglo  (definida mediante `:=' o `define', pero
     encerrando los argumentos dentro de corchetes `[ ]'), una función
     de subíndice (definida mediante `:=' o `define', pero encerrando
     algunos argumentos entre corchetes y otros entre paréntesis  `(
     )'), una función de subíndice seleccionada por un subíndice
     variable, o una función de subíndice definida con un subíndice
     constante.

     La función `fundef' no evalúa sus argumentos; el operador
     comilla-comilla `''' permite la evaluación.

     La llamada de función `fundef (<f>)' devuelve la definición de
     <f>. Por el contrario, `dispfun (<f>)' crea una etiqueta
     intermedia y le asigna la definición a la etiqueta.


 -- Función: funmake (<F>, [<arg_1>, ..., <arg_n>])
     Devuelve una expresión `<F>(<arg_1>, ..., <arg_n>)'.  El valor así
     retornado es simplificado pero no evaluado, de forma que la
     función <F> no es invocada, incluso cuando exista.

     La función `funmake' no hace distinciones entre funciones array y
     funciones ordinarias; cuando <F> es el nombre de una función array,
     `funmake' devuelve `<F>(...)', esto es, una llamada a función con
     paréntesis en lugar de corchetes.  La función `arraymake' devuelve
     una llamada a función con corchetes para estos casos.

     La función `funmake' evalúa sus argumentos.

     Ejemplos:

     La función `funmake' aplicada a una función ordinaria de Maxima.

          (%i1) F (x, y) := y^2 - x^2;
                                             2    2
          (%o1)                  F(x, y) := y  - x
          (%i2) funmake (F, [a + 1, b + 1]);
          (%o2)                    F(a + 1, b + 1)
          (%i3) ''%;
                                        2          2
          (%o3)                  (b + 1)  - (a + 1)

     La función `funmake' aplicada a una macro.

          (%i1) G (x) ::= (x - 1)/2;
                                            x - 1
          (%o1)                    G(x) ::= -----
                                              2
          (%i2) funmake (G, [u]);
          (%o2)                         G(u)
          (%i3) ''%;
                                        u - 1
          (%o3)                         -----
                                          2

     La función `funmake' aplicada a una función subindicada.

          (%i1) H [a] (x) := (x - 1)^a;
                                                  a
          (%o1)                   H (x) := (x - 1)
                                   a
          (%i2) funmake (H [n], [%e]);
                                                 n
          (%o2)               lambda([x], (x - 1) )(%e)
          (%i3) ''%;
                                              n
          (%o3)                       (%e - 1)
          (%i4) funmake ('(H [n]), [%e]);
          (%o4)                        H (%e)
                                        n
          (%i5) ''%;
                                              n
          (%o5)                       (%e - 1)

     La función `funmake' aplicada a un símbolo que no está asociado a
     función alguna.

          (%i1) funmake (A, [u]);
          (%o1)                         A(u)
          (%i2) ''%;
          (%o2)                         A(u)

     La función `funmake' evalúa sus argumentos, pero no el valor
     retornado.

          (%i1) det(a,b,c) := b^2 -4*a*c;
                                              2
          (%o1)              det(a, b, c) := b  - 4 a c
          (%i2) (x : 8, y : 10, z : 12);
          (%o2)                          12
          (%i3) f : det;
          (%o3)                          det
          (%i4) funmake (f, [x, y, z]);
          (%o4)                    det(8, 10, 12)
          (%i5) ''%;
          (%o5)                         - 284

     Maxima simplifica el valor retornado de `funmake'.

          (%i1) funmake (sin, [%pi / 2]);
          (%o1)                           1


 -- Función: lambda ([<x_1>, ..., <x_m>], <expr_1>, ..., <expr_n>)
 -- Function: lambda ([[<L>]], <expr_1>, ..., <expr_n>)
 -- Function: lambda ([<x_1>, ..., <x_m>, [<L>]], <expr_1>, ...,
          <expr_n>)
     Define y devuelve una expresión lambda (es decir, una función
     anónima).  La función puede tener argumentos <x_1>, ..., <x_m> y/o
     argumentos opcionales <L>, que aparecerán dentro del cuerpo de la
     función como una lista.  El valor que devuelve la función es
     <expr_n>.  Una expresión lambda puede asignarse a una variable y
     ser evaluada como si fuese una función ordinaria. Además, puede
     aparecer en algunos contextos en los que sea necesario un nombre
     de función.

     Cuando se evalúa la función, se crean las variables <x_1>, ...,
     <x_m> sin asignación de valores. Una función `lambda' puede
     aparecer dentro de un `block' o de otra `lambda'. Las variables
     locales se inicializan cada vez que se entra dentro de un nuevo
     bloque o de otra función `lambda'. Las variables locales se
     consideran globales dentro de un bloque o función `lambda' anidado
     dentro del primero. Si una variable es no local dentro de un
     bloque o función `lambda', su valor es el que le corresponde en el
     bloque o función `lambda' superior. Este criterio se conoce con el
     nombre de "alcance dinámico".

     Una vez establecidas las variables locales <expr_1> a <expr_n> son
     secuencialmente evaluadas. La variable especial  `%%' representa
     el valor de la expresión inmediata anterior. Las sentencias
     `throw' y `catch' pueden aparecer también en la lista de
     expresiones.

     La función `return' no puede aparecer en una expresión `lambda' a
     menos que se encuentre acotada dentro de un bloque (`block'), en
     cuyo caso `return' establece el valor de retorno del bloque, pero
     no de la expresión `lambda', a menos que el bloque resulte ser
     precisamente <expr_n>. De igual manera, `go' no puede aparecer en
     una expresión `lambda' si no es dentro de un `block'.

     Las funciones `lambda' no evalúan sus argumentos;  el operador
     comilla-comilla `''' permite su evaluación.

     Ejemplo:

        * Una función lambda puede asignarse a una variable y ser
          evaluada como si fuese una función ordinaria.

          (%i1) f: lambda ([x], x^2);
                                                2
          (%o1)                    lambda([x], x )
          (%i2) f(a);
                                          2
          (%o2)                          a

        * Una expresión lambda puede aparecer en algunos contextos en
          los que sea necesario un nombre de función.

          (%i3) lambda ([x], x^2) (a);
                                          2
          (%o3)                          a
          (%i4) apply (lambda ([x], x^2), [a]);
                                          2
          (%o4)                          a
          (%i5) map (lambda ([x], x^2), [a, b, c, d, e]);
                                  2   2   2   2   2
          (%o5)                 [a , b , c , d , e ]

        * Los argumentos son variables locales. Otras variables se
          consideran globales. Las variables globales son evaluadas en
          el momento que lo es la expresión, a menos que la evaluación
          de las mismas sea forzada, como cuando se hace uso de `'''.

          (%i6) a: %pi$
          (%i7) b: %e$
          (%i8) g: lambda ([a], a*b);
          (%o8)                   lambda([a], a b)
          (%i9) b: %gamma$
          (%i10) g(1/2);
                                       %gamma
          (%o10)                       ------
                                         2
          (%i11) g2: lambda ([a], a*''b);
          (%o11)                lambda([a], a %gamma)
          (%i12) b: %e$
          (%i13) g2(1/2);
                                       %gamma
          (%o13)                       ------
                                         2

        * Las expresiones lambda pueden anidarse. Las variables locales
          de expresiones lambda exteriores se consideran globales en
          expresiones internas, a menos que se enmascaren con variables
          locales de igual nombre.

          (%i14) h: lambda ([a, b], h2: lambda ([a], a*b), h2(1/2));
                                                             1
          (%o14)    lambda([a, b], h2 : lambda([a], a b), h2(-))
                                                             2
          (%i15) h(%pi, %gamma);
                                       %gamma
          (%o15)                       ------
                                         2

        * Puesto que `lambda' no evalúa sus argumentos, la expresión
          lambda `i' de más abajo no define una función del tipo
          "multiplicar por `a'". Tal tipo de función se puede definir a
          través de `buildq', como en la expresión lambda `i2' de más
          abajo.

          (%i16) i: lambda ([a], lambda ([x], a*x));
          (%o16)            lambda([a], lambda([x], a x))
          (%i17) i(1/2);
          (%o17)                  lambda([x], a x)
          (%i18) i2: lambda([a], buildq([a: a], lambda([x], a*x)));
          (%o18)    lambda([a], buildq([a : a], lambda([x], a x)))
          (%i19) i2(1/2);
                                               x
          (%o19)                   lambda([x], -)
                                               2
          (%i20) i2(1/2)(%pi);
                                         %pi
          (%o20)                         ---
                                          2

        * Una expresión lambda puede tener un número variable de
          argumentos, los cuales se indican mediante `[<L>]', bien sea
          solo o como un último argumento. Estos argumentos aparecerán
          dentro del cuerpo de la función en forma de lista.

          (%i1) f : lambda ([aa, bb, [cc]], aa * cc + bb);
          (%o1)          lambda([aa, bb, [cc]], aa cc + bb)
          (%i2) f (foo, %i, 17, 29, 256);
          (%o2)       [17 foo + %i, 29 foo + %i, 256 foo + %i]
          (%i3) g : lambda ([[aa]], apply ("+", aa));
          (%o3)             lambda([[aa]], apply(+, aa))
          (%i4) g (17, 29, x, y, z, %e);
          (%o4)                  z + y + x + %e + 46

 -- Función: local (<v_1>, ..., <v_n>)
     La declaración `local(<v_1>, ..., <v_m>)' dentro de un bloque
     almacena las propiedades asociadas a los símbolos <v_1>, ...,
     <v_m>, borra cualesquiera otras propiedades antes de evaluar las
     expresiones y restaura las propiedades guardadas antes de
     abandonar el bloque.

     Algunas declaraciones, como `:=', `array', `dependencies',
     `atvalue', `matchdeclare', `atomgrad', `constant', `nonscalar',
     `assume' y otras se implementan como propiedades de símbolos.  El
     efecto producido por `local' consiste en hacer que tales
     declaraciones tengan efecto sólo dentro del bloque, en otro caso
     las declaraciones dentro del bloque tendrían un efecto global que
     afectarían al exterior de `block'.

     La función `local' sólo puede usarse dentro de un `block', en el
     cuerpo de definición de funciones o de expresiones `lambda' o en la
     función `ev', siéndole permitido aparecer una sóla vez en cada una
     de ellas.

     La función `local' no evalúa sus argumentos y devuelve `done'.

     Ejemplo:

     Definición local de una función.

          (%i1) foo (x) := 1 - x;
          (%o1)                    foo(x) := 1 - x
          (%i2) foo (100);
          (%o2)                         - 99
          (%i3) block (local (foo), foo (x) := 2 * x, foo (100));
          (%o3)                          200
          (%i4) foo (100);
          (%o4)                         - 99

 -- Variable opcional: macroexpansion
     Valor por defecto: `false'

     La variable `macroexpansion' controla si la expansión (esto es, el
     valor de retorno) de una función macro se sustituye por la llamada
     a la función macro. Una sustitución puede acelerar futuras
     evaluaciones de la expresión, bajo el coste que implica tener que
     almacenar la expansión.

    `false'
          La expansión de una función macro no se sustituye por la
          llamada a la función macro.

    `expand'
          La primera vez que se evalúa una llamada a función macro se
          almacena la expansión. De esta manera la expansión no se
          recalcula en llamadas posteriores; cualesquiera efectos
          laterales (como `print' o asignaciones a variables globales)
          tan solo tienen lugar la primera vez que la función macro es
          evaluada. La expansión en una expresión no afecta a otras
          expresiones que llamen a la misma función macro.

    `displace'
          La primera vez que se evalúa una llamada a una función macro,
          la expansión se sustituye por la llamada, modificando así la
          expresión desde la que se hizo la llamada a la función macro.
          La expansión no se recalcula en llamadas posteriores;
          cualesquiera efectos laterales tan solo tienen lugar la
          primera vez que la función macro es evaluada. La expansión en
          una expresión no afecta a otras expresiones que llamen a la
          misma función macro.

     Ejemplos:

     Si `macroexpansion' vale `false', una función macro es llamada
     cada vez que la expresión de llamada es evaluada.

          (%i1) f (x) := h (x) / g (x);
                                            h(x)
          (%o1)                     f(x) := ----
                                            g(x)
          (%i2) g (x) ::= block (print ("x + 99 is equal to", x),
                                 return (x + 99));
          (%o2) g(x) ::= block(print("x + 99 is equal to", x),
                               return(x + 99))
          (%i3) h (x) ::= block (print ("x - 99 is equal to", x),
                                 return (x - 99));
          (%o3) h(x) ::= block(print("x - 99 is equal to", x),
                               return(x - 99))
          (%i4) macroexpansion: false;
          (%o4)                         false
          (%i5) f (a * b);
          x - 99 is equal to x
          x + 99 is equal to x
                                      a b - 99
          (%o5)                       --------
                                      a b + 99
          (%i6) dispfun (f);
                                            h(x)
          (%t6)                     f(x) := ----
                                            g(x)

          (%o6)                         done
          (%i7) f (a * b);
          x - 99 is equal to x
          x + 99 is equal to x
                                      a b - 99
          (%o7)                       --------
                                      a b + 99

     Si `macroexpansion' vale `expand', una función macro tan solo es
     llamada una vez.

          (%i1) f (x) := h (x) / g (x);
                                            h(x)
          (%o1)                     f(x) := ----
                                            g(x)
          (%i2) g (x) ::= block (print ("x + 99 is equal to", x),
                                 return (x + 99));
          (%o2) g(x) ::= block(print("x + 99 is equal to", x),
                               return(x + 99))
          (%i3) h (x) ::= block (print ("x - 99 is equal to", x),
                                 return (x - 99));
          (%o3) h(x) ::= block(print("x - 99 is equal to", x),
                               return(x - 99))
          (%i4) macroexpansion: expand;
          (%o4)                        expand
          (%i5) f (a * b);
          x - 99 is equal to x
          x + 99 is equal to x
                                      a b - 99
          (%o5)                       --------
                                      a b + 99
          (%i6) dispfun (f);
                                            h(x)
          (%t6)                     f(x) := ----
                                            g(x)

          (%o6)                         done
          (%i7) f (a * b);
                                      a b - 99
          (%o7)                       --------
                                      a b + 99

     Si `macroexpansion' vale `expand', una función macro es llamada
     una vez y la expresión de llamada se modifica.

          (%i1) f (x) := h (x) / g (x);
                                            h(x)
          (%o1)                     f(x) := ----
                                            g(x)
          (%i2) g (x) ::= block (print ("x + 99 is equal to", x), return (x + 99));
          (%o2) g(x) ::= block(print("x + 99 is equal to", x),
                                                            return(x + 99))
          (%i3) h (x) ::= block (print ("x - 99 is equal to", x), return (x - 99));
          (%o3) h(x) ::= block(print("x - 99 is equal to", x),
                                                            return(x - 99))
          (%i4) macroexpansion: displace;
          (%o4)                       displace
          (%i5) f (a * b);
          x - 99 is equal to x
          x + 99 is equal to x
                                      a b - 99
          (%o5)                       --------
                                      a b + 99
          (%i6) dispfun (f);
                                           x - 99
          (%t6)                    f(x) := ------
                                           x + 99

          (%o6)                         done
          (%i7) f (a * b);
                                      a b - 99
          (%o7)                       --------
                                      a b + 99


 -- Variable opcional: mode_checkp
     Valor por defecto: `true'

     Cuando `mode_checkp' vale `true', `mode_declare' chequea los modos
     de las variables con valores asignados.


 -- Variable opcional: mode_check_errorp
     Valor por defecto: `false'

     Cuando `mode_check_errorp' vale `true', `mode_declare' llama a
     error.


 -- Variable opcional: mode_check_warnp
     Valor por defecto: `true'

     Cuando `mode_check_warnp' vale `true', se detallan los errores de
     modo.


 -- Función: mode_declare (<y_1>, <modo_1>, ..., <y_n>, <modo_n>)
     La función `mode_declare' se utiliza para declarar los modos de
     variables y funciones para la ulterior traducción a Lisp o
     compilación de funciones. Se coloca habitualmente al comienzo de
     la definición de una función, de un script en Maxima o se ejecuta
     en tiempo real.

     Los argumentos de `mode_declare' son pares formados por una
     variable y un modo, el cual debe ser `boolean', `fixnum',
     `number', `rational' o `float'. Cada variable puede ser sustituida
     por una lista de variables, en cuyo caso todas ellas tendrán el
     mismo modo.

     Código numérico que utilice arreglos puede ejecutarse más rápido
     declarando el tamaño que va a ocupar el arreglo, como en:

          mode_declare (array (a [10, 10]), float)

     para un arreglo de números en coma flotante de dimensiones 10 x 10.

     Se puede declarar el modo del resultado de una función poniendo
     `function (f_1, f_2, ...)' como argumento; aquí `f_1', `f_2', ...
     son los nombres de las funciones. Por ejemplo, la expresión

          mode_declare ([function (f_1, f_2, ...)], fixnum)

     declara que el valor a devolver por  `f_1', `f_2', ... son enteros
     de modo "single-word".

     El nombre `modedeclare' es sinónimo de `mode_declare'.


 -- Función: mode_identity (<arg_1>, <arg_2>)
     Es una forma especial usada con `mode_declare' y `macros' para
     declarar, por ejemplo, una lista de listas de números.


 -- Función: remfunction (<f_1>, ..., <f_n>)
 -- Función: remfunction (all)
     Desliga las definiciones de función de sus símbolos <f_1>, ...,
     <f_n>.  Los argumentos pueden ser nombres de funciones ordinarias
     (creadas con `:=' o `define') o de funciones macro (creadas con
     `::=').

     La instrucción `remfunction (all)' desliga todas las definiciones
     de funciones.

     La función `remfunction' no evalúa sus argumentos.

     La función `remfunction' devuelve una lista con los símbolos para
     los que la definición de función fue desligada. Devuelve `false'
     en el lugar de cualquier símbolo para el que no hay función
     definida.

     La función `remfunction' no se puede aplicar a arrays de funciones
     ni a funciones subindicadas. Sí es aplicable en tales casos la
     función `remarray'.

 -- Variable opcional: savedef
     Valor por defecto: `true'

     Si `savedef' vale `true', se mantiene la versión Maxima de una
     función definida por el usuario cuando ésta se traduce, lo que
     permite mostrar su código con `dispfun' y que la función pueda ser
     editada.

     Si `savedef' vale `false', los nombres de las funciones traducidas
     se eliminan de la lista `functions'.


 -- Variable opcional: transcompile
     Valor por defecto: `true'

     Si `transcompile' vale `true', `translate' y `translate_file'
     generan declaraciones para hacer el código traducido más apto para
     la compilación.

     La función `compfile' hace la asignación `transcompile: true'.


 -- Función: translate (<f_1>, ..., <f_n>)
 -- Función: translate (functions)
 -- Función: translate (all)
     Traduce las funciones definidas por el usuario <f_1>, ..., <f_n>
     del lenguaje de Maxima a Lisp y evalúa las traducciones Lisp.
     Normalmente las funciones traducidas se ejecutan más rapidamente
     que las originales.

     Las llamadas `translate (all)' o `translate (functions)' traducen
     todas las funciones de usuario.

     Las funciones a ser traducidas deberían incluir una llamada a
     `mode_declare' al comienzo siempre que sea posible, a fin de
     producir código más eficiente. Por ejemplo:

          f (x_1, x_2, ...) := block ([v_1, v_2, ...],
              mode_declare (v_1, modo_1, v_2, modo_2, ...), ...)

     donde <x_1>, <x_2>, ... son los parámetros que se pasan a la
     función y <v_1>, <v_2>, ... son las variables locales.

     Los nombres de las funciones traducidas son eliminados de la lista
     `functions' si `savedef' vale `false' (ver más abajo) y son
     añadidos a las listas `props'.

     Las funciones no deberían ser traducidas hasta no estar
     completamente depuradas.

     Se supone que las expresiones están simplificadas; en caso de no
     estarlo, se generará código correcto pero ineficiente. Así, el
     usuario no debería asignar a `simp' el valor `false', el cual
     inhibe la simplificación de la expresión a ser traducida.

     Cuando la variable `translate' vale `true', se traducen
     automáticamente las funciones de usuario a Lisp.

     Nótese que las funciones traducidas puede que no se ejecuten
     exactamente igual a como lo hacían antes de la traducción, debido
     a posibles incompatibilidades entre las versiones de Maxima y
     Lisp. En general, la función `rat' con más de un argumento y la
     función `ratvars' no deberían utilizarse si algunas de las
     variables son declaradas como expresiones racionales canónicas
     (CRE) mediante `mode_declare'. Además, la asignación  `prederror:
     false' no traducirá.

     Si `savedef' vale `true', entonces la versión de Maxima de una
     función de usuario permanecerá cuando la función sea traducida por
     `translate'. Con esto se hace posible que se muestre la definición
     llamando a `dispfun' y que la función sea editada.

     Si `transrun' vale `false' entonces las versiones interpretadas de
     todas las funciones serán ejecutadas en lugar de las versiones
     traducidas.

     El resultado devuelto por `translate' es una lista con los nombres
     de las funciones traducidas.


 -- Función: translate_file (<nombre_fichero_maxima>)
 -- Función: translate_file (<nombre_fichero_maxima>,
          <nombre_fichero_lisp>)
     Traduce un fichero en código Maxima a un fichero en código Lisp.
     La función `translate_file' devuelve una lista con los nombres de
     tres ficheros: el nombre del ficheero en Maxima, el nombre del
     fichero en Lisp y el nombre del fichero que contiene información
     adicional sobre la traducción. La función `translate_file' evalúa
     sus argumentos.

     La llamada `translate_file ("foo.mac"); load("foo.LISP")' es lo
     mismo que `batch ("foo.mac")', excepto por la presencia de ciertas
     restricciones, como el uso de `''' y `%', por ejemplo.

     La llamada `translate_file (<nombre_fichero_maxima>)' traduce un
     fichero en Maxima, <nombre_fichero_maxima>, a otro en Lisp de
     nombre similar. Por ejemplo, `foo.mac' se traduce en `foo.LISP'.
     El nombre del fichero en Maxima puede incluir el nombre de un
     directorio, en cuyo caso el fichero de salida Lisp se guardará en
     el mismo directorio desde el que se leyó la fuente Maxima.

     La llamada `translate_file (<nombre_fichero_maxima>,
     <nombre_fichero_lisp>)' traduce el fichero Maxima
     <nombre_fichero_maxima> en el fichero Lisp <nombre_fichero_lisp>.
     La función `translate_file' ignora la extensión del fichero, en
     caso de que exista, de `nombre_fichero_lisp'; la extensión del
     fichero de salida Lisp  será invariablemente `LISP'. El nombre del
     fichero Lisp puede incluir la ruta del directorio, en cuyo caso se
     almacenará en el directorio especificado.

     La función `translate_file' también escribe un fichero de mensajes
     de avisos del traductor con diversos niveles de gravedad. La
     extensión de este fichero es `UNLISP'. Este fichero puede contener
     información valiosa, aunque de difícil interpretación, para
     detectar fallos en el código traducido. El fichero `UNLISP' se
     guarda siempre en el mismo directorio desde el que se leyó la
     fuente de Maxima.

     La función `translate_file' emite código Lisp que incluye algunas
     declaraciones y definiciones que entran en efecto tan pronto como
     el código Lisp es compilado. Véase `compile_file' para más
     información sobre este particular.

     Véanse también `tr_array_as_ref', `tr_bound_function_applyp',
     `tr_exponent', `tr_file_tty_messagesp',
     `tr_float_can_branch_complex', `tr_function_call_default',
     `tr_numer', `tr_optimize_max_loop', `tr_semicompile',
     `tr_state_vars', `tr_warnings_get', `tr_warn_bad_function_calls',
     `tr_warn_fexpr', `tr_warn_meval', `tr_warn_mode',
     `tr_warn_undeclared', y `tr_warn_undefined_variable'.


 -- Variable opcional: transrun
     Valor por defecto: `true'

     Si `transrun' vale `false' entonces se ejecutarán las versiones
     interpretadas de todas las funciones, en lugar de las versiones
     traducidas.


 -- Variable opcional: tr_array_as_ref
     Valor por defecto: `true'

     Si `translate_fast_arrays' vale `false', referencias de arreglos
     en el código Lisp creadas por  `translate_file' se ven afectadas
     por `tr_array_as_ref'.

     El valor de la variable `tr_array_as_ref' no tiene ningún efecto
     cuando `translate_fast_arrays' vale `true'.


 -- Variable opcional: tr_bound_function_applyp
     Valor por defecto: `true'

     Si `tr_bound_function_applyp' vale `true', Maxima envía un aviso
     si encuentra una variable con valor asignado que está siendo
     utilizada como una función. `tr_bound_function_applyp' no influye
     en el código generado bajo estas circunstancias.

     Por ejemplo, una expresión como `g (f, x) := f (x+1)' provocará un
     mensaje de esta naturaleza.


 -- Variable opcional: tr_file_tty_messagesp
     Valor por defecto: `false'

     Si `tr_file_tty_messagesp' vale `true', los mensajes generados por
     `translate_file' durante la traducción de un fichero se muestran
     en la consola y se insertan en el fichero UNLISP.  Si vale
     `false', los mensajes sobre la traducción del fichero sólo se
     incorporan al fichero UNLISP.


 -- Variable opcional: tr_float_can_branch_complex
     Valor por defecto: `true'

     Le dice al traductor de Maxima a Lisp que las funciones `acos',
     `asin', `asec' y `acsc' pueden devolver valores complejos.


 -- Variable opcional: tr_function_call_default
     Valor por defecto: `general'

     El valor `false' significa llama a `meval', `expr' significa que
     Lisp asignó los argumentos de la función,  `general', el valor por
     defecto, devuelve código apropiado para `mexprs' y `mlexprs' pero
     no para `macros'. La opción `general' asegura que las asignaciones
     de las variables son correctas en el código compilado. En modo
     `general', cuando se traduce F(X), si F es una variable con valor,
     entonces se entiende que se quiere calcular `apply (f, [x])', y
     como tal se traduce, con el apropiado aviso. No es necesario
     desactivar esto. Con los valores por defecto la falta de mensajes
     de aviso implica compatibilidad completa entre el código traducido
     y compilado con el interpretado por Maxima.


 -- Variable opcional: tr_numer
     Valor por defecto: `false'

     Si `tr_numer' vale `true' se utilizan las propiedades numéricas en
     aquellos átomos que las posean, como en  `%pi'.


 -- Variable opcional: tr_optimize_max_loop
     Valor por defecto: 100

     El valor de `tr_optimize_max_loop' es el número máximo de veces
     que el traductor repetirá la macro-expansión y la optimización en
     el tratamiento de una expresión.


 -- Variable opcional: tr_semicompile
     Valor por defecto: `false'

     Si `tr_semicompile' vale `true', las salidas de `translate_file' y
     `compfile' serán macro-expandidas pero no compiladas a código
     máquina por el compilador de Lisp.


 -- Variable del sistema: tr_state_vars
     Valor por defecto:

          [transcompile, tr_semicompile, tr_warn_undeclared, tr_warn_meval,
          tr_warn_fexpr, tr_warn_mode, tr_warn_undefined_variable,
          tr_function_call_default, tr_array_as_ref,tr_numer]

     Es la lista de variables que afectan la forma en que se obtiene la
     salida del código traducido. Esta información es útil para
     desarrolladores que pretendan corregir posibles fallos del
     traductor. Comparando el código traducido con el que se debería
     obtener bajo unas ciertas condiciones, es posible hacer el
     seguimiento de los fallos.


 -- Función: tr_warnings_get ()
     Devuelve una lista con los avisos dados por el traductor.


 -- Variable opcional: tr_warn_bad_function_calls
     Valor por defecto: `true'

     Devuelve un aviso cuando se hacen llamadas a funciones que quizás
     no sean correctas debido a declaraciones inapropiadas realizadas
     durante la traducción.


 -- Variable opcional: tr_warn_fexpr
     Valor por defecto: `compfile'

     Devuelve un aviso si se encuentra con alguna FEXPR. Las FEXPR no
     deberían aparecer en el código traducido.


 -- Variable opcional: tr_warn_meval
     Valor por defecto: `compfile'

     Devuelve un aviso si la función `meval' es llamada.  Si `meval' es
     invocada, es señal de la presencia de problemas en la traducción.


 -- Variable opcional: tr_warn_mode
     Valor por defecto: `all'

     Devuelve un aviso cuando a las variables se les asignan valores
     incompatibles con su modo.


 -- Variable opcional: tr_warn_undeclared
     Valor por defecto: `compile'

     Determina cuando enviar mensajes sobre variables no declaradas.


 -- Variable opcional: tr_warn_undefined_variable
     Valor por defecto: `all'

     Devuelve un aviso cuando se detectan variables globales no
     definidas.


 -- Función: compile_file (<nombre_fich>)
 -- Función: compile_file (<nombre_fich>, <nombre_fich_compilado>)
 -- Función: compile_file (<nombre_fich>, <nombre_fich_compilado>,
          <nombre_fich_lisp>)
     Traduce el fichero Maxima <nombre_fich> a Lisp, ejecuta el
     compilador de Lisp y, en caso de ser exitosa la compilación, carga
     el código compilado en Maxima.

     La función `compile_file' devuelve una lista con los nombres de
     tres ficheros: el fichero original en Maxima, la traducción Lisp,
     notas sobre la traducción y el código compilado. Si la compilación
     falla, el cuarto elemento es  `false'.

     Algunas declaraciones y definiciones entran en efecto tan pronto
     como el código Lisp es compilado (sin cargar el código compilado).
     Éstas incluyen funciones definidas con el operador `:=', macros
     definidas con el operador `::=', `alias', `declare',
     `define_variable',  `mode_declare' y `infix', `matchfix', `nofix',
     `postfix', `prefix' y `compfile'.

     Asignaciones y llamadas a funciones no se evalúan hasta que el
     código compilado es cargado. En particular, dentro del fichero
     Maxima, asignaciones a los controles ("flags") de traducción
     (`tr_numer', etc.) no tienen efecto durante la traducción.

     El <nombre_fich> no puede contener sentencias del tipo `:lisp'.

     La función `compile_file' evalúa sus argumentos.


 -- Función: declare_translated (<f_1>, <f_2>, ...)
     Cuando se traduce un fichero de código Maxima a Lisp, es
     importante para el traductor saber qué funciones de las que están
     en el fichero van a ser llamadas como traducidas o compiladas, y
     cuáles son simplemente funciones Maxima o que no están definidas.
     Se genera el código `(MFUNCTION-CALL fn arg1 arg2 ...)' cuando el
     traductor no sabe si `fn' va a ser una función lisp.



File: maxima.info,  Node: Programación,  Next: Depurado,  Prev: Definición de Funciones,  Up: Top

37 Programación
***************

* Menu:

* Lisp y Maxima::
* Recolector de basura::
* Introducción a la programación::
* Funciones y variables para la programación::


File: maxima.info,  Node: Lisp y Maxima,  Next: Recolector de basura,  Prev: Programación,  Up: Programación

37.1 Lisp y Maxima
==================

Maxima fue escrito en Lisp, y es muy fácil tener acceso a funciones y
variables Lisp desde Maxima y viceversa.  Los símbolos Lisp y los
símblos Maxima están claramente diferenciados por medio de una
convención de nombres.  Un símblo Lisp el cual comienza con un signo
pesos `$' corresponde a un símbolo Maxima sin el signo pesos.  Un
símbolo Maxima el cual comienza con un signo de cierre de interrogación
`?' corresponde a un símbolo Lisp sin dicho signo.  Por ejemplo, el
símbolo Maxima `foo' corresponde a el símbolo Lisp `$FOO', mientras que
el símbolo Maxima `?foo' corresponde a el símbolo Lisp `FOO', tenga en
cuenta que `?foo' esta escrito sin espacio entre `?' y `foo'; de otra
manera se estaría invocando a `describe ("foo")'.

El guión `-', asterisco `*', u otros carácteres especiales en símbolos
Lisp deben ser escritos mediante un backslash `\' si aparecen en código
Maxima.  Por ejemplo, el identificador Lisp `*foo-bar*' se debe
escribir `?\*foo\-bar\*' en Maxima.

Se puede ejecutar código Lisp desde una sesión de Maxima.  Una línea
Lisp (que contenga una o más formas) puede ser ejecutada por medio de
un comando especial `:lisp'. Por ejemplo,

     (%i1) :lisp (foo $x $y)

se llama a la función Lisp `foo' con variables Maxima `x' y `y' como
argumentos.  La instrucción `:lisp' puede aparecer en el prompt
interactivo o en un archivo que sea procesado por `batch' o `demo',
pero no en un archivo que sea procesado por `load', `batchload',
`translate_file' o `compile_file'.

La función `to_lisp()' abre una sesión interactiva con el interprete
Lisp.  Escribiendo `(to-maxima)' se cierra la sesión con Lisp y se
retorna a Maxima.

Las funciones y variables Lisp las cuales esten para ser visibles en
Maxima como funciones y variables con nombres oridinarios (sin una
puntuación especial), deben tener nombres tipo Lisp que comiencen con
el signo pesos `$'.

Maxima distingue entre letras minúsculas y mayúsculas en
identificadores.  Existen algunas reglas que gobiernan la traducción de
nombres entre Lisp y Maxima.

  1. Un identificador Lisp que no se encuentra encerrado en barras
     verticales corresponde a un identificador Maxima en minúscula.
     Que el idenficador Lisp esté en mayúscula, minúscula o una
     combinación de ambas, no afecta en nada.  Por ejemplo, los
     identificadores Lisp `$foo', `$FOO', y `$Foo', todos corresponden
     al identificador Maxima `foo'. Esto es así porque `$foo', `$FOO' y
     `$Foo' se convierten por defecto al símbolo `$FOO' de Lisp.

  2. Un identificador Lisp el cual se encuentre todo en mayúscula o
     todo en minúscula y encerrado entre barras verticales corresponde
     a un identicador Maxima con el caso contrario.  Esto es, de
     mayúsculas cambia a minúsculas y de minúsculas cambia a mayúsculas.
     E.g., el identificador Lisp `|$FOO|' y `|$foo|' corresponden los
     identificadores Maxima `foo' y `FOO', respectivamente.

  3. Un identificador Lisp el cual esta escrito mezclando letras
     mayúsculas y minúsculas y se encuentra entre barras verticales
     corresponde a un identificador Maxima con la misma escritura.
     E.g., el identificador Lisp `|$Foo|' corresponde a el
     identificador Maxima `Foo'.

La macro Lisp `#$' permite el uso de expresiones Maxima dentro de
código Lisp. `#$<expr>$' extiende a una expresión Lisp equivalente a la
expresión Maxima <expr>.

     (msetq $foo #$[x, y]$)

Esto tiene el mismo efecto que:

     (%i1) foo: [x, y];

La función Lisp `displa' imprime una expresión en formato Maxima.

     (%i1) :lisp #$[x, y, z]$
     ((MLIST SIMP) $X $Y $Z)
     (%i1) :lisp (displa '((MLIST SIMP) $X $Y $Z))
     [x, y, z]
     NIL

Las funciones definidas en Maxima no son funciones Lisp ordinarias.  La
función Lisp `mfuncall' llama a una función Maxima.  Por ejemplo:

     (%i1) foo(x,y) := x*y$
     (%i2) :lisp (mfuncall '$foo 'a 'b)
     ((MTIMES SIMP) A B)

Algunas funciones Lisp son compartidas en el paquete Maxima, las cuales
se listan a continuación:

`complement', `continue', `//', `float', `functionp', `array', `exp',
`listen', `signum', `atan', `asin', `acos', `asinh', `acosh', `atanh',
`tanh', `cosh', `sinh', `tan', `break', y `gcd'.


File: maxima.info,  Node: Recolector de basura,  Next: Introducción a la programación,  Prev: Lisp y Maxima,  Up: Programación

37.2 Recolector de basura
=========================

La computación simbólica tiende a crear una buena cantidad de basura
(resultados temporales que ya no serán utilizados), y un manejo
efectivo de esto puede ser crucial para el término exitoso de algunos
programas.

Bajo GCL (GNU Common Lisp), en aquellos sistemas UNIX donde la llamada
al sistema mprotect está disponible (incluyendo SUN OS 4.0 y algunas
variantes de BSD) se dispone de un recolector de basura estratificado.
Véase la documentación de GCL para ALLOCATE y GBC. A nivel Lisp,
ejecutando (setq si::*notify-gbc* t) pemitirá determinar qué áreas
necesitan más espacio.

En cuanto al resto de Lisps bajo los que funciona Maxima, se remite al
lector a la documentación correspondiente para controlar la recolección
de basura.


File: maxima.info,  Node: Introducción a la programación,  Next: Funciones y variables para la programación,  Prev: Recolector de basura,  Up: Programación

37.3 Introducción a la programación
===================================

Maxima dispone de los bucles `do' para hacer iteraciones, así como
estructuras más primitivas del estilo de `go'.



Local Variables:
coding: iso-8859-1
End:
