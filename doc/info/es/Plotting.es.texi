@c English version 2011-10-03
@menu
* Introducci@'on a los gr@'aficos::
* Formatos gr@'aficos::
* Funciones y variables para gr@'aficos::
* Opciones gr@'aficas::
* Opciones para Gnuplot::
* Funciones para el formato Gnuplot_pipes::
@end menu







@node Introducci@'on a los gr@'aficos, Formatos gr@'aficos, Gr@'aficos, Gr@'aficos
@section Introducci@'on a los gr@'aficos


Maxima utiliza un programa gr@'afico externo para hacer figuras (v@'ease la secci@'on
Formatos gr@'aficos). Las funciones gr@'aficas calculan un conjunto de puntos y
se los pasa al programa gr@'afico, junto con una serie de instrucciones. Estas
instrucciones pueden pasarse al programa gr@'afico, bien a trav@'es de una
tuber@'{@dotless{i}}a (@i{pipe}, en ingl@'es), bien llamando al programa, junto con
el nombre del fichero en el que se almacenan los datos. Al fichero de datos se le
da el nombre @code{maxout.interface}, donde @code{interface} es el nombre del
intefaz a ser utilizado (gnuplot, xmaxima, mgnuplot o gnuplot_pipes).

El fichero @code{maxout.interface}, si se utiliza, se almacena en la carpeta
especificada por la variable @var{maxima_tempdir}, cuyo valor se puede cambiar
por una cadena de texto que represente la ruta a una carpeta v@'alida, en la
que Maxima pueda guardar nuevos ficheros.

Una vez creado el gr@'afico, el fichero @code{maxout.interface} puede ejecutarse
nuevamente con el programa externo adecuado. Si una instrucci@'on gr@'afica de Maxima
falla, este fichero puede ser inspeccionado a fin de encontrar el origen del problema.

Junto con las funciones gr@'aficas descritas en esta secci@'on, el paquete @code{draw}
a@~nade otras funcionalidades. N@'otese que algunas opciones gr@'aficas se llaman igual
en ambos contextos gr@'aficos, pero con diferente sintaxis; para acceder a la informaci@'on
de estas opciones en el @'ambito de @code{draw}, es necesario teclear @code{?? opc}, donde
@code{opc} es el nombre de la opci@'on.







@node Formatos gr@'aficos, Funciones y variables para gr@'aficos, Introducci@'on a los gr@'aficos, Gr@'aficos
@section Formatos gr@'aficos

Actualmente, Maxima utiliza dos programas gr@'aficos externos: Gnuplot y Xmaxima.
Existen varios formatos diferentes para estos programas, que pueden seleccionarse
con la opci@'on @code{plot_format} (v@'ease la secci@'on Opciones gr@'aficas).

Los formatos gr@'aficos se listan a continuaci@'on:

@itemize @bullet
@item
@strong{gnuplot} (formato por defecto para Windows)

Se utiliza para ejecutar el programa externo Gnuplot, el cual debe
estar instalado en el sistema. Las instrucciones gr@'aficas y los
datos se almacenan en el fichero @code{maxout.gnuplot}.

@item
@strong{gnuplot_pipes} (formato por defecto para plataformas distintas de Windows)

Este formato no est@'a disponible en plataformas Windows. Es similar al
formato @code{gnuplot}, excepto por el hecho de que las instrucciones son
enviadas a Gnuplot por una tuber@'{@dotless{i}}a, mientras que los datos
se almacenan en el fichero @code{maxout.gnuplot_pipes}. Mediante esta 
t@'ecnica, un @'unico proceso de Gnuplot se mantiene activo y sucesivos
gr@'aficos son enviados al mismo proceso, a menos que la tuber@'{@dotless{i}}a
a Gnuplot se cierre con la funci@'on @code{gnuplot_close()}. Cuando se
utiliza este formato, se puede utilizar la funci@'on @code{gnuplot_replot}
para modificar un gr@'afico que ya hab@'{@dotless{i}}a sido representado
previamente en la pantalla (v@'ease @code{gnuplot_replot}).

Este formato deber@'{@dotless{i}}a ser utilizado @'unicamente cuando
se representen los gr@'aficos por pantalla; para gr@'aficos almacenados
en ficheros, mejor utilizar el formato @code{gnuplot}.

@item
@strong{mgnuplot}

Mgnuplot es una interfaz para Gnuplot basada en Tk. Se incluye en la 
distribuci@'on de Maxima. Mgnuplot ofrece una interface gr@'afica de 
usuario rudimentaria para gnuplot, pero tiene algunas mejoras 
respecto de la interface propia de gnuplot. Mgnuplot requiere de una 
instalaci@'on externa de Gnuplot y de Tcl/Tk.

@item
@strong{xmaxima}

Xmaxima es un interfaz gr@'afico Tcl/Tk de Maxima, que tambi@'en se
puede utilizar para representar gr@'aficos cuando Maxima se ejecuta
desde la consola o desde otros interfaces. Para utilizar este formato,
debe estar instalado junto con Maxima. Si Maxima se ejecuta desde el
propio Xmaxima, las instrucciones gr@'aficas y los datos se env@'{@dotless{i}}an
por el mismo canal de comunicaci@'on que se establece entre Maxima y
Xmaxima (un  @i{socket}). Cuando Maxima se ejecuta desde una consola 
o desde otro interfaz, las instrucciones gr@'aficas y los datos
se almacenan en un fichero de nombre @code{maxout.xmaxima}, que le es
pasado a Xmaxima como argumento

En versiones anteriores, este formato se llamaba @code{openmath}, cuyo
nombre se sigue aceptando como sin@'onimo de @code{xmaxima}.
@end itemize







@node Funciones y variables para gr@'aficos, Opciones gr@'aficas, Formatos gr@'aficos, Gr@'aficos
@section Funciones y variables para gr@'aficos



@deffn {Funci@'on} contour_plot (@var{expr}, @var{x_range}, @var{y_range}, @var{options}, ...)

Dibuja las curvas de nivel @var{expr}
en el rect@'angulo @var{x_range} por @var{y_range}.
Cualesquiera otros argumentos adicionales se tratan como en @code{plot3d}.

@code{contour_plot} s@'olo trabaja cuando se utilizan @code{gnuplot} o @code{gnuplot_pipes}.

V@'ease tambi@'en @code{implicit_plot}.

Ejemplos:

@c ===beg===
@c contour_plot (x^2 + y^2, [x, -4, 4], [y, -4, 4])$
@c ===end===
@example
(%i1) contour_plot (x^2 + y^2, [x, -4, 4], [y, -4, 4])$
@end example

@ifnotinfo
@image{../figures/contour1,8cm}
@end ifnotinfo

@c ===beg===
@c F(x, y) := x^3 + y^2;
@c contour_plot (F, [u, -4, 4], [v, -4, 4])$
@c ===end===
@example
@group
(%i1) F(x, y) := x^3 + y^2;
                                   3    2
(%o1)                  F(x, y) := x  + y
@end group
(%i2) contour_plot (F, [u, -4, 4], [v, -4, 4])$
@end example

@ifnotinfo
@image{../figures/contour2,8cm}
@end ifnotinfo

Se pueden a@~nadir cualesquiera opciones que acepte @code{plot3d};
por ejemplo, la opci@'on @code{legend} con un valor @code{false},
para eliminar la leyenda. Gnuplot muestra por defecto tres 
l@'{@dotless{i}}neas de contorno, pero para aumentar el
n@'umero de niveles es necesario a@~nadir alg@'un c@'odigo nativo
de Gnuplot:

@c ===beg===
@c contour_plot (u^3 + v^2, [u, -4, 4], [v, -4, 4], 
@c               [legend,false],
@c               [gnuplot_preamble, "set cntrparam levels 12"])$
@c ===end===
@example
@group
(%i1) contour_plot (u^3 + v^2, [u, -4, 4], [v, -4, 4], 
                    [legend,false],
                    [gnuplot_preamble, "set cntrparam levels 12"])$
@end group
@end example

@ifnotinfo
@image{../figures/contour3,8cm}
@end ifnotinfo

@end deffn



@deffn {Funci@'on} get_plot_option (@var{keyword}, @var{index})

Devuelve el valor actual de la opci@'on @var{keyword} almacenada
en la variable global @code{plot_options}. Si @var{index} toma
el valor 1, devuelve el propio valor de @var{keyword}; si vale 2
le a@~nade el primer par@'ametro, y as@'{@dotless{i}} sucesivamente.

V@'eanse tambi@'en @code{plot_options}, @code{set_plot_option} y la
secci@'on Opciones gr@'aficas.

@end deffn



@deffn {Funci@'on} make_transform ([@var{var1}, @var{var2}, @var{var3}], @var{fx}, @var{fy}, @var{fz})

Devuelve una funci@'on que se puede utilizar con la opci@'on @code{transform_xy}
de @code{plot3d}. Las tres variables ficticias @var{var1}, @var{var2} y @var{var3} 
representan las tres variables de la funci@'on @code{plot3d}, las dos primeras
independientes y la tercera dependiente. Las tres funciones @var{fx}, @var{fy} y
@var{fz} deben depender solo de las tres variables anteriores y retornar las
correspondientes x, y, z que se deben dibujar. Hay dos transformaciones
predefinidas: @code{polar_to_xy} y @code{spherical_to_xyz}.

V@'eanse @code{polar_to_xy} y @code{spherical_to_xyz}.

@end deffn



@deffn {S@'{@dotless{i}}mbolo del sistema} polar_to_xy

Cuando a la opci@'on @code{transform_xy} de @code{plot3d} se le pasa el valor 
@code{polar_to_xy}, se interpretar@'an las dos primeras variables independientes como 
polares, transform@'andolas luego a coordenadas cartesianas.

@end deffn




@deffn  {Funci@'on} plot2d (@var{plot}, @var{x_range}, @dots{}, @var{options}, @dots{})
@deffnx {Funci@'on} plot2d ([@var{plot_1}, @dots{}, @var{plot_n}], @dots{}, @var{options}, @dots{})
@deffnx {Funci@'on} plot2d ([@var{plot_1}, @dots{}, @var{plot_n}], @var{x_range}, @dots{}, @var{options}, @dots{})

Donde @var{plot}, @var{plot_1}, @dots{}, @var{plot_n} pueden ser
expresiones, nombres de funciones o una
lista de cualquiera de las siguientes formas: 
@code{[discrete, [@var{x1}, ..., @var{xn}],
[@var{y1}, ..., @var{yn}]]}, @code{[discrete, [[@var{x1}, @var{y1}],
..., [@var{xn}, ..., @var{yn}]]} o @code{[parametric, @var{x_expr},
@var{y_expr}, @var{t_range}]}.

Muestra un gr@'afico de una o m@'as expresiones como funci@'on de una variable.

La funci@'on @code{plot2d} representa uno o m@'as gr@'aficos en dos
dimensiones. Las expresiones o nombres de funciones que se utilicen para
definir curvas deben depender todas ellas de una @'unica variable @var{var},
siendo obligatorio utilizar @var{x_range} para nombrar la variable y darle sus
valores m@'{@dotless{i}}nimo y m@'aximo usando la siguiente sintaxis: 
@code{[@var{variable}, @var{min}, @var{max}]}.

Un gr@'afico tambi@'en se puede definir de forma discreta o param@'etrica.
La forma discreta se utiliza para dibujar un conjunto de puntos de
coordenadas dadas. Un gr@'afico discreto se define como una lista
que empiezan con la palabra clave @var{discrete} seguida de una o dos
listas de valores num@'ericos. Cuando haya dos listas, ambas deben ser
de igual longitud, la primera se interpreta como la de abscisas y la
segunda de ordenadas. Cuando haya una lista siguiendo la clave @var{discrete},
cada uno de sus elementos debe ser a su vez una lista de solo dos valores,
correspondientes a las coordenadas x e y.

Un gr@'afico param@'etrico se define como una lista que empieza con la
palabra clave @var{parametric}, seguida de dos expresiones o nombres de
funciones y un rango param@'etrico. El rango param@'etrico debe ser una
lista formada con el nombre del par@'ametro seguido de sus valores
m@'{@dotless{i}}nimo y m@'aximo:
@code{[@var{param}, @var{min}, @var{max}]}. El gr@'afico se formar@'a con
los puntos cuyas coordenadas devuelvan las dos expresiones o funciones, 
seg@'un @var{param} aumente desde @var{min} hasta @var{max}.

La especificaci@'on del rango para el eje vertical es opcional y
toma la forma @code{[y, @var{min}, @var{max}]} (@var{y} se utiliza
siempre para el eje vertical). En caso de utilizar esta opci@'on,
el gr@'afico mostrar@'a exactamente ese rango vertical, 
independientemente de los valores alcanzados por los elementos
gr@'aficos. Si no se especifica el rango vertical, se ajustar@'a
a los valores extremos alcanzados por las ordenadas de los puntos
que aparezcan en el gr@'afico.

Cualesquiera otras opciones deben ser listas, comenzando con el
nombre de la opci@'on seguido de uno o m@'as valores. V@'ease
@code{plot_options}.

Si hay varias expresiones para ser dibujadas, se mostrar@'a una leyenda
que identifique a cada una de ellas. Las etiquetas a utilizar pueden
especificarse con la opci@'on @var{legend}. Si no se utiliza esta opci@'on,
Maxima crear@'a etiquetas a partir de las expresiones o nombres de funciones.

Ejemplos:

Dibujando la funci@'on sinusoidal:

@c ===beg===
@c plot2d (sin(x), [x, -%pi, %pi])$
@c ===end===
@example
(%i1) plot2d (sin(x), [x, -%pi, %pi])$
@end example

@ifnotinfo
@image{../figures/plotting2,8cm}
@end ifnotinfo

Si la funci@'on crece r@'apidamente puede ser necesario limitar los
valores del eje vertical:

@c ===beg===
@c plot2d (sec(x), [x, -2, 2], [y, -20, 20])$
@c ===end===
@example
@group
(%i1) plot2d (sec(x), [x, -2, 2], [y, -20, 20])$
plot2d: some values were clipped.
@end group
@end example

@ifnotinfo
@image{../figures/plotting3,8cm}
@end ifnotinfo

El aspecto del gr@'afico puede ser diferente dependiendo del programa
gr@'afico utilizado. Por ejemplo, cuando se desactiva el marco,
Xmaxima dibuja los ejes como flechas:

@c ===beg===
@c plot2d ( x^2-1, [x, -3, 3], [y, -2, 10], 
@c                 [box, false], [plot_format, xmaxima])$
@c ===end===
@example
@group
(%i1) plot2d ( x^2-1, [x, -3, 3], [y, -2, 10],
                      [box, false], [plot_format, xmaxima])$
@end group
@end example

@ifnotinfo
@image{../figures/plotting1,8cm}
@end ifnotinfo

Gr@'afico con escala logar@'{@dotless{i}}tmica:

@c ===beg===
@c plot2d (exp(3*s), [s, -2, 2], [logy])$
@c ===end===
@example
(%i1) plot2d (exp(3*s), [s, -2, 2], [logy])$
@end example

@ifnotinfo
@image{../figures/plotting4,8cm}
@end ifnotinfo

Dibujando funciones especificadas por su nombre:

@c ===beg===
@c F(x) := x^2 $
@c :lisp (defun |$g| (x) (m* x x x))
@c H(x) := if x < 0 then x^4 - 1 else 1 - x^5 $
@c plot2d ([F, G, H], [u, -1, 1], [y, -1.5, 1.5])$
@c ===end===
@example
(%i1) F(x) := x^2 $
@group
(%i2) :lisp (defun |$g| (x) (m* x x x))
$g
@end group
(%i2) H(x) := if x < 0 then x^4 - 1 else 1 - x^5 $
(%i3) plot2d ([F, G, H], [u, -1, 1], [y, -1.5, 1.5])$
@end example

@ifnotinfo
@image{../figures/plotting5,8cm}
@end ifnotinfo

Ejemplo de funci@'on param@'etrica. Curva de la mariposa:

@c ===beg===
@c r: (exp(cos(t))-2*cos(4*t)-sin(t/12)^5)$
@c plot2d([parametric, r*sin(t), r*cos(t), 
@c        [t, -8*%pi, 8*%pi], [nticks, 2000]])$
@c ===end===
@example
(%i1) r: (exp(cos(t))-2*cos(4*t)-sin(t/12)^5)$
(%i2) plot2d([parametric, r*sin(t), r*cos(t), 
             [t, -8*%pi, 8*%pi], [nticks, 2000]])$
@end example

@ifnotinfo
@image{../figures/plotting6,8cm}
@end ifnotinfo

Una circunferencia de dos vueltas y solo siete puntos:

@c ===beg===
@c plot2d ([parametric, cos(t), sin(t),
@c         [t, -2*%pi, 2*%pi], [nticks, 8]])$
@c ===end===
@example
@group
(%i1) plot2d ([parametric, cos(t), sin(t),
              [t, -2*%pi, 2*%pi], [nticks, 8]])$
@end group
@end example

@ifnotinfo
@image{../figures/plotting7,8cm}
@end ifnotinfo

Dibujo de una funci@'on junto con la representaci@'on param@'etrica de una
circunferencia. El tama@~no del gr@'afico se ha ajustado con las opciones x
e y para que la circunferencia no se vea como una elipse. Estos valores
son aceptables para el terminal Postscript utilizado para producir este
gr@'afico, y puede seer necesario adaptar los valores para otros terminales:

@c ===beg===
@c plot2d([[parametric, cos(t), sin(t),
@c         [t,0,2*%pi], [nticks, 80]],
@c         abs(x)], [x,-2,2], [y, -1.5, 1.5])$
@c ===end===
@example
@group
(%i1) plot2d([[parametric, cos(t), sin(t),
              [t,0,2*%pi], [nticks, 80]],
        abs(x)], [x,-2,2], [y, -1.5, 1.5])$
plot2d: some values were clipped.
@end group
@end example

@ifnotinfo
@image{../figures/plotting8,8cm}
@end ifnotinfo

Puntos discretos definiendo separadamente las coordenadas x e y:

@c ===beg===
@c plot2d ([discrete, [10, 20, 30, 40, 50],
@c                    [.6, .9, 1.1, 1.3, 1.4]])$
@c ===end===
@example
@group
(%i1) plot2d ([discrete, [10, 20, 30, 40, 50],
                         [.6, .9, 1.1, 1.3, 1.4]])$
@end group
@end example

@ifnotinfo
@image{../figures/plotting9,8cm}
@end ifnotinfo

Los mismos puntos del ejemplo anterior, pero definiendo una a una las
coordenadas y sin segmentos que unan los puntos:

@c ===beg===
@c plot2d([discrete, [[10, .6], [20, .9], [30, 1.1], 
@c                    [40, 1.3], [50, 1.4]]],
@c                   [style, points])$
@c ===end===
@example
@group
(%i1) plot2d([discrete, [[10, .6], [20, .9], [30, 1.1],
                         [40, 1.3], [50, 1.4]]],
                        [style, points])$
@end group
@end example

@ifnotinfo
@image{../figures/plotting10,8cm}
@end ifnotinfo

En este ejemplo, se guarda una tabla de tres columnas en el
archivo @code{data.txt}, que luego ser@'a le@'{@dotless{i}}do
para representar las dos @'ultimas columnas:

@c ===beg===
@c with_stdout ("data.txt", for x:0 thru 10 do
@c                              print (x, x^2, x^3))$
@c data: read_matrix ("data.txt")$
@c plot2d ([discrete, transpose(data)[2], transpose(data)[3]],
@c   [style,points], [point_type,diamond], [color,red])$
@c ===end===
@example
(%i1) with_stdout ("data.txt", for x:0 thru 10 do 
                                   print (x, x^2, x^3))$
(%i2) data: read_matrix ("data.txt")$
@group
(%i3) plot2d ([discrete, transpose(data)[2], transpose(data)[3]],
  [style,points], [point_type,diamond], [color,red])$
@end group
@end example

@ifnotinfo
@image{../figures/plotting11,8cm}
@end ifnotinfo

Un gr@'afico de datos emp@'{@dotless{i}}ricos junto con su modelo
te@'orico:

@c ===beg===
@c xy: [[10, .6], [20, .9], [30, 1.1], [40, 1.3], [50, 1.4]]$
@c plot2d([[discrete, xy], 2*%pi*sqrt(l/980)], [l,0,50],
@c         [style, points, lines], [color, red, blue],
@c         [point_type, asterisk],
@c         [legend, "experiment", "theory"],
@c         [xlabel, "pendulum's length (cm)"],
@c         [ylabel, "period (s)"])$
@c ===end===
@example
(%i1) xy: [[10, .6], [20, .9], [30, 1.1], [40, 1.3], [50, 1.4]]$
@group
(%i2) plot2d([[discrete, xy], 2*%pi*sqrt(l/980)], [l,0,50],
        [style, points, lines], [color, red, blue],
        [point_type, asterisk],
        [legend, "experiment", "theory"],
        [xlabel, "pendulum's length (cm)"],
        [ylabel, "period (s)"])$
@end group
@end example

@ifnotinfo
@image{../figures/plotting12,8cm}
@end ifnotinfo

@end deffn




@deffn  {Funci@'on} plot3d (@var{expr}, @var{x_range}, @var{y_range}, @dots{}, @var{options}, @dots{})
@deffnx {Funci@'on} plot3d ([@var{expr_1}, @dots{}, @var{expr_n}], @var{x_range}, @var{y_range}, @dots{}, @var{options}, @dots{})

Dibuja una o m@'as superficies definidas como funciones de dos variables o en forma
param@'etrica

Las funciones a dibujar se pueden especificar como expresiones o nombres de funciones.
Puede utilizarse el rat@'on para hacer girar el gr@'afico y observarlo desde
distintos @'angulos.

Ejemplos:

Representaci@'on de una funci@'on:

@c ===beg===
@c plot3d (2^(-u^2 + v^2), [u, -3, 3], [v, -2, 2])$
@c ===end===
@example
(%i1) plot3d (2^(-u^2 + v^2), [u, -3, 3], [v, -2, 2])$
@end example

@ifnotinfo
@image{../figures/plotting13,8cm}
@end ifnotinfo

Uso de la opci@'on z para acotar una funci@'on que tiende a infinito
(en este caso, la funci@'on tiende a menos infinito en los ejes
x e y):

@c ===beg===
@c plot3d ( log ( x^2*y^2 ), [x, -2, 2], [y, -2, 2], [z, -8, 4],
@c          [palette, false], [color, magenta, blue])$
@c ===end===
@example
(%i1) plot3d ( log ( x^2*y^2 ), [x, -2, 2], [y, -2, 2], [z, -8, 4],
               [palette, false], [color, magenta, blue])$
@end example

@ifnotinfo
@image{../figures/plotting14,8cm}
@end ifnotinfo

Los valores infinitos de z se pueden obviar eligiendo una ret@'{@dotless{i}}cula
que no coincida con las as@'{@dotless{i}}ntotas; este ejemplo tambi@'en muestra
c@'omo seleccionar las paletas predefinidas, en este caso la n@'umero 4:

@c ===beg===
@c plot3d (log (x^2*y^2), [x, -2, 2], [y, -2, 2],
@c    [grid, 29, 29],
@c    [palette, get_plot_option(palette,5)])$
@c ===end===
@example
@group
(%i1) plot3d (log (x^2*y^2), [x, -2, 2], [y, -2, 2], 
         [grid, 29, 29],
         [palette, get_plot_option(palette,5)])$
@end group
@end example

@ifnotinfo
@image{../figures/plotting15,8cm}
@end ifnotinfo

Dos superficies en el mismo gr@'afico, compartiendo el mismo dominio; en 
Gnuplot, ambas superfifies comparten la misma paleta:

@c ===beg===
@c plot3d ([2^(-x^2 + y^2), 4*sin(3*(x^2+y^2))/(x^2+y^2),
@c         [x, -3, 3], [y, -2, 2]])$
@c ===end===
@example
(%i1) plot3d ([2^(-x^2 + y^2), 4*sin(3*(x^2+y^2))/(x^2+y^2),
              [x, -3, 3], [y, -2, 2]])$
@end example

@ifnotinfo
@image{../figures/plotting16,8cm}
@end ifnotinfo

Las mismas superficies, pero con diferentes dominios; en Xmaxima
cada superficies usa una paleta diferente, elegida de la lista
definida por la opci@'on @code{palette}:

@c ===beg===
@c plot3d ([[2^(-x^2 + y^2),[x,-2,2],[y,-2,2]],
@c    4*sin(3*(x^2+y^2))/(x^2+y^2),
@c    [x, -3, 3], [y, -2, 2]], [plot_format,xmaxima])$
@c ===end===
@example
@group
(%i1) plot3d ([[2^(-x^2 + y^2),[x,-2,2],[y,-2,2]],
         4*sin(3*(x^2+y^2))/(x^2+y^2),
         [x, -3, 3], [y, -2, 2]], [plot_format,xmaxima])$
@end group
@end example

@ifnotinfo
@image{../figures/plotting17,8cm}
@end ifnotinfo

La botella de Klein, definida param@'etricamente:

@c ===beg===
@c expr_1: 5*cos(x)*(cos(x/2)*cos(y) + sin(x/2)*sin(2*y) + 3.0) - 10.0$
@c expr_2: -5*sin(x)*(cos(x/2)*cos(y) + sin(x/2)*sin(2*y) + 3.0)$
@c expr_3: 5*(-sin(x/2)*cos(y) + cos(x/2)*sin(2*y))$
@c plot3d ([expr_1, expr_2, expr_3], [x, -%pi, %pi],
@c         [y, -%pi, %pi], [grid, 40, 40])$
@c ===end===
@example
(%i1) expr_1:5*cos(x)*(cos(x/2)*cos(y)+sin(x/2)*sin(2*y)+3.0)-10.0$
(%i2) expr_2:-5*sin(x)*(cos(x/2)*cos(y) + sin(x/2)*sin(2*y) + 3.0)$
(%i3) expr_3: 5*(-sin(x/2)*cos(y) + cos(x/2)*sin(2*y))$
@group
(%i4) plot3d ([expr_1, expr_2, expr_3], [x, -%pi, %pi],
        [y, -%pi, %pi], [grid, 40, 40])$
@end group
@end example

@ifnotinfo
@image{../figures/plotting18,8cm}
@end ifnotinfo

Gr@'afico de un arm@'onico esf@'erico, utilizando las transformaciones
predefinidas @code{spherical_to_xyz}:

@c ===beg===
@c plot3d (sin(2*theta)*cos(phi), [theta, 0, %pi],
@c         [phi, 0, 2*%pi],
@c         [transform_xy, spherical_to_xyz], [grid,30,60])$
@c ===end===
@example
@group
(%i1) plot3d (sin(2*theta)*cos(phi), [theta, 0, %pi],
              [phi, 0, 2*%pi],
              [transform_xy, spherical_to_xyz], [grid,30,60])$
@end group
@end example

@ifnotinfo
@image{../figures/plotting19,8cm}
@end ifnotinfo

Uso de la transformaci@'on predefinida @code{polar_to_xy}. Este
ejemplo tambi@'en muestra c@'omo eliminar el marco y la leyenda:

@c ===beg===
@c plot3d (r^.33*cos(th/3), [r, 0, 1], [th, 0, 6*%pi],
@c    [grid, 12, 80],
@c    [transform_xy, polar_to_xy], [box, false],
@c    [legend,false])$
@c ===end===
@example
@group
(%i1) plot3d (r^.33*cos(th/3), [r, 0, 1], [th, 0, 6*%pi],
         [grid, 12, 80],
         [transform_xy, polar_to_xy], [box, false],
         [legend,false])$
@end group
@end example

@ifnotinfo
@image{../figures/plotting20,8cm}
@end ifnotinfo

Dibujo de una esfera utilizando la transformaci@'on esf@'erica. En 
Xmaxima, los tres ejes utilizan escalas proporcionales, manteniendo
la forma sim@'etrica de la esfera. Se utiliza una paleta con color
degradado:

@c ===beg===
@c plot3d ( 5, [theta, 0, %pi], [phi, 0, 2*%pi],
@c    [plot_format,xmaxima],
@c    [transform_xy, spherical_to_xyz], 
@c    [palette,[value,0.65,0.7,0.1,0.9]])$
@c ===end===
@example
@group
(%i1) plot3d ( 5, [theta, 0, %pi], [phi, 0, 2*%pi],
         [plot_format,xmaxima],
         [transform_xy, spherical_to_xyz],
         [palette,[value,0.65,0.7,0.1,0.9]])$
@end group
@end example

@ifnotinfo
@image{../figures/plotting21,8cm}
@end ifnotinfo

Definici@'on de una funci@'on con dos variables utilizando una matriz. 
N@'otese la comilla simple en la definici@'on de la funci@'on para
prevenir que @code{plot3d} falle al detectar que la matriz necesita
@'{@dotless{i}}ndices enteros:

@c ===beg===
@c M: matrix([1, 2, 3, 4], [1, 2, 3, 2], [1, 2, 3, 4],
@c           [1, 2, 3, 3])$
@c f(x, y) := float('M [round(x), round(y)])$
@c plot3d (f(x,y), [x, 1, 4], [y, 1, 4], [grid, 4, 4])$
@c ===end===
@example
(%i1) M: matrix([1, 2, 3, 4], [1, 2, 3, 2], [1, 2, 3, 4],
                [1, 2, 3, 3])$
(%i2) f(x, y) := float('M [round(x), round(y)])$
@group
(%i3) plot3d (f(x,y), [x, 1, 4], [y, 1, 4], [grid, 4, 4])$
apply: subscript must be an integer; found: round(x)
@end group
@end example

@ifnotinfo
@image{../figures/plotting22,8cm}
@end ifnotinfo

Asignando a la opci@'on @code{elevation} el valor cero, una superficie
puede verse como una aplicaci@'on en la que cada color representa un nivel
diferente. La opci@'on @code{colorbox} se utiliza para mostrar la correspondencia
entre colores y niveles; las l@'{@dotless{i}}neas de la ret@'{@dotless{i}}cula
se desactivan para facilitar la visualizaci@'on de los colores:

@c ===beg===
@c plot3d (cos (-x^2 + y^3/4), [x, -4, 4], [y, -4, 4],
@c         [mesh_lines_color, false], [elevation, 0], [azimuth, 0],
@c         [colorbox, true], [grid, 150, 150])$
@c ===end===
@example
@group
(%i1) plot3d (cos (-x^2 + y^3/4), [x, -4, 4], [y, -4, 4],
        [mesh_lines_color, false], [elevation, 0], [azimuth, 0],
        [colorbox, true], [grid, 150, 150])$
@end group
@end example

@ifnotinfo
@image{../figures/plotting23,8cm}
@end ifnotinfo

V@'ease tambi@'en la secci@'on Opciones gr@'aficas.

@end deffn



@defvr {Variable global} plot_options

Los elementos de esta lista establecen las opciones por defecto para los gr@'aficos.
Si una opci@'on est@'a presente en una llamada a @code{plot2d} o a @code{plot3d},
este valor adquiere prevalencia sobre las opciones por defecto.
En otro caso se utilizar@'a el valor que tenga en @code{plot_options}.
Las opciones por defecto se asignan mediante la funci@'on @code{set_plot_option}.

Cada elemento de @code{plot_options} es una lista de dos o m@'as elementos,
el primero de los cuales es el nombre de la opci@'on, siendo los siguientes 
los valores que toma. En algunos casos el valor asignado es a su vez una lista,
que puede contener varios elementos.

V@'eanse tambi@'en @code{set_plot_option}, @code{get_option} y la secci@'on
Opciones gr@'aficas.

@end defvr



@deffn {Funci@'on} set_plot_option (@var{option})

Acepta la mayor parte de opciones listadas en la secci@'on Opciones gr@'aficas
y las almacena en la variable global @code{plot_options}.

La funci@'on @code{set_plot_option} eval@'ua su argumento y devuelve
la lista completa @code{plot_options} tal como queda despu@'es de la actualizaci@'on.

V@'eanse tambi@'en @code{plot_options}, @code{get_option} y la secci@'on
Opciones gr@'aficas.

Ejemplos:

Modificaci@'on de los valores para @code{grid}.

@c ===beg===
@c set_plot_option ([grid, 30, 40]);
@c ===end===
@example
(%i1) set_plot_option ([grid, 30, 40]);
@group
(%o1) [[t, - 3, 3], [grid, 30, 40], [transform_xy, false], 
[run_viewer, true], [axes, true], [plot_format, gnuplot_pipes], 
[color, blue, red, green, magenta, black, cyan], 
[point_type, bullet, circle, plus, times, asterisk, box, square, 
triangle, delta, wedge, nabla, diamond, lozenge], 
[palette, [hue, 0.25, 0.7, 0.8, 0.5], 
[hue, 0.65, 0.8, 0.9, 0.55], [hue, 0.55, 0.8, 0.9, 0.4], 
[hue, 0.95, 0.7, 0.8, 0.5]], [gnuplot_term, default], 
[gnuplot_out_file, false], [nticks, 29], [adapt_depth, 5], 
[gnuplot_preamble, ], [gnuplot_default_term_command, 
set term pop], [gnuplot_dumb_term_command, set term dumb 79 22], 
[gnuplot_ps_term_command, set size 1.5, 1.5;set term postscript \
eps enhanced color solid 24], [plot_realpart, false]]
@end group
@end example

@end deffn



@deffn {S@'{@dotless{i}}mbolo del sistema} spherical_to_xyz

Cuando a la opci@'on @code{transform_xy} de @code{plot3d} se le pasa el valor 
@code{spherical_to_xyz}, se interpretar@'an las variables independientes como 
esf@'ericas, transform@'andolas luego a coordenadas cartesianas.

@end deffn








@node Opciones gr@'aficas, Opciones para Gnuplot, Funciones y variables para gr@'aficos, Gr@'aficos
@section Opciones gr@'aficas

Todas las opciones consisten en una lista que comienza con una palabra clave
seguida de uno o m@'as valores. La mayor parte de las opciones pueden utilizarse
con cualquiera de las funciones gr@'aficas @var{plot2d}, @var{plot3d}, @var{contour_plot} y
@var{implicit_plot}, o en la funci@'on @var{set_plot_option}. Las excepciones
se indican en la lista siguiente.


@defvr {Opci@'on para plot} adapt_depth [adapt_depth, @var{integer}]
Valor por defecto: 5

N@'umero m@'aximo de particiones utilizado por el algoritmo adaptativo
de representaci@'on gr@'afica.

@end defvr


@defvr {Opci@'on para plot} axes [axes, @var{symbol}] 
Valor por defecto: @code{true}

El argumento @var{symbol} puede valer @code{true}, @code{false}, @code{x} 
o @code{y}. Si vale @code{false}, no se mostrar@'an los ejes; si es igual a
@code{x} o @code{y}, solo ese eje ser@'a el que se representa; si vale
@code{true}, se mostrar@'an ambos ejes.

Esta opci@'on solo es relevante para @code{plot2d} y @code{implicit_plot}.

@end defvr



@defvr {Opci@'on para plot} azimuth [azimuth, @var{number}]
Valor por defecto: 30

Un gr@'afico @code{plot3d} se puede interpretar como comenzando
horizontalmente en el plano xy; a partir de ah@'{@dotless{i}},
la coordenada z se eleva perpendicularmente al papel. El eje z
gira entonces alrededor del eje x un @'angulo igual a @code{elevation},
luego gira el plano xy alrededor del nuevo eje z un @'angulo @code{azimuth}.
Esta opci@'on establece el valor para @code{azimuth} en grados
sexagesimales.

V@'ease tambi@'en @code{elevation}.

@end defvr



@defvr {Opci@'on para plot} box [box, @var{symbol}]
Valor por defecto: @code{true}

Si vale @code{true}, se representar@'a el marco para el gr@'afico;
si vale @code{false}, no.

@end defvr



@defvr {Opci@'on para plot} color [color, @var{color_1}, @dots{}, @var{color_n}]
Valor por defecto: blue, red, green, magenta, black, cyan


Define el color para las curvas en @code{plot2d} y @code{implicit_plot}. En
@code{plot3d} define los colores para el enrejado de las superficies si no
se utiliza la paleta; una cara de la superficie tendr@'a @var{color_1}
y la otra @var{color_2}, o el mismo color si se especifica solo uno.

Si hay m@'as curvas o superficies que caras, los colores se repetir@'an 
secuencialmente. Con Gnuplot, los colores pueden ser: azul, rojo, verde,
magenta, negro y ci@'an; con Xmaxima, los colores pueden ser esos mismos,
o una cadena de texto que comienza con el car@'acter @code{#} seguido de
seis d@'{@dotless{i}}gitos hexadecimales: dos para la componente roja, otros
dos para la verde y otros dos para la azul. Si se introduce un nombre de
color no reconocido, en su lugar se utilizar@'a el negro.

@end defvr



@defvr {Opci@'on para plot} colorbox [colorbox, @var{symbol}]
Valor por defecto: @code{false}

El argumento @var{symbol} puede valer @code{true} o @code{false}.
Si vale @code{true} y @code{plot3d} utiliza la paleta de colores
para representar diferentes valores de z, se dibujar@'a un rect@'angulo
en la parte derecha, indicando los colores utilizados para
los diferentes valores de z. Esta opci@'on no funciona en Xmaxima.

@end defvr



@defvr {Opci@'on para plot} elevation [elevation, @var{number}]
Valor por defecto: 60

Un gr@'afico @code{plot3d} se puede interpretar como comenzando
horizontalmente en el plano xy; a partir de ah@'{@dotless{i}},
la coordenada z se eleva perpendicularmente al papel. El eje z
gira entonces alrededor del eje x un @'angulo igual a @code{elevation},
luego gira el plano xy alrededor del nuevo eje z un @'angulo @code{azimuth}.
Esta opci@'on establece el valor para @code{elevation} en grados
sexagesimales.

V@'ease tambi@'en  @code{azimuth}.

@end defvr



@defvr {Opci@'on para plot} grid [grid, @var{integer}, @var{integer}]
Valor por defecto: 30, 30

Establece el n@'umero de puntos para los puntos de la rejilla en las
direcciones x e y en escenas 3D.

@end defvr



@defvr  {Opci@'on para plot} legend [legend, @var{string_1}, @dots{}, @var{string_n}]
@defvrx {Opci@'on para plot} legend [legend, @var{false}]

Especifica las etiquetas para los gr@'aficos en los que aparecen
varios objetos.  Si hay m@'as expresiones que etiquetas, @'estas se repetir@'an.
Con el valor @code{false} no se mostrar@'an etiquetas.
Por defecto se pasar@'an los nombres de las expresiones o funciones, o las palabras
@code{discrete1}, @code{discrete2}, @dots{}, para gr@'aficos de puntos.
Esta opci@'on no se puede utilizar con @var{set_plot_option}.

@end defvr



@defvr {Opci@'on para plot} logx [logx]

Hace que el eje de abscisas se dibuje en la escala 
logar@'{@dotless{i}}tmica. Esta opci@'on no se puede utilizar 
con @var{set_plot_option}.

@end defvr



@defvr {Opci@'on para plot} logy [logy]

Hace que el eje de ordenadas se dibuje en la escala 
logar@'{@dotless{i}}tmica. Esta opci@'on no se puede utilizar 
con @var{set_plot_option}.

@end defvr



@defvr {Opci@'on para plot} mesh_lines_color [mesh_lines_color, @var{color}]
Valor por defecto: @code{black}

Establece el color del enrejado en los gr@'aficos creados por @code{plot3d}
cuando se utiliza una paleta. Acepta los mismos colores que la opci@'on 
@code{color}. Tambi@'en se le puede dar el valor @code{false} para eliminar
el enrejado.

@end defvr



@defvr {Opci@'on para plot} nticks [nticks, @var{integer}]
Valor por defecto: 29

Cuando se dibujan funciones con @code{plot2d}, establece el n@'umero
inicial de puntos utilizado por la rutina gr@'afica adaptativa. Cuando
se dibujan funciones con @code{plot3d} o param@'etricas con @code{plot2d},
su valor es igual al n@'umero de puntos que se representar@'an en el
gr@'afico.

@end defvr



@defvr  {Opci@'on para plot} palette [palette, [@var{palette_1}], @dots{}, [@var{palette_n}]]
@defvrx {Opci@'on para plot} palette [palette, @var{false}]
Valor por defecto: [hue, 0.25, 0.7, 0.8, 0.5], [hue, 0.65, 0.8, 0.9, 0.55], 
[hue, 0.55, 0.8, 0.9, 0.4], [hue, 0.95, 0.7, 0.8, 0.5]

Puede consistir en una paleta o en una lista de varias paletas. Cada
paleta es una lista con una palabra clave seguida de cuatro n@'umeros.
Los tres primeros n@'umeros, que deben tomar valores entre 0 y 1, definen
el matiz, la saturaci@'on y el valor de un color b@'asico a asignar al 
m@'{@dotless{i}}nimo valor de z. La palabra clave especifica cu@'al de los
tres atributos (@code{hue}, @code{saturation} o @code{value}) incrementar@'a
de acuerdo con los valores de z. El @'ultimo n@'umero se corresponde con el 
incremento del m@'aximo valor de z. Este @'ultimo n@'umero puede ser mayor que
1 o negativo.

Gnuplot solo utiliza la primera paleta de la lista; Xmaxima utilizar@'a 
las paletas de la lista secuencialmente cuando haya que representar varias
superficies conjuntamente; si el n@'umero de paletas no es suficiente,
se repetir@'an tambi@'en de forma secuencial.

El color del enrrejado de la superficie se establece con @code{mesh_lines_color}.
Si @code{palette} tiene el valor @code{false}, las superficies se representan
solo con el enrrejado; en tal caso, el color de las l@'{@dotless{i}}neas
ser@'a el determinado por @code{color}.

@end defvr



@defvr {Opci@'on para plot} plot_format [plot_format, @var{format}]
Valor por defecto: en sistemas Windows, @code{gnuplot}; en otros, @code{gnuplot_pipes}

Establece el formato a utlizar por las rutinas gr@'aficas.

Debe tomar uno de los siguientes valores: @code{gnuplot}, @code{xmaxima}, @code{mgnuplot}
o @code{gnuplot_pipes}.

@end defvr



@defvr {Opci@'on para plot} plot_realpart [plot_realpart, @var{symbol}]
Valor por defecto: @code{false}

Cuando vale @code{true}, se representa gr@'aficamente la parte real
de las funciones; equivale a ejecutar @code{realpart(@var{funci@'on})}.
Si vale @code{false}, no se representa nada cuando la funci@'on
no devuelva un valor real. Por ejemplo, si @code{x} es negativo, 
@code{log(x)} devuelve un valor negativo cuya parte real es @code{log(abs(x))};
en tal caso, si @code{plot_realpart} vale @code{true}, @code{log(-5)}
se representa como @code{log(5)}, mientras que no se representa nada 
si @code{plot_realpart} vale @code{false}.

@end defvr



@defvr {Opci@'on para plot} point_type [point_type, @var{type_1}, @dots{}, @var{type_n}]
Valor por defecto: @code{bullet}, @code{circle}, @code{plus}, @code{times}, @code{asterisk},
@code{box}, @code{square}, @code{triangle}, @code{delta}, @code{wedge}, @code{nabla},
@code{diamond}, @code{lozenge}

En Gnuplot, cada conjunto de puntos que vaya a ser representado con los
estilos @code{points} o @code{linespoints} se har@'a con objetos tomados
de esta lista en orden secuencial. Si hay m@'as conjuntos de puntos que 
objetos en la lista, se ir@'an repitiendo de forma secuencial. Los objetos
que pueden ser utilizados son: @code{bullet}, @code{circle}, @code{plus}, 
@code{times}, @code{asterisk}, @code{box}, @code{square}, @code{triangle}, 
@code{delta}, @code{wedge}, @code{nabla}, @code{diamond} o @code{lozenge}

@end defvr



@defvr {Opci@'on para plot} psfile [psfile, @var{string}]

Guarda el gr@'afico en formato Postscript con nombre @var{string}
en lugar de mostrarlo en pantalla. Por defecto, el fichero se crear@'a
en la carpeta definida en la variable @var{maxima_tempdir}, cuyo
valor se podr@'a cambiar para almacenar el fichero en otra carpeta.

@end defvr



@defvr {Opci@'on para plot} run_viewer [run_viewer, @var{symbol}]
Valor por defecto: @code{true}

Controla si el visor apropiado para la salida gr@'afica debe ejecutarse o no.

@end defvr



@defvr  {Opci@'on para plot} style [style, @var{type_1}, @dots{}, @var{type1_n}]
@defvrx {Opci@'on para plot} style [style, [@var{style_1}], @dots{}, [@var{style_n}]]
Valor por defecto: @var{lines} (dibuja todos los puntos unidos por 
l@'{@dotless{i}}neas de ancho 1 y con el primer color de la lista de la opci@'on @code{color}).

Estilos a utilizar para las funciones o conjuntos de datos en
gr@'aficos 2d. A la palabra @code{style} debe seguirle uno o m@'as
estilos. Si hay m@'as funciones o conjuntos de datos que estilos,
@'estos se repetir@'an. Los estilos que se admiten son: @var{lines}
para segmentos lineales, @var{points} para puntos aislados,
@var{linespoints} para segmentos y puntos, @var{dots} para
peque@~nos puntos aislados. Gnuplot tambi@'en acepta el estilo
@var{impulses}.

Los estilos se pueden escribir como elementos de una lista, junto
con algunos par@'ametros adicionales. @var{lines} acepta uno o dos
n@'umeros: el ancho de la l@'{@dotless{i}}nea y un entero que identifica
el color. Los c@'odigos de color por defecto son: 1, azul; 2, rojo;
3, magenta; 4, naranja; 5, marr@'on; 6, verde lima; 7, aguamarina.
En caso de utilizar Gnuplot con un terminal diferente de X11, estos
colores pueden cambiar; por ejemplo, bajo la opci@'on 
[@var{gnuplot_term},@var{ps}], el @'{@dotless{i}}ndice 4
se corresponde con el negro en lugar del naranja.

@var{points} acepta uno, dos o tres par@'ametros; el primer par@'ametro
es el radio de los puntos, el segundo es un entero para seleccionar el color,
con igual codificaci@'on que en @var{lines} y el tercer par@'ametro s@'olo
es utilizado por Gnuplot y hace referencia a varios objetos para representar
los puntos. Los tipos de objetos disponibles son: 1, c@'{@dotless{i}}rculos
rellenos; 2, circunferencias; 3, +; 4, x; 5, *; 6, cuadrados rellenos;
7, cuadrados huecos; 8, tri@'angulos rellenos; 9, tri@'angulos huecos;
10, tri@'angulos rellenos invertidos; 11, tri@'angulos huecos invertidos;
12, rombos rellenos; 13, rombos huecos.

@var{linesdots} acepta hasta cuatro par@'ametros: ancho de l@'{@dotless{i}}nea,
radio de los puntos, color y tipo de objetos para representar puntos.

V@'eanse tambi@'en @code{color} y @code{point_type}.

@end defvr



@defvr {Opci@'on para plot} transform_xy [transform_xy, @var{symbol}]
Valor por defecto: @code{false}

La variable @var{symbol} puede ser @code{false} o el resultado
devuelto por la funci@'on @code{transform_xy}. Si es distinto de
@code{false}, se utiliza para transformar las tres coordenadas en
@code{plot3d}.

V@'eanse @code{make_transform}, @code{polar_to_xy} y @code{spherical_to_xyz}.

@end defvr



@defvr {Opci@'on para plot} x [x, @var{min}, @var{max}]

Cuando se utiliza como primera opci@'on en una instrucci@'on para
un gr@'afico 2D (o cualquiera de las dos primeras en un gr@'afico 3D),
indica que su primera variable independiente es x y ajusta su rango.
Tambi@'en se puede utilizar despu@'es de la primera opci@'on
(o despu@'es de la segunda opci@'on en un gr@'afico 3D) para definir
el dominio horizontal que se representar@'a en el gr@'afico.

@end defvr



@defvr {Opci@'on para plot} xlabel [xlabel, @var{string}]

Especifica la etiqueta para el primer eje. Si no se utiliza esta
opci@'on, la etquieta ser@'a el nombre de la variable independiente,
cuando se utilicen @code{plot2d} o @code{implicit_plot}, o el nombre
de la primera variable cuando se utilicen @code{plot3d} o @code{contour_plot},
o la primera expresi@'on en el caso de una curva param@'etrica.
No puede utilizarse con @var{set_plot_option}.

@end defvr



@defvr {Opci@'on para plot} y [y, @var{min}, @var{max}]

Cuando se utiliza como una de las dos primeras opciones en @code{plot3d},
indica que una de las variables independientes es ``y'' y ajusta su
rango. En otro caso, define el dominio de la segunda variable que se mostrar@'a
en el gr@'afico.

@end defvr



@defvr {Opci@'on para plot} ylabel [ylabel, @var{string}]

Especifica la etiqueta para el segundo eje. Si no se utiliza esta
opci@'on, la etiqueta ser@'a ``y'',
cuando se utilicen @code{plot2d} o @code{implicit_plot}, o el nombre
de la segunda variable cuando se utilicen @code{plot3d} o @code{contour_plot},
o la segunda expresi@'on en el caso de una curva param@'etrica.
No puede utilizarse con @var{set_plot_option}.

@end defvr



@defvr {Opci@'on para plot} z [z, @var{min}, @var{max}]

Se utiliza en @code{plot3d} para ajustar el rango de valores de z que se
mostrar@'a en el g@'afico.

@end defvr



@defvr {Opci@'on para plot} zlabel [zlabel, @var{string}]

Especifica la etiqueta para el tercer eje cuando se utiliza @code{plot3d}.
Si no se utiliza esta opci@'on, la etiqueta ser@'a ``z''
en el caso de superficies, o la tercera expresi@'on en el caso de una curva param@'etrica.
No puede utilizarse con @var{set_plot_option} y se ignora 
en @code{plot2d} y @code{implicit_plot}.

@end defvr









@node Opciones para Gnuplot, Funciones para el formato Gnuplot_pipes, Opciones gr@'aficas, Gr@'aficos
@section Opciones para Gnuplot

Hay varias opciones gr@'aficas que son espec@'{@dotless{i}}ficas de Gnuplot.
Algunas de ellas son comandos propios de Gnuplot que se especifican como cadenas de texto.
Cons@'ultese la documentaci@'on de Gnuplot para m@'as detalles.



@defvr {Opci@'on para plot} gnuplot_term

Establece el terminal de salida para Gnuplot.

@itemize @bullet
@item
@strong{default} (valor por defecto)

Gnuplot muestra el gr@'afico en una ventana gr@'afica.

@item
@strong{dumb}

Gnuplot muestra el gr@'afico en la consola de Maxima
en estilo ASCII art@'{@dotless{i}}stico.

@item
@strong{ps}

Gnuplot genera c@'odigo en lenguaje PostScript.
Si a la opci@'on @code{gnuplot_out_file} se le da el
valor @var{filename}, Gnuplot escribe el c@'odigo PostScript
en @var{filename}. En caso contrario, se guarda en el archivo @code{maxplot.ps}.

@item
Cualquier otro terminal admitido por Gnuplot.

Gnuplot puede generar gr@'aficos en otros muchos formatos, tales como
png, jpeg, svg etc. Para crear gr@'aficos en cualquera de estos formatos,
a la opci@'on @code{gnuplot_term} se le puede asignar cualquiera de los
terminales admitidos por Gnuplot, bien por su nombre (s@'{@dotless{i}}mbolo)
bien con la especificaci@'on completa del terminal (cadena). Por ejemplo,
@code{[gnuplot_term,png]} guarda el gr@'afico en formato PNG (Portable
Network Graphics), mientras que @code{[gnuplot_term,"png size 1000,1000"]}
lo hace con dimensiones 1000x1000 p@'{@dotless{i}}xeles.
Si a la opci@'on @code{gnuplot_out_file} se le da el
valor @var{filename}, Gnuplot escribe el c@'odigo PostScript
en @var{filename}. En caso contrario, se guarda en el archivo 
@code{maxplot.@var{term}}, siendo @var{term} el nombre del terminal.

@end itemize

@end defvr



@defvr {Opci@'on para plot} gnuplot_out_file

Cuando se utiliza conjuntamente con la opci@'on @code{gnuplot_term},
puede utilizarse para almacenar el gr@'afico en un fichero en uno
de los formatos aceptados por Gnuplot. Si se quiere crear un fichero
Postscript se puede utilizar la opci@'on @code{psfile}, que tambi@'en 
funciona con Openmath.

@example
[gnuplot_term, png], [gnuplot_out_file, "graph3.png"]
@end example

@end defvr



@defvr {Opci@'on para plot} gnuplot_pm3d

Controla la utilizaci@'on del modo PM3D, que tiene capacidades avanzadas
para gr@'aficos tridimensionales. PM3D s@'olo est@'a disponible en versiones 
de Gnuplot posteriores a la 3.7. El valor por defecto de @code{gnuplot_pm3d} es @code{false}.

@end defvr



@defvr {Opci@'on para plot} gnuplot_preamble

Introduce instrucciones de Gnuplot antes de que se haga el gr@'afico.
Puede utilizarse cualquier comando v@'alido de Gnuplot. Si interesa 
introducir varios comandos se separar@'an con punto y coma. El valor 
por defecto de @code{gnuplot_preamble} es la cadena vac@'{@dotless{i}}a @code{""}.

@end defvr



@defvr {Opci@'on para plot} gnuplot_curve_titles

Opci@'on obsoleta que ha sido sustituida por @code{legend}.

@end defvr



@defvr {Opci@'on para plot} gnuplot_curve_styles

Opci@'on obsoleta que ha sido sustituida por @code{style}.

@end defvr



@defvr {Opci@'on para plot} gnuplot_default_term_command

Comando de Gnuplot para establecer el tipo de terminal por defecto.
El valor por defecto es @code{set term pop}.

@end defvr



@defvr {Opci@'on para plot} gnuplot_dumb_term_command

Comando de Gnuplot para establecer el tipo de terminal para
el terminal oculto. El valor por defecto es @code{"set term dumb 79 22"},
que da una salida de texto de 79 por 22 caracteres.

@end defvr



@defvr {Opci@'on para plot} gnuplot_ps_term_command

Comando de Gnuplot para establecer el tipo de terminal para
el terminal PostScript. El valor por defecto es
@code{"set size 1.5, 1.5;set term postscript eps enhanced color solid 24"},
que establece un tama@~no de 1.5 veces el valor por defecto de gnuplot,
junto con un tama@~no de fuente de 24, entre otras cosas. Cons@'ultese
la documentaci@'on de gnuplot para m@'as informaci@'on sobre @code{set term postscript}.

@end defvr








@node Funciones para el formato Gnuplot_pipes,  , Opciones para Gnuplot, Gr@'aficos
@section Funciones para el formato Gnuplot_pipes


@deffn {Funci@'on} gnuplot_start ()

Inicializa una tuber@'{@dotless{i}}a hacia Gnuplot, con el fin
de ser utilizada para utilizar el formato @code{gnuplot_pipes}.
No es necesario inicializarla manualmente antes de hacer gr@'aficos.

@end deffn



@deffn {Funci@'on} gnuplot_close ()

Cierra la tuber@'{@dotless{i}}a hacia Gnuplot que haya sido 
utilizada para hacer gr@'aficos.

@end deffn



@deffn {Funci@'on} gnuplot_restart ()

Cierra la tuber@'{@dotless{i}}a hacia Gnuplot que haya sido 
utilizada para hacer gr@'aficos e inicializa una nueva.

@end deffn



@deffn  {Funci@'on} gnuplot_replot ()
@deffnx {Funci@'on} gnuplot_replot (@var{s})

Actualiza la ventana de Gnuplot. Si @code{gnuplot_replot} es invocada
con un comando de Gnuplot en la cadena @var{s}, entonces @var{s} es 
enviada a Gnuplot antes de redibujar la ventana.

@end deffn



@deffn {Funci@'on} gnuplot_reset ()

Resetea Gnuplot cuando se utiliza el formato @code{gnuplot_pipes}.
Para actualizar la ventana de Gnuplot inv@'oquese a @code{gnuplot_replot}
despu@'es de @code{gnuplot_reset}.

@end deffn
