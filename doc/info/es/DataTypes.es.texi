@c English version 2011-06-12
@menu
* N@'umeros::
* Cadenas de texto::
* Constantes::
* Listas::
* Arrays::
* Estructuras::
@end menu



@node N@'umeros, Cadenas de texto, Tipos de datos y estructuras, Tipos de datos y estructuras
@section N@'umeros

@menu
* Introducci@'on a los n@'umeros::
* Funciones y variables para los n@'umeros::
@end menu




@node Introducci@'on a los n@'umeros, Funciones y variables para los n@'umeros, N@'umeros, N@'umeros
@subsection Introducci@'on a los n@'umeros




@subheading N@'umeros enteros y racionales

Los c@'alculos aritm@'eticos con n@'umeros enteros y racionales son exactos.
En principio, los n@'umeros enteros y racionales admiten una cantidad arbitraria
de cifras, con la @'unica limitaci@'on que impongan las capacidades de memoria
del sistema.

@example
(%i1) 1/3+5/4+3;
                               55
(%o1)                          --
                               12
(%i2) 100!;
(%o2) 9332621544394415268169923885626670049071596826438162146859\
2963895217599993229915608941463976156518286253697920827223758251\
185210916864000000000000000000000000
(%i3) 100!/101!;
                                1
(%o3)                          ---
                               101
@end example

Funciones disponibles para los n@'umeros enteros y racionales:

@verbatim
   integerp       numberp       nonnegintegerp     
   oddp           evenp
   ratnump        rationalize
@end verbatim

@subheading N@'umeros decimales en coma flotante

Maxima hace los c@'alculos con n@'umeros decimales en coma flotante 
en doble precisi@'on. Adem@'as, Maxima puede hacer c@'lculos con 
n@'umeros decimales grandes en coma flotante (@i{bigfloats}, en ingl@'es),
que, en principio, admiten precisi@'on arbitraria.

La coma de los n@'umeros decimales en coma flotante se escribe con un
punto y el exponente se puede indicar con "f", "e" o "d". Por defecto,
Maxima hace los c@'alculos en doble precisi@'on y muestra el exponente
como "e" en el resultado, mientras que representa el exponente con la
letra "b" en el caso de decimales grandes de precisi@'on arbitraria.
Maxima no distingue si la letra del exponente se escribe en min@'uscula
o may@'uscula.

@example
(%i1) [2.0,1f10,1,e10,1d10,1d300];
(%o1)        [2.0, 1.e+10, 1, e10, 1.e+10, 1.e+300]
(%i2) [2.0b0,1b10,1b300];
(%o2)               [2.0b0, 1.0b10, 1.0b300]
@end example

Si en un c@'alculo aritm@'etico aparece un n@'umero decimal en coma flotante,
se producir@'a un efecto de contagio que har@'a que el resultado se devuelva
tambi@'en como decimal. Esto tambi@'en es cierto para el caso de decimales
grandes de precisi@'on arbitraria.

@example
(%i1) 2.0+1/2+3;
(%o1)                                 5.5
(%i2) 2.0b0+1/2+3;
(%o2)                                5.5b0
@end example

Con las funciones @code{float} y @code{bfloat} se puede convertir
un n@'umero en decimal de doble precisi@'on, o de precisi@'on
arbitraria, respectivamente:

@example
(%i1) float([2,1/2,1/3,2.0b0]);
(%o1)          [2.0, 0.5, .3333333333333333, 2.0]
(%i2) bfloat([2,1/2,1/3,2.0b0]);
(%o2)     [2.0b0, 5.0b-1, 3.333333333333333b-1, 2.0b0]
@end example

Funciones y variables disponibles para n@'umeros decimales:

@verbatim
   float        floatnump     
   bfloat       bfloatp       fpprec
   float2bf     bftorat       ratepsilon

   number_pbranch 
   m1pbranch
@end verbatim

@subheading N@'umeros complejos

Maxima no tiene un tipo de dato espec@'{@dotless{i}}co para
n@'umeros complejos; @'estos se representan internamente como
la suma de la parte real y la imaginaria multiplicada por el
s@'{@dotless{i}}mbolo @code{%i}, que hace las veces de unidad
imaginaria. Por ejemplo, las ra@'{@dotless{i}}ces de la ecuaci@'on
@code{x^2 - 4*x + 13 = 0} se representan como @code{2 + 3*%i} y
@code{2 - 3*%i}.

Maxima no simplifica autom@'aticamente productos, cocientes,
ra@'{@dotless{i}}ces y otras expresiones con n@'umeros complejos.
Por ejemplo, para hacer la multiplicaci@'on de n@'umeros
complejos se puede utilizar la funci@'on @code{expand}.

Funciones disponibles para los n@'umeros complejos:

@verbatim
   realpart     imagpart      rectform     polarform
   cabs         carg          conjugate    csign
@end verbatim







@node Funciones y variables para los n@'umeros, , Introducci@'on a los n@'umeros, N@'umeros
@subsection Funciones y variables para los n@'umeros


@deffn {Funci@'on} bfloat (@var{expr})
Convierte todos los n@'umeros y  funciones num@'ericas a n@'umeros decimales de punto flotante grandes ("bigfloats").
El n@'umero de d@'{@dotless{i}}gitos significativos de los "bigfloats" resultantes se especifica mediante la variable global @code{fpprec}.

Si @code{float2bf} vale @code{false} se mostrar@'a un mensaje de aviso cuando un n@'umero en punto flotante se convierte a decimal de tipo "bigfloats", puesto que tal transformaci@'on puede conllevar p@'erdida de precisi@'on.

@end deffn


@deffn {Funci@'on} bfloatp (@var{expr})
Devuelve @code{true} si @var{expr} es un n@'umero decimal en punto flotante grande ("bigfloats"), en caso contrario devuelve @code{false}.

@end deffn


@defvr {Variable optativa} bftorat
Valor por defecto: @code{false}

La variable @code{bftorat} controla la conversi@'on de n@'umeros decimales de punto flotante grandes ("bigfloats") a n@'umeros racionales. Si @code{bftorat} vale @code{false}, se utilizar@'a @code{ratepsilon} para controlar la conversi@'on  (lo cual resulta en n@'umeros racionales relativamente peque@~nos). Si  @code{bftorat} vale @code{true}, el n@'umero racional generado representar@'a exactamente al n@'umero decimal de punto flotante grande ("bigfloat").

@end defvr


@defvr {Variable optativa} bftrunc
Valor por defecto: @code{true}

La variable @code{bftrunc} provoca la eliminaci@'on de ceros en n@'umeros decimales grandes no nulos para que no se muestren.  As@'{@dotless{i}}, si @code{bftrunc} vale @code{false}, @code{bfloat (1)}
se muestra como @code{1.000000000000000B0}. En otro caso, se mostrar@'a como @code{1.0B0}.

@end defvr


@deffn {Funci@'on} evenp (@var{expr})
Devuelve @code{true} si @var{expr} es un entero par y @code{false} en cualquier otro caso.

@end deffn


@deffn {Funci@'on} float (@var{expr})
Convierte los enteros, n@'umeros racionales y los decimales de punto flotante grandes ("bigfloats") que est@'an presentes en @var{expr} a n@'umeros de punto flotante. Tambi@'en act@'ua como s@'{@dotless{i}}mbolo @code{evflag}.

@end deffn


@defvr {Variable optativa} float2bf
Valor por defecto: @code{true}
 
Si @code{float2bf} vale @code{false} se mostrar@'a un mensaje de aviso cuando un n@'umero
en punto flotante se convierte a decimal de tipo "bigfloats", puesto que tal transformaci@'on
puede conllevar p@'erdida de precisi@'on.

@end defvr


@deffn {Funci@'on} floatnump (@var{expr})
Devuelve @code{true} si @var{expr} es un n@'umero de punto flotante, en caso contario retorna @code{false}.

@end deffn



@defvr {Variable optativa} fpprec
Valor por defecto: 16

La variable @code{fpprec} guarda el n@'umero de d@'{@dotless{i}}gitos significativos en la aritm@'etica con n@'umeros decimales de punto flotante grandes ("bigfloats"). La variable @code{fpprec} no afecta a los c@'alculos con n@'umeros decimales de punto flotante ordinarios.

V@'eanse tambi@'en @code{bfloat} y @code{fpprintprec}.

@end defvr

@defvr {Variable optativa} fpprintprec
Valor por defecto: 0

La variable @code{fpprintprec} guarda el n@'umero de d@'{@dotless{i}}gitos
a imprimir de los n@'umeros decimales en coma flotante, tanto los ordinarios
como los de precisi@'on ilimitada (@i{bigfloats}).

En el caso de los decimales ordinarios, si @code{fpprintprec} toma un valor
entre 2 y 16 (inclusive), el n@'umero de d@'{@dotless{i}}gitos que se 
imprimen es igual a @code{fpprintprec}. En caso contrario, @code{fpprintprec} es 0
o mayor que 16, siendo el n@'umero de d@'{@dotless{i}}gitos
a imprimir en todos loa casos igual a 16.

En el caso de los decimales de precisi@'on ilimitada (@i{bigfloats}),
si @code{fpprintprec} toma un valor entre 2 y 16 (inclusive),
el n@'umero de d@'{@dotless{i}}gitos que se imprimen es igual a 
@code{fpprintprec}. En caso contrario, @code{fpprintprec} es 0
o mayor que @code{fpprec}, siendo el n@'umero de d@'{@dotless{i}}gitos
a imprimir igual a @code{fpprec}.

La variable @code{fpprintprec} no admite el valor 1.
@end defvr


@deffn {Funci@'on} integerp (@var{expr})

Devuelve @code{true} si @var{expr} es un n@'umero entero y @code{false} en cualquier otro caso.

La funci@'on @code{integerp} devuelve @code{false} si su argumento es un s@'{@dotless{i}}mbolo, incluso cuando @'este ha sido declarado como entero.

Ejemplos:

@example
(%i1) integerp (0);
(%o1)                         true
(%i2) integerp (1);
(%o2)                         true
(%i3) integerp (-17);
(%o3)                         true
(%i4) integerp (0.0);
(%o4)                         false
(%i5) integerp (1.0);
(%o5)                         false
(%i6) integerp (%pi);
(%o6)                         false
(%i7) integerp (n);
(%o7)                         false
(%i8) declare (n, integer);
(%o8)                         done
(%i9) integerp (n);
(%o9)                         false
@end example

@end deffn


@defvr {Variable opcional} m1pbranch
Valor por defecto: @code{false}

La variable @code{m1pbranch} es la rama principal de @code{-1} elevado a una potencia. Cantidades como @code{(-1)^(1/3)} (esto es, un exponente racional impar) y @code{(-1)^(1/4)} (esto es, un exponente racional par) son tratados como sigue:

@c REDRAW THIS AS A TABLE
@example
              dominio real
                            
(-1)^(1/3):      -1         
(-1)^(1/4):   (-1)^(1/4)   

             dominio complejo              
m1pbranch:false          m1pbranch:true
(-1)^(1/3)               1/2+%i*sqrt(3)/2
(-1)^(1/4)              sqrt(2)/2+%i*sqrt(2)/2
@end example

@end defvr


@deffn {Funci@'on} nonnegintegerp (@var{n})

Devuelve @code{true} si y solo si @code{@var{n} >= 0}, siendo @var{n} un entero.

@end deffn


@deffn {Funci@'on} numberp (@var{expr})

Devuelve @code{true} si @var{expr} es un en@'umero entero, racional, 
de coma flotante o "bigfloat", en caso contrario devuelve @code{false}.

La funci@'on @code{numberp} devuelve @code{false} si su argumento es un s@'{@dotless{i}}mbolo, incluso cuando el argumento es un n@'umero simb@'olico como @code{%pi} o @code{%i}, o aunque haya sido declarado como @code{even} (par), @code{odd} (impar), @code{integer} (entero), @code{rational} (racional), @code{irrational} (irracional), @code{real} (real), @code{imaginary} (imaginario) o @code{complex} (complejo).

Ejemplos:

@example
(%i1) numberp (42);
(%o1)                         true
(%i2) numberp (-13/19);
(%o2)                         true
(%i3) numberp (3.14159);
(%o3)                         true
(%i4) numberp (-1729b-4);
(%o4)                         true
(%i5) map (numberp, [%e, %pi, %i, %phi, inf, minf]);
(%o5)      [false, false, false, false, false, false]
(%i6) declare (a, even, b, odd, c, integer, d, rational,
     e, irrational, f, real, g, imaginary, h, complex);
(%o6)                         done
(%i7) map (numberp, [a, b, c, d, e, f, g, h]);
(%o7) [false, false, false, false, false, false, false, false]
@end example

@end deffn



@defvr {Variable opcional} numer

La variable @code{numer} hace algunas funciones matem@'aticas
con argumentos num@'ericos se eval@'uen como decimales de punto flotante.
Tambi@'en hace que las variables de una expresi@'on a las cuales se les ha
asignado un n@'umero sean sustituidas por sus valores.
Adem@'as, activa la variable @code{float}.

V@'ease tambi@'en @code{%enumer}.

Ejemplos:

@c ===beg===
@c [sqrt(2), sin(1), 1/(1+sqrt(3))];
@c [sqrt(2), sin(1), 1/(1+sqrt(3))],numer;
@c ===end===
@example
(%i1) [sqrt(2), sin(1), 1/(1+sqrt(3))];
                                               1
(%o1)                   [sqrt(2), sin(1), -----------]
                                          sqrt(3) + 1
(%i2) [sqrt(2), sin(1), 1/(1+sqrt(3))],numer;
(%o2) [1.414213562373095, .8414709848078965, .3660254037844387]
@end example
@end defvr



@defvr {Variable opcional} numer_pbranch
Valor por defecto: @code{false}

La variable opcional @code{numer_pbranch} controla la evaluaci@'on
num@'erica de las potencias de n@'umeros enteros, racionales y
decimales negativos. Si @code{numer_pbranch} vale @code{true} y el
exponente es decimal o la variable opcional @code{numer} vale 
@code{true}, Maxima eval@'ua el resultado num@'erico utilizando la rama
principal. En caso contrario, se devuleve un resultado simplificado pero
no evaluado.

Ejemplos:

@c ===beg===
@c (-2)^0.75;
@c (-2)^0.75,numer_pbranch:true;
@c (-2)^(3/4);
@c (-2)^(3/4),numer;
@c (-2)^(3/4),numer,numer_pbranch:true;
@c ===end===
@example
(%i1) (-2)^0.75;
(%o1) (-2)^0.75

(%i2) (-2)^0.75,numer_pbranch:true;
(%o2) 1.189207115002721*%i-1.189207115002721

(%i3) (-2)^(3/4);
(%o3) (-1)^(3/4)*2^(3/4)

(%i4) (-2)^(3/4),numer;
(%o4) 1.681792830507429*(-1)^0.75

(%i5) (-2)^(3/4),numer,numer_pbranch:true;
(%o5) 1.189207115002721*%i-1.189207115002721
@end example

@end defvr


@deffn {Funci@'on} numerval (@var{x_1}, @var{expr_1}, ..., @var{var_n}, @var{expr_n})
Declara las variables @code{x_1}, ..., @var{x_n} asign@'andoles los valores num@'ericos @code{expr_1}, ..., @code{expr_n}.
El valor num@'erico se eval@'ua y sustituye a la variable en cualquier expresi@'on en la que @'esta aparezca si @code{numer} toma el valor @code{true}. V@'ease tambi@'en @code{ev}.

Las expresiones @code{expr_1}, ..., @code{expr_n} pueden ser expresiones no necesariamente num@'ericas.
@end deffn



@deffn {Funci@'on} oddp (@var{expr})
Devuelve @code{true} si @var{expr} es un entero impar y @code{false} en caso contrario.
@end deffn



@defvr {Variable opcional} ratepsilon
Valor por defecto: 2.0e-8

La variable @code{ratepsilon} guarda la tolerancia utilizada en la conversi@'on de n@'umeros decimales en coma flotante a n@'umeros racionales.

@c NEED EXAMPLES HERE
@end defvr




@deffn {Funci@'on} rationalize (@var{expr})
Convierte todos los n@'umeros en coma flotante de doble precisi@'on y grandes (big float) presentes en una expresi@'on @var{expr} de Maxima a sus formas racionales exactas equivalentes. Si el usuario no est@'a familiarizado con la representaci@'on binaria de n@'umeros en coma flotante, le puede extra@~nar que @code{rationalize (0.1)} no sea igual que 1/10.  Este comportamiento no es @'unico de Maxima, ya que el n@'umero 1/10 en su forma binaria es peri@'odico y no exacto.

@c ===beg===
@c rationalize (0.5);
@c rationalize (0.1);
@c fpprec : 5$
@c rationalize (0.1b0);
@c fpprec : 20$
@c rationalize (0.1b0);
@c rationalize (sin (0.1*x + 5.6));
@c ===end===
@example
(%i1) rationalize (0.5);
                                1
(%o1)                           -
                                2
(%i2) rationalize (0.1);
                               1
(%o2)                          --
                               10
(%i3) fpprec : 5$
(%i4) rationalize (0.1b0);
                             209715
(%o4)                        -------
                             2097152
(%i5) fpprec : 20$
(%i6) rationalize (0.1b0);
                     236118324143482260685
(%o6)                ----------------------
                     2361183241434822606848
(%i7) rationalize (sin (0.1*x + 5.6));
                              x    28
(%o7)                     sin(-- + --)
                              10   5
@end example

Ejemplo de uso:

@c ===beg===
@c unitfrac(r) := block([uf : [], q],
@c     if not(ratnump(r)) then 
@c        error("The input to 'unitfrac' must be a rational number"),
@c     while r # 0 do (
@c         uf : cons(q : 1/ceiling(1/r), uf),
@c         r : r - q),
@c     reverse(uf));
@c unitfrac (9/10);
@c apply ("+", %);
@c unitfrac (-9/10);
@c apply ("+", %);
@c unitfrac (36/37);
@c apply ("+", %);
@c ===end===
@example
(%i1) unitfrac(r) := block([uf : [], q],
    if not(ratnump(r)) then
       error("The input to 'unitfrac' must be a rational number"),
    while r # 0 do (
        uf : cons(q : 1/ceiling(1/r), uf),
        r : r - q),
    reverse(uf))$
(%i2) unitfrac (9/10);
                            1  1  1
(%o2)                      [-, -, --]
                            2  3  15
(%i3) apply ("+", %);
                               9
(%o3)                          --
                               10
(%i4) unitfrac (-9/10);
                                  1
(%o4)                       [- 1, --]
                                  10
(%i5) apply ("+", %);
                                9
(%o5)                         - --
                                10
(%i6) unitfrac (36/37);
                        1  1  1  1    1
(%o6)                  [-, -, -, --, ----]
                        2  3  8  69  6808
(%i7) apply ("+", %);
                               36
(%o7)                          --
                               37
@end example
@end deffn



@deffn {Funci@'on} ratnump (@var{expr})
Devuelve @code{true} si @var{expr} es un entero literal o una fracci@'on de enteros literales, en caso contrario devuelve @code{false}.

@end deffn








@page
@node Cadenas de texto, Constantes, N@'umeros, Tipos de datos y estructuras
@section Cadenas de texto


@menu
* Introducci@'on a las cadenas de texto::
* Funciones y variables para las cadenas de texto::
@end menu




@node Introducci@'on a las cadenas de texto, Funciones y variables para las cadenas de texto, Cadenas de texto, Cadenas de texto
@subsection Introducci@'on a las cadenas de texto




Las cadenas de caracteres deben ir acotadas por comillas dobles (@code{"})
al ser introducidas en Maxima, siendo luego mostradas con o sin ellas, 
dependiendo del valor de la variable global @code{stringdisp}.

Las cadenas pueden contener todo tipo de caracteres, incluyendo tabulaciones,
caracteres de nueva l@'{@dotless{i}}nea y de retorno.
La secuencia @code{\"} se reconoce literalmente como una comilla doble, al
tiempo que @code{\\} se interpreta como una barra invertida. Cuando la barra
invertida aparece al final de una l@'{@dotless{i}}nea, tanto la barra como el
final de l@'{@dotless{i}}nea (representado @'este bien por el car@'acter de nueva 
l@'{@dotless{i}}nea o el de retorno) son ignorados, de forma que la cadena
contin@'ua en el siguiente rengl@'on. No se reconocen m@'as combinaciones especiales
de la barra invertida con otros caracteres aparte de las comentadas; de modo
que si la barra invertida aparece antes de cualquier otro car@'acter distinto de
@code{"}, @code{\}, o de un final de l@'{@dotless{i}}nea, dicha barra ser@'a
ignorada.
No hay manera de representar los caracteres especiales
(tabulaci@'on, nueva l@'{@dotless{i}}nea o retorno) de otra
forma que no sea incluy@'endolos literalmente en la cadena.

No existe en Maxima el tipo de variable car@'acter, debi@'endose
representar un car@'acter simple como una cadena de un solo car@'acter.

El paquete adicional @code{stringproc} contiene muchas funciones que
permiten trabajar con cadenas.

Ejemplos:

@c ===beg===
@c s_1 : "This is a string.";
@c s_2 : "Embedded \"double quotes\" and backslash \\ characters.";
@c s_3 : "Embedded line termination
@c in this string.";
@c s_4 : "Ignore the \
@c line termination \
@c characters in \
@c this string.";
@c stringdisp : false;
@c s_1;
@c stringdisp : true;
@c s_1;
@c ===end===
@example
(%i1) s_1 : "This is a string.";
(%o1)               This is a string.
(%i2) s_2 : "Embedded \"double quotes\" and backslash \\ characters.";
(%o2) Embedded "double quotes" and backslash \ characters.
(%i3) s_3 : "Embedded line termination
in this string.";
(%o3) Embedded line termination
in this string.
(%i4) s_4 : "Ignore the \
line termination \
characters in \
this string.";
(%o4) Ignore the line termination characters in this string.
(%i5) stringdisp : false;
(%o5)                         false
(%i6) s_1;
(%o6)               This is a string.
(%i7) stringdisp : true;
(%o7)                         true
(%i8) s_1;
(%o8)              "This is a string."
@end example








@node Funciones y variables para las cadenas de texto, , Introducci@'on a las cadenas de texto, Cadenas de texto
@subsection Funciones y variables para las cadenas de texto



@deffn {Funci@'on} concat (@var{arg_1}, @var{arg_2}, ...)
Concatena sus argumentos, que deben ser todos @'atomos.
El valor devuelto es un s@'{@dotless{i}}mbolo si el primer argumento es a su vez un s@'{@dotless{i}}mbolo, o una cadena en caso contrario.

La funci@'on @code{concat} eval@'ua sus argumentos.
El ap@'atrofo  @code{'} evita la evaluaci@'on.

@example
(%i1) y: 7$
(%i2) z: 88$
(%i3) concat (y, z/2);
(%o3)                          744
(%i4) concat ('y, z/2);
(%o4)                          y44
@end example

A un s@'{@dotless{i}}mbolo construido por @code{concat} se le puede asignar un valor y ser utilizado posteriormente en expresiones.
La asignaci@'on con el operador @code{::} eval@'ua su expresi@'on izquierda.

@example
(%i5) a: concat ('y, z/2);
(%o5)                          y44
(%i6) a:: 123;
(%o6)                          123
(%i7) y44;
(%o7)                          123
(%i8) b^a;
                               y44
(%o8)                         b
(%i9) %, numer;
                               123
(%o9)                         b
@end example

N@'otese que aunque @code{concat (1, 2)} parezca un n@'umero, se trata de una cadena.

@example
(%i10) concat (1, 2) + 3;
(%o10)                       12 + 3
@end example

@end deffn



@deffn {Funci@'on} sconcat (@var{arg_1}, @var{arg_2}, ...)

Concatena sus argumentos para producir una cadena.
Al contrario que @code{concat}, sus argumentos @i{no} necesitan ser @'atomos.

El resultado es una cadena.

@example
(%i1) sconcat ("xx[", 3, "]:", expand ((x+y)^3));
(%o1)               xx[3]:y^3+3*x*y^2+3*x^2*y+x^3
@end example
@end deffn



@deffn {Funci@'on} string (@var{expr})
Convierte @code{expr} a la notaci@'on lineal de Maxima, tal como si fuese tecleada.

El valor que retorna la funci@'on @code{string} es una cadena, por lo que no puede ser utilizada en los c@'alculos.

@end deffn


@defvr {Variable opcional} stringdisp
Valor por defecto: @code{false}

Si @code{stringdisp} vale @code{true},
las cadenas alfanum@'ericas se muestran encerradas entre comillas dobles. En caso contrario, no se nuestran las comillas.

La variable @code{stringdisp} vale siempre @code{true} cuando se muestra la definici@'on de una funci@'on.


Ejemplos:

@c ===beg===
@c stringdisp: false$
@c "This is an example string.";
@c foo () := 
@c       print ("This is a string in a function definition.");
@c stringdisp: true$
@c "This is an example string.";
@c ===end===
@example
(%i1) stringdisp: false$
(%i2) "This is an example string.";
(%o2)              This is an example string.
(%i3) foo () :=
      print ("This is a string in a function definition.");
(%o3) foo() := 
              print("This is a string in a function definition.")
(%i4) stringdisp: true$
(%i5) "This is an example string.";
(%o5)             "This is an example string."
@end example

@end defvr

