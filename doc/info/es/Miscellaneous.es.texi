@c English version 2013-08-03
@menu
* Introducci@'on a la miscel@'anea de opciones::  
* Share::  
* Funciones y variables para la miscel@'anea de opciones::
@end menu

@node Introducci@'on a la miscel@'anea de opciones, Share, Miscel@'anea de opciones, Miscel@'anea de opciones

@section Introducci@'on a la miscel@'anea de opciones

En esta secci@'on se comentan varias opciones que tienen un efecto global sobre le comportamiento
de Maxima. Tambi@'en se comentan varias listas, como la de las funciones definidas por el usuario.









@node Share, Funciones y variables para la miscel@'anea de opciones, Introducci@'on a la miscel@'anea de opciones, Miscel@'anea de opciones

@section Share

El directorio "share" de Maxima contiene programas y ficheros de inter@'es para
los usuarios de Maxima, pero no forman parte del n@'ucleo de Maxima. Estos programas 
se cargan en memoria con llamadas a las funciones @code{load} o @code{setup_autoload}.

El c@'odigo @code{:lisp *maxima-sharedir*} muestra la localizaci@'on del directorio 
"share" dentro del sistema de ficheros del usuario.

El c@'odigo @code{printfile ("share.usg")} muestra una lista actualizada de paquetes 
en "share". Los usuarios pueden encontrar m@'as informaci@'on accediendo directamente
a los contenidos del directorio "share".









@node Funciones y variables para la miscel@'anea de opciones,  , Share, Miscel@'anea de opciones
@section Funciones y variables para la miscel@'anea de opciones


@defvr {Variable del sistema} askexp
Cuando se invoca a @code{asksign}, la expresi@'on que se va 
a analizar es precisamente @code{askexp}.

@end defvr



@defvr {Variable optativa} genindex
Valor por defecto: @code{i}

La variable @code{genindex} es el prefijo alfab@'etico utilizado para generar la siguiente variable de sumaci@'on en caso de necesidad.

@end defvr



@defvr {Variable optativa} gensumnum
Valor por defecto: 0

La variable @code{gensumnum} es el sufijo num@'erico utilizado para generar la siguiente variable de sumaci@'on. Si vale  @code{false} entonces el @'{@dotless{i}}ndice consistir@'a solamente de  @code{genindex}, sin sufijo num@'erico.
@end defvr




@deffn  {Funci@'on} gensym ()
@deffnx {Funci@'on} gensym (@var{x})

@code{gensym()} crea y devuelve una nueva s@'{@dotless{i}}mbolo o
variable sin valor asignado.

El nombre del nuevo s@'{@dotless{i}}mbolo est@'a formado por la
concatenaci@'on de un prefijo, cuyo valor por defecto es "g", y de
un sufijo, el cual es la representaci@'on decimal de un n@'umero que
coincide, por defecto, con el valor de un contador interno de Lisp.

En caso de suministrar el argumento @var{x}, siendo este una cadena,
se utilizar@'a como prefijo en lugar de "g", lo cual tendr@'a efecto
s@'olo para esta llamada a @code{gensym}·

En caso de suministrar el argumento @var{x}, siendo este un n@'umero
entero, se utilizar@'a como sufijo en lugar del contador interno de
Lisp, lo cual tendr@'a efecto s@'olo para esta llamada a @code{gensym}·

Si no se suministra el sufijo en forma expl@'{@dotless{i}}cita, y s@'olo
en este caso, el contador interno sufrir@'a un incremento despu@'es de
haber sido utilizado.

Ejemplos:

@c ===beg===
@c gensym();
@c gensym("new");
@c gensym(123);
@c ===end===
@example
(%i1) gensym();
(%o1)                         g887
(%i2) gensym("new");
(%o2)                        new888
(%i3) gensym(123);
(%o3)                         g123
@end example
@end deffn



@defvr {Variable opcional} packagefile
Valor por defecto: @code{false}

Los autores de paquetes que utilizan @code{save} o @code{translate}
para crear librer@'{@dotless{i}}as para otros usuarios pueden hacer la asignaci@'on
@code{packagefile: true} para prevenir que se a@~nada informaci@'on a las listas
con informaci@'on del sistema de Maxima, como @code{values} o @code{functions}.
@end defvr



@deffn {Funci@'on} remvalue (@var{nombre_1}, ..., @var{nombre_n})
@deffnx {Funci@'on} remvalue (all)

Elimina del sistema los valores de las variable de usuario @var{nombre_1}, ..., @var{nombre_n} (incluso las que tienen sub@'{@dotless{i}}ndices).

La llamada @code{remvalue (all)} elimina los valores de todas las variables en @code{values}, la lista de todas las variables a las que el usuario a dado alg@'un nombre, pero no de aqu@'ellas a las que Maxima asigna autom@'aticamente un valor.

V@'ease tambi@'en @code{values}.

@end deffn



@deffn {Funci@'on} rncombine (@var{expr})

Transforma @var{expr} combinando todos los t@'erminos de @var{expr} que tengan denominadores id@'enticos o que difieran unos de otros por factores num@'ericos. Su comportamiento es diferente al de la funci@'on @code{combine}, que combina t@'erminos con iguales denominadores.

Haciendo @code{pfeformat: true} y utilizando @code{combine} se consiguen resultados similares a aqu@'ellos que se pueden obtener con  @code{rncombine}, pero @code{rncombine} realiza el paso adicional de multiplicar denominadores num@'ericos. Esto da como resultado expresiones en las que se pueden reconocer algunas cancelaciones.

Antes de utilizar esta funci@'on ejec@'utese @code{load(rncomb)}.
@end deffn





@deffn {Funci@'on} setup_autoload (@var{nombre_fichero}, @var{funci@'on_1}, ..., @var{funci@'on_n})

Especifica que si alguna de las funciones @var{function_1}, ..., @var{function_n} es referenciada pero todav@'{@dotless{i}}a no ha sido definida, se cargar@'a @var{nombre_fichero} mediante una llamada a @code{load}. El @var{nombre_fichero} normalmente contendr@'a las definiciones de las funciones especificadas, aunque esto no es imperativo.

La funci@'on @code{setup_autoload} no opera con arreglos de funciones.

La funci@'on @code{setup_autoload} no eval@'ua sus argumentos.

Ejemplo:

@example
(%i1) legendre_p (1, %pi);
(%o1)                  legendre_p(1, %pi)
(%i2) setup_autoload ("specfun.mac", legendre_p, ultraspherical);
(%o2)                         done
(%i3) ultraspherical (2, 1/2, %pi);
Warning - you are redefining the Macsyma function ultraspherical
Warning - you are redefining the Macsyma function legendre_p
                            2
                 3 (%pi - 1)
(%o3)            ------------ + 3 (%pi - 1) + 1
                      2
(%i4) legendre_p (1, %pi);
(%o4)                          %pi
(%i5) legendre_q (1, %pi);
                              %pi + 1
                      %pi log(-------)
                              1 - %pi
(%o5)                 ---------------- - 1
                             2
@end example

@end deffn



@deffn  {Funci@'on} tcl_output (@var{list}, @var{i0}, @var{skip})
@deffnx {Funci@'on} tcl_output (@var{list}, @var{i0})
@deffnx {Funci@'on} tcl_output ([@var{list_1}, @dots{}, @var{list_n}], @var{i})

Imprime los elementos de una lista encerr@'andolos con llaves @code{@{ @}},
de forma apropiada para ser utilizado en un programa en el lenguaje Tcl/Tk.

@code{tcl_output (@var{list}, @var{i0}, @var{skip})}
imprime @var{list}, empezando por el elemento @var{i0} siguiendo luego con los
elementos @code{@var{i0} + @var{skip}}, @code{@var{i0} + 2 @var{skip}}, etc.

@code{tcl_output (@var{list}, @var{i0})}
equivale a @code{tcl_output (@var{list}, @var{i0}, 2)}.

@code{tcl_output ([@var{list_1}, ..., @var{list_n}], @var{i})}
imprime los @var{i}-@'esimos elementos de @var{list_1}, @dots{}, @var{list_n}.

Ejemplos:

@c EXAMPLE INPUT
@c tcl_output ([1, 2, 3, 4, 5, 6], 1, 3)$
@c tcl_output ([1, 2, 3, 4, 5, 6], 2, 3)$
@c tcl_output ([3/7, 5/9, 11/13, 13/17], 1)$
@c tcl_output ([x1, y1, x2, y2, x3, y3], 2)$
@c tcl_output ([[1, 2, 3], [11, 22, 33]], 1)$

@c EXAMPLE OUTPUT: CLISP
@c OUTPUT IS OK FOR FIRST TWO, BROKEN FOR OTHERS
@c GCL OUTPUT: SAME FOR FIRST TWO
@c GCL FAILS ON OTHERS (IN EACH CASE COMPLAINING ELEMENTS ARE "not of type (OR RATIONAL LISP:FLOAT)"
@example
(%i1) tcl_output ([1, 2, 3, 4, 5, 6], 1, 3)$

 @{1.000000000     4.000000000     
 @}
(%i2) tcl_output ([1, 2, 3, 4, 5, 6], 2, 3)$

 @{2.000000000     5.000000000     
 @}
(%i3) tcl_output ([3/7, 5/9, 11/13, 13/17], 1)$

 @{((RAT SIMP) 3 7) ((RAT SIMP) 11 13) 
 @}
(%i4) tcl_output ([x1, y1, x2, y2, x3, y3], 2)$

 @{$Y1 $Y2 $Y3 
 @}
(%i5) tcl_output ([[1, 2, 3], [11, 22, 33]], 1)$

 @{SIMP 1.000000000     11.00000000     
 @}
@end example
@end deffn

