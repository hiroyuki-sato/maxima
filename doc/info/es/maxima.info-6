This is maxima.info, produced by makeinfo version 4.7 from maxima.texi.

   Este es el Manual de Maxima en versión Texinfo

   Copyright 1994, 2001 William F. Schelter

START-INFO-DIR-ENTRY
* Maxima: (maxima).  Un sistema de cálculo simbólico
END-INFO-DIR-ENTRY


File: maxima.info,  Node: Definiciones para linearalgebra,  Prev: Introducción a linearalgebra,  Up: linearalgebra

56.2 Definiciones para linearalgebra
====================================

 -- Función: addmatrices (<f>, <M_1>, ..., <M_n>)
     Utiliza la función <f> como una función aditiva, devolviendo la
     suma de las matrices <M_1>, ..., <M_n>. La función <f> debe ser
     tal que acepte un número arbitrario de argumentos; en otras
     palabras, será una función n-aria de Maxima.

     Ejemplos:

          (%i1) m1 : matrix([1,2],[3,4])$
          (%i2) m2 : matrix([7,8],[9,10])$
          (%i3) addmatrices('max,m1,m2);
          (%o3) matrix([7,8],[9,10])
          (%i4) addmatrices('max,m1,m2,5*m1);
          (%o4) matrix([7,10],[15,20])


 -- Función: blockmatrixp (<M>)
     Devuelve el valor `true' si y solo si <M> es una matriz cuyos
     elementos son a su vez matrices.


 -- Función: columnop (<M>, <i>, <j>, <theta>)
     Si <M> es una matriz, devuelve la matriz que resulta de hacer la
     operación columna `C_i <- C_i - <theta> * C_j'. Si <M> carece de
     cualquiera de las filas <i> o <j>, devuelve un mensaje de error.


 -- Función: columnswap (<M>, <i>, <j>)
     Si <M> es una matriz, intercambia las columnas <i> y <j>.  Si <M>
     carece de cualquiera de las filas <i> o <j>, devuelve un mensaje
     de error.


 -- Función: columnspace (<M>)
     Si <M> es una matriz, devuelve `span (v_1, ..., v_n)', donde el
     conjunto `{v_1, ..., v_n}' es la base del espacio generado por las
     columnas de <M>.


 -- Función: copy (<e>)
     Devuelve una copia de la expresión <e> de Maxima. Aunque <e> puede
     ser cualquier expresión de Maxima, la función `copy' es
     especialmente útil cuando <e> es una lista o una matriz.
     Considérese el siguiente ejemplo: m : [1,[2,3]]$ mm : m$ mm[2][1]
     : x$ m; mm;
          (%i1) m : [1,[2,3]]$
          (%i2) mm : m$
          (%i3) mm[2][1] : x$
          (%i4) m;
          (%o4)                      [1,[x,3]]
          (%i5) mm;
          (%o5)                      [1,[x,3]]
     Veamos el mismo ejemplo siendo ahora <mm> una copia de <m> m :
     [1,[2,3]]$ mm : copy(m)$ mm[2][1] : x$ m; mm;
          (%i6) m : [1,[2,3]]$
          (%i7) mm : copy(m)$
          (%i8) mm[2][1] : x$
          (%i9) m;
          (%o9)                     [1,[2,3]]
          (%i10) mm;
          (%o10)                    [1,[x,3]]
     En esta ocasión, la asignación a <mm> no cambia el valor de <m>.


 -- Función: cholesky (<M>)
 -- Función: cholesky (<M>, <field>)
     Devuelve la factorización de Cholesky de la matriz autoadjunta (o
     hermítica) <M>. El valor por defecto del segundo argumento es
     <generalring>. Para una descripción de los posibles valores para
     <field>, véase `lu_factor'.


 -- Función: ctranspose (<M>)
     Devuelve la transpuesta compleja conjugada de la matriz <M>. La
     función `ctranspose' utiliza `matrix_element_transpose' para
     transponer cada elemento de la matriz.


 -- Función: diag_matrix (<d_1>, <d_2>,...,<d_n>)
     Devuelve una matriz diagonal con los elementos de la diagonal
     iguales a <d_1>, <d_2>,...,<d_n>; cuando éstos son matrices, los
     elementos nulos de la matriz devuelta son matrices nulas de tamaño
     apropiado. Por ejemplo:
          (%i1) diag_matrix(diag_matrix(1,2),diag_matrix(3,4));

                                      [ [ 1  0 ]  [ 0  0 ] ]
                                      [ [      ]  [      ] ]
                                      [ [ 0  2 ]  [ 0  0 ] ]
          (%o1)                       [                    ]
                                      [ [ 0  0 ]  [ 3  0 ] ]
                                      [ [      ]  [      ] ]
                                      [ [ 0  0 ]  [ 0  4 ] ]
          (%i2) diag_matrix(p,q);

                                             [ p  0 ]
          (%o2)                              [      ]
                                             [ 0  q ]

 -- Función: dotproduct (<u>, <v>)
     Devuelve el producto escalar de los vectores <u> y <v>. Equivale a
     `conjugate (transpose (<u>)) . <v>'. Los argumentos <u> y <v>
     deben ser vectores columna.


 -- Función: eigens_by_jacobi (<A>)
 -- Función: eigens_by_jacobi (<A>, <field_type>)
     Calcula los valores y vectores propios de <A> por el método de las
     rotaciones de Jacobi. <A> debe ser una matriz simétrica (aunque no
     necesariamente definida o semidefinida positiva).  El argumento
     <field_type> indica el tipo numérico sobre el que se realizan los
     cálculos, que puede ser tanto `floatfield' como `bigfloatfield'.
     En caso de que no se especifique <field_type>, su valor por
     defecto será `floatfield'.

     Los elementos de <A> deben ser números o expresiones reducibles a
     números mediante la ejecución de `float' o `bfloat', según sea el
     valor de <field_type>.

     Ejemplos:

          (%i1) S : matrix ([1/sqrt(2), 1/sqrt(2)], [- 1/sqrt(2), 1/sqrt(2)]);
                               [     1         1    ]
                               [  -------   ------- ]
                               [  sqrt(2)   sqrt(2) ]
          (%o1)                [                    ]
                               [      1        1    ]
                               [ - -------  ------- ]
                               [   sqrt(2)  sqrt(2) ]
          (%i2) L : matrix ([sqrt(3), 0], [0, sqrt(5)]);
                                [ sqrt(3)     0    ]
          (%o2)                 [                  ]
                                [    0     sqrt(5) ]
          (%i3) M : S . L . transpose (S);
                      [ sqrt(5)   sqrt(3)  sqrt(5)   sqrt(3) ]
                      [ ------- + -------  ------- - ------- ]
                      [    2         2        2         2    ]
          (%o3)       [                                      ]
                      [ sqrt(5)   sqrt(3)  sqrt(5)   sqrt(3) ]
                      [ ------- - -------  ------- + ------- ]
                      [    2         2        2         2    ]
          (%i4) eigens_by_jacobi (M);
          The largest percent change was 0.1454972243679
          The largest percent change was 0.0
          number of sweeps: 2
          number of rotations: 1
          (%o4) [[1.732050807568877, 2.23606797749979],
                                  [  0.70710678118655   0.70710678118655 ]
                                  [                                      ]]
                                  [ - 0.70710678118655  0.70710678118655 ]
          (%i5) float ([[sqrt(3), sqrt(5)], S]);
          (%o5) [[1.732050807568877, 2.23606797749979],
                                  [  0.70710678118655   0.70710678118655 ]
                                  [                                      ]]
                                  [ - 0.70710678118655  0.70710678118655 ]
          (%i6) eigens_by_jacobi (M, bigfloatfield);
          The largest percent change was 1.454972243679028b-1
          The largest percent change was 0.0b0
          number of sweeps: 2
          number of rotations: 1
          (%o6) [[1.732050807568877b0, 2.23606797749979b0],
                          [  7.071067811865475b-1   7.071067811865475b-1 ]
                          [                                              ]]
                          [ - 7.071067811865475b-1  7.071067811865475b-1 ]


 -- Función: get_lu_factors (<x>)
     Cuando `<x> = lu_factor (<A>)', entonces `get_lu_factors' devuelve
     una lista de la forma `[P, L, U]', donde <P> es una matriz
     permutación, <L> es triangular inferior con unos en la diagonal y
     <U> es triangular superior, verificándose que `<A> = <P> <L> <U>'.


 -- Función: hankel (<col>)
 -- Función: hankel (<col>, <row>)
     Devuelve la matriz de Hankel <H>. La primera columna de <H>
     coincide con <col>, excepto en el primer elemento, la última fila
     de <H> es <row>. El valor por defecto para <row> es el vector nulo
     con igual número de elementos que <col>.


 -- Función: hessian (<f>,<vars>)
     Devuelve la matriz hessiana de <f> con respecto de las variables de
     la lista <vars>. El elemento <i>,<j>-ésimo de la matriz hessiana
     es <diff(f vars[i],1,vars[j],1)>.


 -- Función: hilbert_matrix (<n>)
     Devuelve la matriz de Hilbert <n> por <n>. Si <n> no es un entero
     positivo, emite un mensaje de error.


 -- Función: identfor (<M>)
 -- Función: identfor (<M>, <fld>)
     Devuelve una matriz identidad con la misma forma que la matriz
     <M>. Los elementos de la diagonal de la matriz identidad son la
     identidad multiplicativa del campo <fld>; el valor por defecto
     para <fld> es <generalring>.

     El primer argumento <M> debe ser una matriz cuadrada o no ser
     matriz en absoluto. Si <M> es una matriz, sus elementos pueden ser
     matrices cuadradas. La matriz puede tener bloques a cualquier nivel
     finito de profundidad.

     Véase también `zerofor'


 -- Función: invert_by_lu (<M>, <(rng generalring)>)
     Invierte la matriz <M> mediante la factorización LU, la cual se
     hace utilizando el anillo <rng>.


 -- Función: kronecker_product (<A>, <B>)
     Devuelve el producto de Kroneckerde las matrices <A> y <B>.


 -- Función: listp (<e>, <p>)
 -- Función: listp (<e>)
     Dado el argumento opcional <p>, devuelve `true' si <e> es una
     lista de Maxima y <p> toma el valor `true' al aplicarlo a cada
     elemento de la lista. Si a `listp' no se le suministra el
     argumento opcional, devuelve `true' si <e> es una lista de Maxima.
     En cualquier otro caso, el resultado es `false'.


 -- Función: locate_matrix_entry (<M>, <r_1>, <c_1>, <r_2>, <c_2>, <f>,
          <rel>)
     El primer argumento debe ser una matriz, mientras que los
     argumentos desde <r_1> hasta <c_2> determinan la submatriz de <M>
     tomando las filas desde <r_1> hasta <r_2> y las columnas desde
     <c_1> hasta <c_2>.

     La función `locate_matrix_entry' busca en la submatriz de <M> un
     elemento que satisfaga cierta propiedad. hay tres posibilidades:

     (1) `<rel> = 'bool' y <f> es un predicado:

     Rastrea la submatriz de izquierda a derecha y de arriba hacia
     abajo, devolviendo el índice del primer elemento que satisface el
     predicado <f>; si ningún elemento lo satisface, el resultado es
     `false'.

     (2) `<rel> = 'max' y <f> una función real:

     Rastrea la submatriz buscando el elemento que maximice <f>,
     devolviendo el índice correspondiente.

     (3) `<rel> = 'min' y <f> una función real:

     Rastrea la submatriz buscando el elemento que minimice <f>,
     devolviendo el índice correspondiente.


 -- Función: lu_backsub (<M>, <b>)
     Si `<M> = lu_factor (<A>, <field>)', entonces `lu_backsub (<M>,
     <b>)' resuelve el sistema de ecuaciones lineales `<A> <x> = <b>'.


 -- Función: lu_factor (<M>, <field>)
     Devuelve una lista de la forma `[<LU>, <perm>, <fld>]', o `[<LU>,
     <perm>, <fld>, <lower-cnd> <upper-cnd>]', donde

        * La matriz <LU> contiene la factorización de <M> de forma
          empaquetada, lo que significa tres cosas. En primer lugar,
          que las filas de <LU> están permutadas de acuerdo con la
          lista <perm>; por ejemplo, si <perm> es la lista `[3,2,1]',
          la primera fila de la factorización <LU> es la tercera fila
          de la matriz <LU>.  En segundo lugar, el factor triangular
          inferior de <M> es la parte triangular inferior de <LU> con
          los elementos de la diagonal sustituidos por unos. Por
          último, el factor triangular superior de <M> es la parte
          triangular superior de <LU>.

        * Si el campo es `floatfield' o `complexfield', los números
          <lower-cnd> y <upper-cnd> son las cotas inferior y superior
          del número de condición de la norma infinita de <M>. El
          número de condición no se puede estimar para todos los campos,
          en cuyo caso `lu_factor' devuelve una lista de dos elementos.
          Tanto la cota inferior como la superior pueden diferir de sus
          valores verdaderos. Véase también `mat_cond'.


     El argumento <M> debe ser una matriz cuadrada.

     El argumento opcional <fld> debe ser un símbolo que determine un
     anillo o un campo. Los anillos y campos predefinidos son:

       a. `generalring' - el anillo de las expresiones de Maxima

       b. `floatfield' - el campo de los números decimales en coma
          flotante de doble precisión

       c. `complexfield' - el campo de los números complejos decimales
          en coma flotante de doble precisión

       d. `crering'  - el anillo de las expresiones canónicas
          racionales (Canonical Rational Expression o CRE) de Maxima

       e. `rationalfield' - el campo de los números racionales

       f. `runningerror' - controla los errores de redondeo de las
          operaciones en coma flotante

       g. `noncommutingring' - el anillo de las expresiones de Maxima
          en las que el producto es el operador no conmutativo "."


     Si el campo es `floatfield', `complexfield' o `runningerror', el
     algoritmo utiliza pivoteo parcial; para los demás campos, las
     filas se cambian cuando se necesita evitar pivotes nulos.

     La suma aritmética en coma flotante no es asociativa, por lo que el
     significado de 'campo' no coincide exactamente con su definición
     matemática.

     Un elemento del campo `runningerror' consiste en una lista de
     Maxima de la forma `[x,n]', donde <x> es un número decimal en coma
     flotante y `n' un enetro. La diferencia relativa entre el valor
     real de `x' y `x' está aproximadamente acotado por el valor
     epsilon de la máquina multiplicado por `n'.

     No es posible la definición de un nuevo campo por parte del
     usuario, a menos que éste tenga conocimientos de Common Lisp. Para
     hacerlo, el usuario debe definir funciones para las operaciones
     aritméticas y para convertir de la representación del campo a
     Maxima y al revés. Además, en los campos ordenados, donde se hace
     uso del pivoteo parcial, el usuario debe definir funciones para el
     módulo y para comparar números del campo. Después de lo anterior,
     tan solo queda definir una estructura Common Lisp `mring'. El
     fichero `mring' tiene muchos ejemplos.

     Para calcular la factorización, la primera tarea consiste en
     convertir cada elemento de la matriz a un elemento del campo
     especificado. Si la conversión no es posible, la factorización se
     detiene con un mensaje de error. Los elementos del campo no
     necesitan ser expresiones de Maxima; por ejemplo, los elementos de
     `complexfield' son números complejos de Common Lisp. Tras la
     factorización, los elementos de la matriz deben convertirse
     nuevamente a expresiones de Maxima.

     Véase también  `get_lu_factors'.

     Ejemplos:

          (%i1) w[i,j] := random (1.0) + %i * random (1.0);
          (%o1)          w     := random(1.) + %i random(1.)
                          i, j
          (%i2) showtime : true$
          Evaluation took 0.00 seconds (0.00 elapsed)
          (%i3) M : genmatrix (w, 100, 100)$
          Evaluation took 7.40 seconds (8.23 elapsed)
          (%i4) lu_factor (M, complexfield)$
          Evaluation took 28.71 seconds (35.00 elapsed)
          (%i5) lu_factor (M, generalring)$
          Evaluation took 109.24 seconds (152.10 elapsed)
          (%i6) showtime : false$

          (%i7) M : matrix ([1 - z, 3], [3, 8 - z]);
                                  [ 1 - z    3   ]
          (%o7)                   [              ]
                                  [   3    8 - z ]
          (%i8) lu_factor (M, generalring);
                    [ 1 - z         3        ]
                    [                        ]
          (%o8)    [[   3            9       ], [1, 2], generalring]
                    [ -----  - z - ----- + 8 ]
                    [ 1 - z        1 - z     ]
          (%i9) get_lu_factors (%);
                            [   1    0 ]  [ 1 - z         3        ]
                  [ 1  0 ]  [          ]  [                        ]
          (%o9)  [[      ], [   3      ], [                9       ]]
                  [ 0  1 ]  [ -----  1 ]  [   0    - z - ----- + 8 ]
                            [ 1 - z    ]  [              1 - z     ]
          (%i10) %[1] . %[2] . %[3];
                                  [ 1 - z    3   ]
          (%o10)                  [              ]
                                  [   3    8 - z ]


 -- Función: mat_cond (<M>, 1)
 -- Función: mat_cond (<M>, inf)
     Devuelve el número de condición de la <p>-norma de la matriz <M>.
     Los valores admisibles para  <p> son 1 y <inf>. Esta función
     utiliza la factorización LU para invertir la matriz <M>, por lo
     que el tiempo de ejecución de `mat_cond' es proporcional al cubo
     del tamaño de la matriz; `lu_factor' determina las cotas inferior
     y superior para el número de condición de la norma infinita en un
     tiempo proporcional al cuadrado del tamaño de la matriz.


 -- Función: mat_norm (<M>, 1)
 -- Función: mat_norm (<M>, inf)
 -- Función: mat_norm (<M>, frobenius)
     Devuelve la <p>-norma de la matriz <M>. Los valores admisibles
     para <p> son 1, `inf' y `frobenius' (la norma matricial de
     Frobenius).  La matriz <M> no debe contener bloques.

 -- Función: matrixp (<e>, <p>)
 -- Función: matrixp (<e>)
     Dado el argumento opcional <p>, devuelve `true' si <e> es una
     matriz y <p> toma el valor `true' al aplicarlo a cada elemento de
     la matriz. Si a `matrixp' no se le suministra el argumento
     opcional, devuelve `true' si <e> es una matriz.  En cualquier otro
     caso, el resultado es `false'.

     Véase también `blockmatrixp'


 -- Función: matrix_size (<M>)
     Devuelve una lista con el número de filas y columnas de la matriz
     <M>.


 -- Función: mat_fullunblocker (<M>)
     Si <M> es una matriz de bloques, transforma la matriz llevando
     todos los elementos de los bloques al primer nivel. Si <M> es una
     matriz, devuelve <M>; en cualquier otro caso, envía un mensaje de
     error.


 -- Función: mat_trace (<M>)
     Calcula la traza de la matriz <M>. Si <M> no es una matriz,
     devuelve una forma nominal. Si <M> es una matriz de bloques,
     `mat_trace(M)' calcula el mismo valor que
     `mat_trace(mat_unblocker(m))'.


 -- Función: mat_unblocker (<M>)
     Si <M> es una matriz de bloques, deshace los bloques de un nivel.
     Si <M> es una matriz, `mat_unblocker (M)' devuelve <M>; en
     cualquier otro caso, envía un mensaje de error.

     Si todos los elementos de <M> son matrices, `mat_unblocker (M)'
     devuelve una matriz sin bloques, pero si los elementos de <M> son
     a su vez matrices de bloques, `mat_unblocker (M)' devuelve una
     matriz con el nivel de bloques disminuido en uno.

     En caso de trabajar con matrices de bloques, quizás sea
     conveniente darle a `matrix_element_mult' el valor `"."' y a
     `matrix_element_transpose' el valor `'transpose'. Véase también
     `mat_fullunblocker'.

     Ejemplo:

          (%i1) A : matrix ([1, 2], [3, 4]);
                                      [ 1  2 ]
          (%o1)                       [      ]
                                      [ 3  4 ]
          (%i2) B : matrix ([7, 8], [9, 10]);
                                      [ 7  8  ]
          (%o2)                       [       ]
                                      [ 9  10 ]
          (%i3) matrix ([A, B]);
                               [ [ 1  2 ]  [ 7  8  ] ]
          (%o3)                [ [      ]  [       ] ]
                               [ [ 3  4 ]  [ 9  10 ] ]
          (%i4) mat_unblocker (%);
                                   [ 1  2  7  8  ]
          (%o4)                    [             ]
                                   [ 3  4  9  10 ]


 -- Función: nonnegintegerp (<n>)
     Devuelve `true' si y solo si `<n> >= 0', siendo <n> un entero.


 -- Función: nullspace (<M>)
     Si <M> es una matriz, devuelve `span (v_1, ..., v_n)', siendo
     `{v_1, ..., v_n}' la base del espacio nulo de <M>. Si el espacio
     nulo contiene un único elemento, devuelve `span ()'.


 -- Función: nullity (<M>)
     Si <M> es una matriz, devuelve la dimensión del espacio nulo de
     <M>.


 -- Función: orthogonal_complement (<v_1>, ..., <v_n>)
     Devuelve `span (u_1, ..., u_m)', siendo `{u_1, ..., u_m}' la base
     del complemento ortogonal del conjunto `(v_1, ..., v_n)', cuyos
     elementos deben ser vectores columna.


 -- Función: polynomialp (<p>, <L>, <coeffp>, <exponp>)
 -- Función: polynomialp (<p>, <L>, <coeffp>)
 -- Función: polynomialp (<p>, <L>)
     Devuelve `true' si <p> es un polinomio cuyas variables son las de
     la lista <L>, el predicado <coeffp> toma el valor `true' al
     aplicarlo a cada coeficiente y el predicado <exponp> también
     alcanza el valor `true' al ser aplicado a los exponentes de las
     variables listadas en <L>. En caso de necesitar que <exponp> no
     sea un predicado por defecto, se deberá especificar también el
     predicado <coeffp>, aunque aquí se desee su comportamiento por
     defecto.

     `polynomialp (<p>, <L>, <coeffp>)' equivale a `polynomialp (<p>,
     <L>, <coeffp>, 'nonnegintegerp)'.

     `polynomialp (<p>, <L>)' equivale a `polynomialp (<p>, L<,>
     'constantp, 'nonnegintegerp)'.

     No es necesario expandir el polinomio:

          (%i1) polynomialp ((x + 1)*(x + 2), [x]);
          (%o1)                         true
          (%i2) polynomialp ((x + 1)*(x + 2)^a, [x]);
          (%o2)                         false

     Un ejemplo utilizando valores distintos a los utilizados por
     defecto en <coeffp> y en <exponp>:

          (%i1) polynomialp ((x + 1)*(x + 2)^(3/2), [x], numberp, numberp);
          (%o1)                         true
          (%i2) polynomialp ((x^(1/2) + 1)*(x + 2)^(3/2), [x], numberp, numberp);
          (%o2)                         true

     Polinomios con dos variables:

          (%i1) polynomialp (x^2 + 5*x*y + y^2, [x]);
          (%o1)                         false
          (%i2) polynomialp (x^2 + 5*x*y + y^2, [x, y]);
          (%o2)                         true


 -- Función: polytocompanion (<p>, <x>)
     Si <p> es un polinomio en <x>, devuelve la matriz compañera de
     <p>. Para un polinomio mónico <p> de grado <n> se tiene `<p> =
     (-1)^<n> charpoly (polytocompanion (<p>, <x>))'.

     Si <p> no es un polinomio en  <x>, se devuelve un mensaje de error.


 -- Función: ptriangularize (<M>, <v>)
     Si <M> es una matriz en la que sus elementos son polinomios en <v>,
     devuelve una matriz <M2> tal que

       1. <M2> es triangular superior,

       2. `<M2> = <E_n> ... <E_1> <M>', donde <E_1>, ..., <E_n> son
          matrices elementales cuyos elementos son polinomios en <v>,

       3. `|det (<M>)| = |det (<M2>)|',

     Nota: esta función no comprueba si los elementos de la matriz son
     polinomios en <v>.

 -- Función: rowop (<M>, <i>, <j>, <theta>)
     Si <M> es una matriz, devuelve la matriz que resulta de relizar la
     transformación `R_i <- R_i - theta * R_j' con las filas `R_i' y
     `R_j'. Si <M> no tiene estas filas, devuelve un mensaje de error.


 -- Función: rank (<M>)
     Calcula el rango de la matriz <M>. El rango es la dimensión del
     espacio columna. Ejemplo:
          (%i1) rank(matrix([1,2],[2,4]));
          (%o1)                                  1
          (%i2) rank(matrix([1,b],[c,d]));
          Proviso:  {d - b c # 0}
          (%o2)                                  2


 -- Función: rowswap (<M>, <i>, <j>)
     Si <M> es una matriz, intercambia las filas  <i> y <j>. Si <M>
     carece de estas filas, devuelve un mensaje de error.


 -- Función: toeplitz (<col>)
 -- Función: toeplitz (<col>, <row>)
     Devuelve una  matriz de Toeplitz <T>. La primera columna de <T> es
     <col>, excepto su primer elemento. La primera fila de <T> es
     <row>. El valor por defecto para <row> es el complejo conjugado de
     <col>. Ejemplo:
          (%i1)  toeplitz([1,2,3],[x,y,z]);

                                            [ 1  y  z ]
                                            [         ]
          (%o1)                             [ 2  1  y ]
                                            [         ]
                                            [ 3  2  1 ]
          (%i2)  toeplitz([1,1+%i]);

                                        [   1     1 - %I ]
          (%o2)                         [                ]
                                        [ %I + 1    1    ]


 -- Función: vandermonde_matrix ([<x_1>, ..., <x_n>])
     Devuelve una matriz <n> por <n>, cuya <i>-ésima fila es `[1,
     <x_i>, <x_i>^2, ... <x_i>^(<n>-1)]'.


 -- Función: zerofor (<M>)
 -- Función: zerofor (<M>, <fld>)
     Devuelve la matriz nula con la misma estructura que la matriz <M>.
     Cada elemento de la matriz nula es la identidad aditiva del campo
     <fld>; el valor por defecto de <fld> es <generalring>.

     El primer argumento de <M> debe ser una matriz cuadrada o no ser
     matriz en absoluto. Si <M> es una matriz, cada uno de sus
     elementos puede ser una matriz cuadrada, por lo que <M> puede ser
     una matriz de Maxima definida por bloques.

     Véase también `identfor'.


 -- Función: zeromatrixp (<M>)
     Si <M> no es una matriz definida por bloques, devuelve `true' si
     `is (equal (<e>, 0))' es verdadero para todo elemento <e> de <M>.
     Si <M> es una matriz por bloques, devuelve `true' si `zeromatrixp'
     devuelve a su vez `true' para cada elemento de <e>.



File: maxima.info,  Node: lsquares,  Next: makeOrders,  Prev: linearalgebra,  Up: Top

57 lsquares
***********

* Menu:

* Definiciones para lsquares::


File: maxima.info,  Node: Definiciones para lsquares,  Prev: lsquares,  Up: lsquares

57.1 Definiciones para lsquares
===============================

 -- Variable global: DETCOEF
     Esta variable es utilizada por las funciones `lsquares' y
     `plsquares' para almacenar el coeficiente de determinación que
     mide la bondad del ajuste, el cual varía entre 0 (ausencia de
     correlación) y 1 (dependencia exacta).

     Cuando se llama a `plsquares' con una lista de variables
     dependientes, <DETCOEF> almacena una lista de coeficientes de
     determinación. Véase `plsquares' para más detalles.

     Véase también `lsquares'.

 -- Función: lsquares (<Mat>,<VarList>,<equation>,<ParamList>)
 -- Función: lsquares
          (<Mat>,<VarList>,<equation>,<ParamList>,<GuessList>)
     Ajuste de una función multivariante a una tabla de datos por el
     método de los mínimos cuadrados.  <Mat> es la matriz con los datos
     empíricos, <VarList> es la lista con los nombres de las variables
     (una por cada columna de <Mat>), <equation> es la función a
     ajustar, la cual debe estar expresada en cualquiera de las formas
     `depvar=f(indepvari,..., paramj,...)', `g(depvar)=f(indepvari,...,
     paramj,...)' o `g(depvar, paramk,...)=f(indepvari,...,
     paramj,...)'), <ParamList> es la lista de los parámetros a estimar
     y <GuessList> es una lista opcional de aproximaciones iniciales de
     los parámetros; cuando este último argumento está presente, se
     utiliza `mnewton' en lugar de `solve' a fin de obtener los
     parámetros.

     La función puede ser no lineal con respecto a las variables, tanto
     independientes como dependiente. Al objeto de utilizar `solve()'
     las funciones deben ser lineales o polinómicas respecto de los
     parámetros. Funciones como `y=a*b^x+c' pueden ajustarse para
     `[a,b,c]' con `solve' si los valores `x' son enteros positivos
     pequeños y hay pocos datos (véase el ejemplo en `lsquares.dem').
     La función `mnewton' permite ajustar una función no lineal
     respecto de los parámetros, pero deberá suministrársele un
     conjunto de buenas aproximaciones iniciales.

     Si es posible se retornará la función ajustada. En caso de existir
     más de una solución, se devolverá una lista de funciones. El
     coeficiente de determinación se mostrará también a fin de aportar
     información sobre la bondad del ajuste, el cual varía entre 0
     (ausencia de correlación) y 1 (ajuste exacto); este valor se
     almacena también en la variable global <DETCOEF>.

     Ejemplos utilizando `solve':
          (%i1) load("lsquares")$

          (%i2) lsquares(matrix([1,2,0],[3,5,4],[4,7,9],[5,8,10]),
                         [x,y,z], z=a*x*y+b*x+c*y+d, [a,b,c,d]);
                Determination Coefficient = 1.0
                              x y + 23 y - 29 x - 19
          (%o2)           z = ----------------------
                                        6
          (%i3) lsquares(matrix([0,0],[1,0],[2,0],[3,8],[4,44]),
                         [n,p], p=a4*n^4+a3*n^3+a2*n^2+a1*n+a0,
                   [a0,a1,a2,a3,a4]);
                Determination Coefficient = 1.0
                               4       3      2
                            3 n  - 10 n  + 9 n  - 2 n
          (%o3)         p = -------------------------
                                        6
          (%i4) lsquares(matrix([1,7],[2,13],[3,25]),
                         [x,y], (y+c)^2=a*x+b, [a,b,c]);
                Determination Coefficient = 1.0
          (%o4) [y = 28 - sqrt(657 - 216 x),
                                          y = sqrt(657 - 216 x) + 28]
          (%i5) lsquares(matrix([1,7],[2,13],[3,25],[4,49]),
                         [x,y], y=a*b^x+c, [a,b,c]);
                Determination Coefficient = 1.0
                                        x
          (%o5)                  y = 3 2  + 1

     Ejemplos utilizando `mnewton':
          (%i6) load("lsquares")$

          (%i7) lsquares(matrix([1.1,7.1],[2.1,13.1],[3.1,25.1],[4.1,49.1]),
                         [x,y], y=a*b^x+c, [a,b,c], [5,5,5]);
                                                       x
          (%o7) y = 2.799098974610482 1.999999999999991
                                                  + 1.099999999999874
          (%i8) lsquares(matrix([1.1,4.1],[4.1,7.1],[9.1,10.1],[16.1,13.1]),
                         [x,y], y=a*x^b+c, [a,b,c], [4,1,2]);
                                       .4878659755898127
          (%o8) y = 3.177315891123101 x
                                                  + .7723843491402264
          (%i9) lsquares(matrix([0,2,4],[3,3,5],[8,6,6]),
                        [m,n,y], y=(A*m+B*n)^(1/3)+C, [A,B,C], [3,3,3]);
                                                               1/3
          (%o9) y = (3.999999999999862 n + 4.999999999999359 m)
                                                   + 2.00000000000012

     Antes de hacer uso de esta función ejecútese  `load("lsquares")'.
     Véanse también `DETCOEF' y `mnewton'.

 -- Función: plsquares (<Mat>,<VarList>,<depvars>)
 -- Función: plsquares (<Mat>,<VarList>,<depvars>,<maxexpon>)
 -- Función: plsquares
          (<Mat>,<VarList>,<depvars>,<maxexpon>,<maxdegree>)
     Ajuste de una función polinómica multivariante a una tabla de
     datos por el método de los mínimos cuadrados. <Mat> es la matriz
     con los datos empíricos, <VarList> es la lista con los nombres de
     las variables (una por cada columna de <Mat>, pero úsese `-' en
     lugar de los nombres de variables para ignorar las columnas de
     <Mat>), <depvars> es el nombre de la variable dependiente o una
     lista con uno o más nombres de variables dependientes (cuyos
     nombres deben estar también en <VarList>), <maxexpon> es un
     argumento opcional para indicar el máximo exponente para cada una
     de las variables independientes (1 por defecto) y  <maxdegree> es
     otro argumento opcional para el grado del polinomio (<maxexpon>
     por defecto); nótese que la suma de exponentes de cada término
     debe ser igual o menor que <maxdegree>. Si `maxdgree = 0' entonces
     no se aplicará ningún límite.

     Si <depvars> es el nombre de una variable dependiente (no en una
     lista), `plsquares' devuelve el polinomio ajustado. Si <depvars>
     es una lista de una o más variables dependientes, `plsquares'
     devuelve una lista con los polinomios ajustados. Los coeficientes
     de determinación se muestran en su orden correspondiente para
     informar sobre la bondad del ajuste. Estos valores se almacenan
     también en la variable global <DETCOEF>; en un formato de lista si
     <depvars> es a su vez una lista.

     Un ejemplo sencillo de ajuste lineal multivariante:
          (%i1) load("plsquares")$

          (%i2) plsquares(matrix([1,2,0],[3,5,4],[4,7,9],[5,8,10]),
                          [x,y,z],z);
               Determination Coefficient for z = .9897039897039897
                                 11 y - 9 x - 14
          (%o2)              z = ---------------
                                        3

     El mismo ejemplo sin restricciones en el grado:
          (%i3) plsquares(matrix([1,2,0],[3,5,4],[4,7,9],[5,8,10]),
                          [x,y,z],z,1,0);
               Determination Coefficient for z = 1.0
                              x y + 23 y - 29 x - 19
          (%o3)           z = ----------------------
                                        6

     Cálculo del número de diagonales de un polígono de N lados
          (%i4) plsquares(matrix([3,0],[4,2],[5,5],[6,9],[7,14],[8,20]),
                          [N,diagonals],diagonals,5);
               Determination Coefficient for diagonals = 1.0
                                          2
                                         N  - 3 N
          (%o4)              diagonals = --------
                                            2
          (%i5) ev(%, N=9);   /* Testing for a 9 sides polygon */
          (%o5)                 diagonals = 27

     Cálculo del número de formas de colocar dos reinas en un tablero n
     x n de manera que no se amenacen.
          (%i6) plsquares(matrix([0,0],[1,0],[2,0],[3,8],[4,44]),
                          [n,positions],[positions],4);
               Determination Coefficient for [positions] = [1.0]
                                   4       3      2
                                3 n  - 10 n  + 9 n  - 2 n
          (%o6)    [positions = -------------------------]
                                            6
          (%i7) ev(%[1], n=8); /* Testing for a (8 x 8) chessboard */
          (%o7)                positions = 1288

     Un ejemplo con seis variables dependientes:
          (%i8) mtrx:matrix([0,0,0,0,0,1,1,1],[0,1,0,1,1,1,0,0],
                            [1,0,0,1,1,1,0,0],[1,1,1,1,0,0,0,1])$
          (%i8) plsquares(mtrx,[a,b,_And,_Or,_Xor,_Nand,_Nor,_Nxor],
                               [_And,_Or,_Xor,_Nand,_Nor,_Nxor],1,0);
                Determination Coefficient for
          [_And, _Or, _Xor, _Nand, _Nor, _Nxor] =
          [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
          (%o2) [_And = a b, _Or = - a b + b + a,
          _Xor = - 2 a b + b + a, _Nand = 1 - a b,
          _Nor = a b - b - a + 1, _Nxor = 2 a b - b - a + 1]

     Antes de hacer uso de esta función ejecútese  `load("plsquares")'.


File: maxima.info,  Node: makeOrders,  Next: mnewton,  Prev: lsquares,  Up: Top

58 makeOrders
*************

* Menu:

* Definiciones para makeOrders::


File: maxima.info,  Node: Definiciones para makeOrders,  Prev: makeOrders,  Up: makeOrders

58.1 Definiciones para makeOrders
=================================

 -- Función: makeOrders (<indvarlist>,<orderlist>)
     Devuelve una lista con las potencias de las variables de un
     polinomio término a término.

          (%i1) load("makeOrders")$

          (%i2) makeOrders([a,b],[2,3]);
          (%o2) [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1],
                      [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3]]
          (%i3) expand((1+a+a^2)*(1+b+b^2+b^3));
                 2  3      3    3    2  2      2    2    2
          (%o3) a  b  + a b  + b  + a  b  + a b  + b  + a  b + a b
                                                            2
                                                     + b + a  + a + 1
     donde `[0, 1]' se asocia al término b y `[2, 3]' a a^2 b^3.

     Antes de hacer uso de esta función ejecútese `load("makeOrders")'.


File: maxima.info,  Node: mnewton,  Next: numericalio,  Prev: makeOrders,  Up: Top

59 mnewton
**********

* Menu:

* Definiciones para mnewton::


File: maxima.info,  Node: Definiciones para mnewton,  Prev: mnewton,  Up: mnewton

59.1 Definiciones para mnewton
==============================

 -- Variable opcional: NEWTONEPSILON
     Valor por defecto:  `10.0^(-fpprec/2)'

     Precisión que determina cuando la función `mnewton' ha conseguido
     una convergencia aceptable.

     Véase también `mnewton'.

 -- Variable opcional: NEWTONMAXITER
     Valor por defecto:  `50'

     Número máximo de iteraciones para la función `mnewton' en caso de
     que no se produzca convergencia, o de que ésta se haga muy lenta.

     Véase también `mnewton'.

 -- Función: mnewton (<FuncList>,<VarList>,<GuessList>)
     Resolución de sistemas de ecuaciones no lineales por el método de
     Newton.  <FuncList> es la lista de ecuaciones a resolver,
     <VarList> es la lista con los nombres de las incógnitas y
     <GuessList> es la lista de aproximaciones iniciales.

     La solución se devuelve en el mismo formato que lo hace la función
     `solve()'.  Si no se le encuentra solución al sistema, se obtiene
     `[]' como respuesta.

     Esta función se controla con las variables globales
     `NEWTONEPSILON' y `NEWTONMAXITER'.

          (%i1) load("mnewton")$

          (%i2) mnewton([x1+3*log(x1)-x2^2, 2*x1^2-x1*x2-5*x1+1],
                        [x1, x2], [5, 5]);
          (%o2) [[x1 = 3.756834008012769, x2 = 2.779849592817897]]
          (%i3) mnewton([2*a^a-5],[a],[1]);
          (%o3)             [[a = 1.70927556786144]]
          (%i4) mnewton([2*3^u-v/u-5, u+2^v-4], [u, v], [2, 2]);
          (%o4) [[u = 1.066618389595407, v = 1.552564766841786]]

     Antes de hacer uso de esta función ejecútese  `load("mnewton")'.
     Véanse también `NEWTONEPSILON' y `NEWTONMAXITER'.


File: maxima.info,  Node: numericalio,  Next: opsubst,  Prev: mnewton,  Up: Top

60 numericalio
**************

* Menu:

* Introducción a numericalio::
* Definiciones para numericalio::


File: maxima.info,  Node: Introducción a numericalio,  Next: Definiciones para numericalio,  Prev: numericalio,  Up: numericalio

60.1 Introducción a numericalio
===============================

El paquete `numericalio' define funciones para leer y escribir ficheros
de datos.  Se lee el fichero completo a fin de construir un objeto, por
lo que el paquete no soporta lecturas parciales de archivos.

   Cada elemento a leer o escribir en un fichero debe ser
necesariamente un átomo: un número entero, decimal, decimal grande, una
cadena o un símbolo; no se admiten fracciones, números complejos o
cualquier otra expresión no atómica. Estas funciones pueden llegar a
realizar operaciones válidas con expresiones no atómicas, pero estos
resultados no se documentan y están sujetos a cambios ulteriores.

   Los átomos, tanto en los ficheros de entrada como en los de salida,
tienen el mismo formato que en los ficheros por lotes de Maxima o en la
consola interactiva. En particular, las cadenas deben encerrarse entre
comillas dobles, la barra invertida `\' evita cualquier interpretación
especial del carácter siguiente, y el símbolo de interrogación `?' se
reconoce como el comienzo de un símbolo de Lisp. No se reconoce ningún
carácter de continuación de línea interrumpida.

   El argumento opcional <separator_flag>, común a todas las funciones
de lectura y escritura, indica qué carácter será el utilizado para
separar elementos.

   Para la lectura de ficheros se reconocen los siguientes valores de la
variable <separator_flag>: `comma' para los valores separados por
comas, `pipe' para los valores separados por el carácter de la barra
vertical `|', `semicolon' para los valores separados por punto y coma
`;', y `space' para cuando los valores se separan por espacios o
tabulaciones. Si el nombre del fichero tiene extensión `.csv' y no se
especifica el argumento <separator_flag>, se tomará por defecto `comma'.
Si el fichero tiene cualquier otra extensión diferente de `.csv' y no se
especifica `separator_flag', se usará por defecto `space'.

   Para los ficheros de salida se utilizan los mismos formatos de
separación que para los de entrada; a los que se le añade `tab' para
separar valores con tabulaciones.

   En la entrada, varios espacios y tabulaciones sucesivos cuentan como
un único separador. Sin embargo, varias comas, barras verticales o
punto y comas sucesivos se interpretan que tienen el símbolo `false'
entre ellos; por ejemplo, `1234,,Foo' se interpreta lo mismo que si
fuese `1234,false,Foo'. En la salida, los átomos `false' deben
escribirse explícitamente, por lo que la lista `[1234, false, Foo]'
debe escribirse `1234,false,Foo'.


File: maxima.info,  Node: Definiciones para numericalio,  Prev: Introducción a numericalio,  Up: numericalio

60.2 Definiciones para numericalio
==================================

 -- Función: read_matrix (<file_name>)
 -- Función: read_matrix (<file_name>, <separator_flag>)
     Lee el fichero <file_name> y devuelve su contenido completo en
     forma de matriz. Si no se especifica <separator_flag>, se entiende
     que los valores están separados por espacios.

     La función `read_matrix' obtiene el tamaño de la matriz a partir
     de los datos de entrada. Cada línea del fichero forma una fila de
     la matriz. Si hay filas con diferente número de elementos,
     `read_matrix' emite un mensaje de error.


 -- Función: read_lisp_array (<file_name>, <A>)
 -- Función: read_lisp_array (<file_name>, <A>, <separator_flag>)
     La función `read_lisp_array' requiere que el arreglo sea declarado
     por `make_array' antes de solicitar la lectura del fichero, lo
     cual evita la necesidad de calcular las dimensiones del arreglo,
     especialmente en el caso de arreglos multidimensionales.

     La función `read_lisp_array' no comprueba si el fichero de entrada
     es compatible con las dimensiones del arreglo; la entrada se lee
     como una lista para a continuación completar el arreglo con
     `fillarray'.


 -- Función: read_maxima_array (<file_name>, <A>)
 -- Función: read_maxima_array (<file_name>, <A>, <separator_flag>)
     La función `read_maxima_array' requiere que el arreglo sea
     declarado por `array' antes de solicitar la lectura del fichero,
     lo cual evita la necesidad de calcular las dimensiones del
     arreglo, especialmente en el caso de arreglos multidimensionales.

     La función `read_maxima_array' no comprueba si el fichero de
     entrada es compatible con las dimensiones del arreglo; la entrada
     se lee como una lista para a continuación completar el arreglo con
     `fillarray'.

 -- Función: read_hashed_array (<file_name>, <A>)
 -- Función: read_hashed_array (<file_name>, <A>, <separator_flag>)
     La función `read_hashed_array' considera el primer término de la
     línea como un índice, asociando a éste el resto de la línea. Por
     ejemplo, una fila con el contenido `567 12 17 32 55' equivale a
     `A[567]: [12, 17, 32, 55]$'.  Las filas no necesitan tener el
     mismo número de elementos.

 -- Función: read_nested_list (<file_name>)
 -- Función: read_nested_list (<file_name>, <separator_flag>)
     La función `read_nested_list' devuelve una lista con una sublista
     por cada fila de entrada. Las filas no necesitan tener el mismo
     número de elementos.  Las filas vacías no se ignoran, dando lugar
     a sublistas vacías.

 -- Función: read_list (<file_name>)
 -- Función: read_list (<file_name>, <separator_flag>)
     La función `read_list' lee todo el fichero de entrada como una
     lista simple, ignorando los caracteres de fin de línea.

 -- Función: write_data (<X>, <file_name>)
 -- Función: write_data (<object>, <file_name>, <separator_flag>)
     La función `write_data' escribe el objeto <X> en el fichero
     <file_name>.

     `write_data' escribe las matrices fila a fila.

     `write_data' escribe arreglos de Maxima y Lisp fila a fila, con un
     salto de línea al final de cada tabla. Las tablas
     multidimensionales se separan con saltos de línea adicionales.

     `write_data' escribe arreglos codificados con un índice seguido de
     una lista asociativa en cada  línea.

     `write_data' escribe una lista anidada con una sublista por línea.

     `write_data' escribe una lista simple en una única línea.

     `write_data' añadirá o inicializará el fichero de salida según le
     indique la variable global `file_output_append'.



File: maxima.info,  Node: opsubst,  Next: orthopoly,  Prev: numericalio,  Up: Top

61 opsubst
**********

* Menu:

* Definiciones para opsubst::


File: maxima.info,  Node: Definiciones para opsubst,  Prev: opsubst,  Up: opsubst

61.1 Definiciones para opsubst
==============================

 -- Función: opsubst (<f>,<g>,<e>)
 -- Función: opsubst (<g>=<f>,<e>)
 -- Función: opsubst ([<g1>=<f1>,<g2>=<f2>,..., <gn>=<fn>],<e>)
     La función `opsubst' es similar a la función `subst', excepto por
     el hecho de que `opsubst'  tan solo hace sustituciones de
     operadores en las expresiones. En general, si <f> es un operador en
     la expresión <e>, lo cambia por <g> en la expresión <e>.

     Para determinar el operador, `opsubst' asigna a `inflag' el valor
     `true', lo cual significa que `opsubst' sustituye el operador
     interno de la expresión, no el mostrado en la salida formateada.

     Ejemplo:
          (%i1) load (opsubst)$

          (%i2) opsubst(f,g,g(g(x)));
          (%o2)                     f(f(x))
          (%i3) opsubst(f,g,g(g));
          (%o3)                       f(g)
          (%i4) opsubst(f,g[x],g[x](z));
          (%o4)                       f(z)
          (%i5) opsubst(g[x],f, f(z));
          (%o5)                      g (z)
                                      x
          (%i6) opsubst(tan, sin, sin(sin));
          (%o6)                     tan(sin)
          (%i7) opsubst([f=g,g=h],f(x));
          (%o7)                       h(x)

     Internamente, Maxima no hace uso de los operadores de negación
     unaria, de división ni de la resta, por lo que:
          (%i8) opsubst("+","-",a-b);
          (%o8)                     a - b
          (%i9) opsubst("f","-",-a);
          (%o9)                      - a
          (%i10) opsubst("^^","//",a/b);
                                       a
          (%o10)                       -
                                       b

     La representación interna de -a*b es *(-1,a,b), de modo que
          (%i11) opsubst("[","*", -a*b);
          (%o11)                  [- 1, a, b]

     Si alguno de los operadores no es un sí de Maxima, se emitirá un
     mensaje de error:
          (%i12) opsubst(a+b,f, f(x));

          Improper name or value in functional position:
          b + a
           -- an error.  Quitting.  To debug this try debugmode(true);

     Sin embargo se permiten operadores subindicados:
          (%i13) opsubst(g[5],f, f(x));
          (%o13)                     g (x)
                                      5

     Antes de hacer uso de esta función ejecútese  `load("opsubst")'.


File: maxima.info,  Node: orthopoly,  Next: plotdf,  Prev: opsubst,  Up: Top

62 orthopoly
************

* Menu:

* Introducción a polinomios ortogonales::
* Definiciones para polinomios ortogonales::


File: maxima.info,  Node: Introducción a polinomios ortogonales,  Next: Definiciones para polinomios ortogonales,  Prev: orthopoly,  Up: orthopoly

62.1 Introducción a polinomios ortogonales
==========================================

El paquete `orthopoly' contiene funciones para la evaluación simbólica
y numérica de diversos tipos de polinomios ortogonales, como los de
Chebyshev, Laguerre, Hermite, Jacobi, Legendre y ultraesféricos
(Gegenbauer). Además, `orthopoly' soporta las funciones esféricas de
Bessel, Hankel y armónicas.

   Referencias:
   * Abramowitz y Stegun, Handbook of Mathematical Functions, (1972,
     décima reimpresión, capítulo 22)

   * Gradshteyn y Ryzhik, Table of Integrals, Series y  Products,
     (1980, edición corregida y ampliada)

   * Eugen Merzbacher, Quantum Mechanics, (1970, segunda edición)


   El paquete `orthopoly', junto con su documentación, fue escrito por
Barton Willis de la Universidad de Nebraska en Kearney. El paquete se
distribuye con la licencia GNU General Public License (GPL).

62.1.1 Iniciándose con orthopoly
--------------------------------

`load (orthopoly)' carga el paquete `orthopoly'.

   Para obtener el polinomio de Legendre de tercer orden,

     (%i1) legendre_p (3, x);
                           3             2
                  5 (1 - x)    15 (1 - x)
     (%o1)      - ---------- + ----------- - 6 (1 - x) + 1
                      2             2

   Para expresarlo como una suma de potencias de <x>, aplíquese
<ratsimp> o <rat> al resultado.

     (%i2) [ratsimp (%), rat (%)];
                             3           3
                          5 x  - 3 x  5 x  - 3 x
     (%o2)/R/            [----------, ----------]
                              2           2

   De forma alternativa, conviértase el segundo argumento de to
`legendre_p' (su variable  "principal") a una expresión racional
canónica (canonical rational expression, CRE)).

     (%i1) legendre_p (3, rat (x));
                                   3
                                5 x  - 3 x
     (%o1)/R/                   ----------
                                    2

   Para la evaluación numérica,  `orthopoly' hace uso del análisis de
error de ejecución para estimar una cota superior del error. Por
ejemplo,

     (%i1) jacobi_p (150, 2, 3, 0.2);
     (%o1) interval(- 0.062017037936715, 1.533267919277521E-11)

   Los intervalos tienen la forma `interval (<c>, <r>)', donde <c> es
el centro y <r> el radio del intervalo. Puesto que Maxima no soporta
aritmética de intervalos, en algunas situaciones, como en los gráficos,
puede ser necesario ignorar el error y utilizar el centro del
intervalo. Para conseguirlo conviene asignar a la variable
`orthopoly_returns_intervals' el valor `false'.

     (%i1) orthopoly_returns_intervals : false;
     (%o1)                         false
     (%i2) jacobi_p (150, 2, 3, 0.2);
     (%o2)                  - 0.062017037936715

   Véase la sección Evaluación numérica para más información.

   La mayor parte de las funciones de `orthopoly' tienen una propiedad
`gradef'; así,

     (%i1) diff (hermite (n, x), x);
     (%o1)                     2 n H     (x)
                                    n - 1
     (%i2) diff (gen_laguerre (n, a, x), x);
                   (a)               (a)
                n L   (x) - (n + a) L     (x) unit_step(n)
                   n                 n - 1
     (%o2)      ------------------------------------------
                                    x

   La función `unit_step' del segundo ejemplo evita el error que
aparecería al evaluar la expresión con <n> igual a 0.

     (%i3) ev (%, n = 0);
     (%o3)                           0

   La propiedad "gradef" sólo se aplica a la variable principal;
derivadas respecto de las otras variables darán lugar normalmente a
mensajes de error; por ejemplo,

     (%i1) diff (hermite (n, x), x);
     (%o1)                     2 n H     (x)
                                    n - 1
     (%i2) diff (hermite (n, x), n);

     Maxima doesn't know the derivative of hermite with respect the first argument
      -- an error.  Quitting.  To debug this try debugmode(true);

   Generalmente, las funciones de `orthopoly' se distribuyen sobre
listas y matrices. Al objeto de que la evaluación se realice
completamente, las variables opcionales `doallmxops' y `listarith'
deben valer ambas `true', que es el valor por defecto. Para ilustrar la
distribución sobre matrices sirve el siguiente ejemplo

     (%i1) hermite (2, x);
                                          2
     (%o1)                    - 2 (1 - 2 x )
     (%i2) m : matrix ([0, x], [y, 0]);
                                 [ 0  x ]
     (%o2)                       [      ]
                                 [ y  0 ]
     (%i3) hermite (2, m);
                    [                             2  ]
                    [      - 2        - 2 (1 - 2 x ) ]
     (%o3)          [                                ]
                    [             2                  ]
                    [ - 2 (1 - 2 y )       - 2       ]

   En el segundo ejemplo, el elemento `i, j'-ésimo es `hermite (2,
m[i,j])', que no es lo mismo que calcular `-2 + 4 m . m', según se ve
en el siguiente ejemplo.

     (%i4) -2 * matrix ([1, 0], [0, 1]) + 4 * m . m;
                         [ 4 x y - 2      0     ]
     (%o4)               [                      ]
                         [     0      4 x y - 2 ]

   Si se evalúa una función en un punto fuera de su dominio de
definición, generalmente `orthopoly' devolverá la función sin evaluar.
Por ejemplo,

     (%i1) legendre_p (2/3, x);
     (%o1)                        P   (x)
                                   2/3

   `orthopoly' da soporte a la traducción de expresiones al formato TeX
y la representación bidimensional en el terminal.

     (%i1) spherical_harmonic (l, m, theta, phi);
                               m
     (%o1)                    Y (theta, phi)
                               l
     (%i2) tex (%);
     $$Y_{l}^{m}\left(\vartheta,\varphi\right)$$
     (%o2)                         false
     (%i3) jacobi_p (n, a, a - b, x/2);
                               (a, a - b) x
     (%o3)                    P          (-)
                               n          2
     (%i4) tex (%);
     $$P_{n}^{\left(a,a-b\right)}\left({{x}\over{2}}\right)$$
     (%o4)                         false

62.1.2 Limitaciones
-------------------

Cuando una expresión contenga varios polinomios ortogonales con órdenes
simbólicos, es posible que aunque la expresión sea nula, Maxima sea
incapaz de simplificarla a cero, por lo que si se divide por esta
cantidad, aparecerán problemas. Por ejemplo, la siguiente expressión se
anula para enteros <n> mayores que 1, no pudiendo Maxima reducirla a
cero.

     (%i1) (2*n - 1) * legendre_p (n - 1, x) * x - n * legendre_p (n, x) + (1 - n) * legendre_p (n - 2, x);
     (%o1)  (2 n - 1) P     (x) x - n P (x) + (1 - n) P     (x)
                       n - 1           n               n - 2

   Para un valor específico de <n> se puede reducir la expresión a cero.

     (%i2) ev (% ,n = 10, ratsimp);
     (%o2)                           0

   Generalmente, la forma polinomial de un polinomio ortogonal no es la
más apropiada para su evaluación numérica. Aquí un ejemplo.

     (%i1) p : jacobi_p (100, 2, 3, x)$
     (%i2) subst (0.2, x, p);
     (%o2)                3.4442767023833592E+35
     (%i3) jacobi_p (100, 2, 3, 0.2);
     (%o3)  interval(0.18413609135169, 6.8990300925815987E-12)
     (%i4) float(jacobi_p (100, 2, 3, 2/10));
     (%o4)                   0.18413609135169

   Este resultado se puede mejorar expandiendo el polinomio y evaluando
a continuación, lo que da una aproximación mejor.
     (%i5) p : expand(p)$
     (%i6) subst (0.2, x, p);
     (%o6) 0.18413609766122982

   Sin embargo esto no vale como regla general; la expansión del
polinomio no siempre da como resultado una expresión más fácil de
evaluar numéricamente. Sin duda, la mejor manera de hacer la evaluación
numérica consiste en hacer que uno o más de los argumentos de la
función sean decimales en coma flotante; de esta forma se utilizarán
algoritmos decimales especializados para hacer la evaluación.

   La función `float' de Maxima trabaja de forma indiscriminada; si se
aplica `float' a una expresión que contenga un polinomio ortogonal con
el grado u orden simbólico, éstos se pueden transformar en decimales y
la expresión no ser evaluada de forma completa. Considérese

     (%i1) assoc_legendre_p (n, 1, x);
                                    1
     (%o1)                         P (x)
                                    n
     (%i2) float (%);
                                   1.0
     (%o2)                        P   (x)
                                   n
     (%i3) ev (%, n=2, x=0.9);
                                  1.0
     (%o3)                       P   (0.9)
                                  2

   La expresión en `(%o3)' no da como resultado un decimal en coma
flotante; `orthopoly' no reconoce decimales donde espera que haya
enteros. De forma semejante, la evaluación numérica de la función
`pochhammer' para órdenes que excedan `pochhammer_max_index' puede ser
problemática; considérese

     (%i1) x :  pochhammer (1, 10), pochhammer_max_index : 5;
     (%o1)                         (1)
                                      10

   Aplicando `float' no da para <x> un valor decimal

     (%i2) float (x);
     (%o2)                       (1.0)
                                      10.0

   A fin de evaluar <x> como decimal, es necesario asignar a
`pochhammer_max_index' en valor 11 o mayor y aplicar `float' a <x>.

     (%i3) float (x), pochhammer_max_index : 11;
     (%o3)                       3628800.0

   El valor por defecto de `pochhammer_max_index' es 100; cámbiese este
valor tras cargar el paquete `orthopoly'.

   Por último, téngase en cuenta que las referencias bibliográficas no
coinciden a la hora de definir los polinomios ortogonales; en
`orthopoly' se han utilizado normalmente las convenciones seguidas por
Abramowitz y Stegun.

   Cuando se sospeche de un fallo en `orthopoly', compruébense algunos
casos especiales a fin de determinar si las definiciones de las que el
usuario parte coinciden con las utilizadas por el paquete `orthopoly'.
A veces las definiciones difieren por un factor de normalización;
algunos autores utilizan versiones que hacen que las familias sean
ortogonales en otros intervalos diferentes de (-1, 1). Así por ejemplo,
para definir un polinomio de Legendre ortogonal en (0, 1) defínase

     (%i1) shifted_legendre_p (n, x) := legendre_p (n, 2*x - 1)$

     (%i2) shifted_legendre_p (2, rat (x));
                                 2
     (%o2)/R/                 6 x  - 6 x + 1
     (%i3) legendre_p (2, rat (x));
                                    2
                                 3 x  - 1
     (%o3)/R/                    --------
                                    2

62.1.3 Evaluación numérica
--------------------------

La mayor parte de las funciones de `orthopoly' realizan análisis de
errores en tiempo de ejecución para estimar el error en la evaluación
decimal, a excepción de las funciones esféricas de Bessel y los
polinomios asociados de Legendre de segunda especie. Para la evaluación
numérica, las funciones esféricas de Bessel hacen uso de funciones
SLATEC. No se lleva a cabo ningún método especial de evaluación
numérica para los polinomios asociados de Legendre de segunda especie.

   Es posible, aunque improbable, que el error obtenido en las
evaluaciones numéricas exceda al error estimado.

   Los intervalos tienen la forma `interval (<c>, <r>)', siendo <c> el
centro del intervalo y <r> su radio. El centro del intervalo puede ser
un número complejo, pero el radio será siempre un número real positivo.

   He aquí un ejemplo:

     (%i1) fpprec : 50$
     (%i2) y0 : jacobi_p (100, 2, 3, 0.2);
     (%o2) interval(0.1841360913516871, 6.8990300925815987E-12)
     (%i3) y1 : bfloat (jacobi_p (100, 2, 3, 1/5));
     (%o3) 1.8413609135168563091370224958913493690868904463668b-1

   Se comprueba que el error es menor que el estimado

     (%i4) is (abs (part (y0, 1) - y1) < part (y0, 2));
     (%o4)                         true

   En este ejemplo el error estimado es una cota superior para el error
verdadero.

   Maxima no da soporte a la aritmética de intervalos.

     (%i1) legendre_p (7, 0.1) + legendre_p (8, 0.1);
     (%o1) interval(0.18032072148437508, 3.1477135311021797E-15)
             + interval(- 0.19949294375000004, 3.3769353084291579E-15)

   El usuario puede definir operadores aritméticos para los intervalos.
Para definir la suma de intervalos se puede hacer

     (%i1) infix ("@+")$

     (%i2) "@+"(x,y) := interval (part (x, 1) + part (y, 1), part (x, 2) + part (y, 2))$

     (%i3) legendre_p (7, 0.1) @+ legendre_p (8, 0.1);
     (%o3) interval(- 0.019172222265624955, 6.5246488395313372E-15)

   Las rutinas especiales para cálculo numérico son llamadas cuando los
argumentos son complejos. Por ejemplo,

     (%i1) legendre_p (10, 2 + 3.0*%i);
     (%o1) interval(- 3.876378825E+7 %i - 6.0787748E+7,
                                                1.2089173052721777E-6)

   Compárese con el valor verdadero.

     (%i1) float (expand (legendre_p (10, 2 + 3*%i)));
     (%o1)          - 3.876378825E+7 %i - 6.0787748E+7

   Además, cuando los argumentos son números decimales grandes (big
floats), se realizan llamadas a las rutinas numéricas especiales; sin
embargo, los decimales grandes se convierten previamente a doble
precisión y de este tipo serán también los resultados.

     (%i1) ultraspherical (150, 0.5b0, 0.9b0);
     (%o1) interval(- 0.043009481257265, 3.3750051301228864E-14)

62.1.4 Gráficos y orthopoly
---------------------------

Para representar gráficamente expresiones que contengan polinomios
ortogonales se deben hacer dos cosas:
  1. Asignar a la variable opcional `orthopoly_returns_intervals' el
     valor `false',

  2. Comentar (con apóstrofo) las llamadas a las funciones de
     `orthopoly'.
        Si las llamadas a las funciones no se comentan, Maxima las
evalúa a polinomios antes de hacer el gráfico, por lo que el código
especializado en el cálculo numérico no es llamado. Aquí hay un ejemplo
de cómo se debe hacer para representar gráficamente una expresión que
contiene un polinomio de Legendre:

     (%i1) plot2d ('(legendre_p (5, x)), [x, 0, 1]), orthopoly_returns_intervals : false;
     (%o1)

   La expresión `legendre_p (5, x)' se comenta completamente, que no es
lo mismo que comentar el nombre de la función, como en `'legendre_p (5,
<x>)'.

62.1.5 Miscelánea de funciones
------------------------------

El paquete `orthopoly' define el símbolo de Pochhammer y la función de
escalón unidad en sentencias gradef.

   Para convertir los símbolos de Pochhammer en cocientes o funciones
gamma, hágase uso de `makegamma'.

     (%i1) makegamma (pochhammer (x, n));
                               gamma(x + n)
     (%o1)                     ------------
                                 gamma(x)
     (%i2) makegamma (pochhammer (1/2, 1/2));
                                     1
     (%o2)                       ---------
                                 sqrt(%pi)

   Las derivadas del símbolo de Pochhammer se dan en términos de la
función `psi'.

     (%i1) diff (pochhammer (x, n), x);
     (%o1)             (x)  (psi (x + n) - psi (x))
                          n     0             0
     (%i2) diff (pochhammer (x, n), n);
     (%o2)                   (x)  psi (x + n)
                                n    0

   Es necesario tener cuidado con la expresión en `(%o1)', pues la
diferencia de las funciones `psi' tiene polos cuando `<x> = -1, -2, ..,
-<n>'.  Estos polos se cancelan con factores de `pochhammer (<x>, <n>)'
haciendo que la derivada sea un polinomio de grado `<n> - 1' si <n> es
entero positivo.

   El símbolo de Pochhammer se define para órdenes negativos a través
de su representación como cociente de funciones gamma. Considérese

     (%i1) q : makegamma (pochhammer (x, n));
                               gamma(x + n)
     (%o1)                     ------------
                                 gamma(x)
     (%i2) sublis ([x=11/3, n= -6], q);
                                    729
     (%o2)                        - ----
                                    2240

   De forma alternativa, es posible llegar a este resultado
directamente.

     (%i1) pochhammer (11/3, -6);
                                    729
     (%o1)                        - ----
                                    2240

   La función de escalón unidad es continua por la izquierda; así,

     (%i1) [unit_step (-1/10), unit_step (0), unit_step (1/10)];
     (%o1)                       [0, 0, 1]

   En caso de ser necesaria una función escalón unidad que no sea
continua ni por la izquierda ni por la derecha en el origen, se puede
definir haciendo uso de `signum'; por ejemplo,

     (%i1) xunit_step (x) := (1 + signum (x))/2$

     (%i2) [xunit_step (-1/10), xunit_step (0), xunit_step (1/10)];
                                     1
     (%o2)                       [0, -, 1]
                                     2

   No se debe redefinir la función `unit_step', ya que parte del código
de `orthopoly' requiere que la función escalón sea continua por la
izquierda.

62.1.6 Algoritmos
-----------------

En general, el paquete `orthopoly' gestiona la evaluación simbólica a
través de la representación hipergeométrica de los polinomios
ortogonales. Las funciones hipergeométricas se evalúan utilizando las
funciones (no documentadas) `hypergeo11' y `hypergeo21'. Excepciones
son las funciones de Bessel de índice semi-entero y las funciones
asociadas de Legendre de segunda especie; las funciones de Bessel de
índice semi-entero se evalúan utilizando una representación explícita,
mientras que la función asociada de Legendre de segunda especie se
evalúa recursivamente.

   En cuanto a la evaluación numérica, la mayor parte de las funciones
se convierten a su forma hipergeométrica, evaluándolas mediante
recursión.  Además, las excepciones son las funciones de Bessel de
índice semi-entero y las funciones asociadas de Legendre de segunda
especie.  Las funciones de Bessel de índice semi-entero se evalúan
numéricamente con código SLATEC.


File: maxima.info,  Node: Definiciones para polinomios ortogonales,  Prev: Introducción a polinomios ortogonales,  Up: orthopoly

62.2 Definiciones para polinomios ortogonales
=============================================

 -- Función: assoc_legendre_p (<n>, <m>, <x>)
     Función asociada de Legendre de primera especie.

     Referencia: Abramowitz y Stegun, ecuaciones 22.5.37, página 779,
     8.6.6 (segunda ecuación), página 334 y  8.2.5, página 333.

 -- Función: assoc_legendre_q (<n>, <m>, <x>)
     Función asociada de Legendre de segunda especie.

     Referencia: Abramowitz y Stegun, ecuaciones 8.5.3 y 8.1.8.

 -- Función: chebyshev_t (<n>, <x>)
     Función de Chebyshev de primera especie.

     Referencia: Abramowitz y Stegun, ecuación 22.5.47, página 779.

 -- Función: chebyshev_u (<n>, <x>)
     Función de Chebyshev de segunda especie.

     Referencia: Abramowitz y Stegun, ecuación 22.5.48, página 779.

 -- Función: gen_laguerre (<n>, <a>, <x>)
     Polinomio de Laguerre generalizado.

     Referencia: Abramowitz y Stegun, ecuación 22.5.54, página 780.

 -- Función: hermite (<n>, <x>)
     Polinomio de Hermite.

     Referencia: Abramowitz y Stegun, ecuación 22.5.55, página 780.

 -- Función: intervalp (<e>)
     Devuelve `true' si la entrada es un intervalo y `false' en caso
     contrario.

 -- Función: jacobi_p (<n>, <a>, <b>, <x>)
     Polinomio de Jacobi.

     Los polinomios de Jacobi están definidos para todo <a> y <b>; sin
     embargo, el peso `(1 - <x>)^<a> (1 + <x>)^<b>' no es integrable
     para `<a> <= -1' o `<b> <= -1'.

     Referencia: Abramowitz y Stegun, ecuación 22.5.42, página 779.

 -- Función: laguerre (<n>, <x>)
     Polinomio de Laguerre.

     Referencia: Abramowitz y Stegun, ecuaciones 22.5.16 y 22.5.54,
     página 780.

 -- Función: legendre_p (<n>, <x>)
     Polinomio de Legendre de primera especie.

     Referencia: Abramowitz y Stegun, ecuaciones 22.5.50 y 22.5.51,
     página 779.

 -- Función: legendre_q (<n>, <x>)
     Polinomio de Legendre de segunda especie.

     Referencia: Abramowitz y Stegun, ecuaciones 8.5.3 y 8.1.8.

 -- Función: orthopoly_recur (<f>, <args>)
     Devuelve una relación recursiva para la familia de funciones
     ortogonales <f> con argumentos <args>. La recursión se hace con
     respecto al grado del polinomio.

          (%i1) orthopoly_recur (legendre_p, [n, x]);
                          (2 n - 1) P     (x) x + (1 - n) P     (x)
                                     n - 1                 n - 2
          (%o1)   P (x) = -----------------------------------------
                   n                          n

     El segundo argumento de `orthopoly_recur' debe ser una lista con
     el número correcto de argumentos para la función <f>; si no lo es,
     Maxima emite un mensaje de error.

          (%i1) orthopoly_recur (jacobi_p, [n, x]);

          Function jacobi_p needs 4 arguments, instead it received 2
           -- an error.  Quitting.  To debug this try debugmode(true);

     Además, si <f> no es el nombre de ninguna de las familias de
     polinomios ortogonales, se emite otro mensaje de error.

          (%i1) orthopoly_recur (foo, [n, x]);

          A recursion relation for foo isn't known to Maxima
           -- an error.  Quitting.  To debug this try debugmode(true);

 -- Variable opcional: orthopoly_returns_intervals
     Valor por defecto: `true'

     Si `orthopoly_returns_intervals' vale `true', los números
     decimales en coma flotante se retornan con el formato `interval
     (<c>, <r>)', donde <c> es el centro del intervalo y <r> su radio.
     El centro puede ser un número complejo, en cuyo caso el intervalo
     es un disco en el plano complejo.

 -- Función: orthopoly_weight (<f>, <args>)
     Devuelve una lista con tres elementos; el primer elemento es la
     fórmula del peso para la familia de polinomios ortogonales <f> con
     los argumentos dados por la lista <args>; el segundo y tercer
     elementos son los extremos inferior y superior del intervalo de
     ortogonalidad. Por ejemplo,

          (%i1) w : orthopoly_weight (hermite, [n, x]);
                                      2
                                   - x
          (%o1)                 [%e    , - inf, inf]
          (%i2) integrate (w[1] * hermite (3, x) * hermite (2, x), x, w[2], w[3]);
          (%o2)                           0

     La variable principal de <f> debe ser un símbolo, en caso
     contrario Maxima emite un mensaje de error.

 -- Función: pochhammer (<n>, <x>)
     Símbolo de Pochhammer. Para enteros no negativos <n> con `<n> <=
     pochhammer_max_index', la expresión `pochhammer (<x>, <n>)' se
     evalúa como el producto `<x> (<x> + 1) (<x> + 2) ... (<x> + n -
     1)' si `<n> > 0' y como 1 si `<n> = 0'. Para <n> negativo,
     `pochhammer (<x>, <n>)' se define como `(-1)^<n> / pochhammer (1 -
     <x>, -<n>)'.  Así por ejemplo,

          (%i1) pochhammer (x, 3);
          (%o1)                   x (x + 1) (x + 2)
          (%i2) pochhammer (x, -3);
                                           1
          (%o2)               - -----------------------
                                (1 - x) (2 - x) (3 - x)

     A fin de convertir el símbolo de Pochhammer en un cociente de
     funciones gamma (véase Abramowitz y Stegun, ecuación 6.1.22),
     hágase uso de `makegamma'. Por ejemplo,

          (%i1) makegamma (pochhammer (x, n));
                                    gamma(x + n)
          (%o1)                     ------------
                                      gamma(x)

     Si <n> es mayor que `pochhammer_max_index' o si <n> es simbólico,
     `pochhammer' devuelve una forma nominal.

          (%i1) pochhammer (x, n);
          (%o1)                         (x)
                                           n

 -- Variable opcional: pochhammer_max_index
     Valor por defecto: 100

     `pochhammer (<n>, <x>)' se evalúa como un producto si y sólo si
     `<n> <= pochhammer_max_index'.

     Ejemplos:

          (%i1) pochhammer (x, 3), pochhammer_max_index : 3;
          (%o1)                   x (x + 1) (x + 2)
          (%i2) pochhammer (x, 4), pochhammer_max_index : 3;
          (%o2)                         (x)
                                           4

     Referencia: Abramowitz y Stegun, ecuación 6.1.16, página 256.

 -- Función: spherical_bessel_j (<n>, <x>)
     Función de Bessel esférica de primera especie.

     Referencia: Abramowitz y Stegun, ecuaciones 10.1.8, página 437 y
     10.1.15, página 439.

 -- Función: spherical_bessel_y (<n>, <x>)
     Función de Bessel esférica de segunda especie.

     Referencia: Abramowitz y Stegun, ecuaciones 10.1.9, página 437 y
     10.1.15, página 439.

 -- Función: spherical_hankel1 (<n>, <x>)
     Función esférica de Hankel de primera especie.

     Referencia: Abramowitz y Stegun, ecuación 10.1.36, página 439.

 -- Función: spherical_hankel2 (<n>, <x>)
     Función esférica de Hankel de segunda especie.

     Referencia: Abramowitz y Stegun, ecuación 10.1.17, página 439.

 -- Función: spherical_harmonic (<n>, <m>, <x>, <y>)
     Función armónica esférica.

     Referencia: Merzbacher 9.64.

 -- Función: unit_step (<x>)
     Función de escalón unidad continua por la izquierda, definida de
     tal forma que `unit_step (<x>)' se anula para `<x> <= 0' y es
     igual a 1 para `<x> > 0'.

     En caso de ser necesaria una función escalón unidad que tome el
     valor 1/2 en el origen, utilícese `(1 + signum (<x>))/2'.

 -- Función: ultraspherical (<n>, <a>, <x>)
     Polinomio ultraesférico o de Gegenbauer.

     Referencia: Abramowitz y Stegun, ecuación 22.5.46, página 779.


File: maxima.info,  Node: plotdf,  Next: romberg,  Prev: orthopoly,  Up: Top

63 plotdf
*********

* Menu:

* Introducción a plotdf::
* Definiciones para plotdf::


File: maxima.info,  Node: Introducción a plotdf,  Next: Definiciones para plotdf,  Prev: plotdf,  Up: plotdf

63.1 Introducción a plotdf
==========================

La función `plotdf' crea un gráfico del campo de direcciones para una
Ecuación Diferencial Ordinaria (EDO) de primer orden, o para un sistema
de dos EDO's autónomas, de primer orden.

   Como se trata de un paquete adicional, para poder usarlo debe
cargarlo primero con el comando `load("plotdf")'. Plotdf necesita
Openmath, que é suministrado por el paquete Xmaxima (Xmaxima además de
poder ser usado como consola gráfica para Maxima es también el programa
que produce los gráficos en el formato Openmath).

   Para dibujar el campo de direcciones de una única EDO, esa ecuación
deberá escribirse en la forma siguiente:
            dy
            -- = F(x,y)
            dx

   y la función <F> será dada como argumento para el comando `plotdf'.
Si las variables independiente y dependiente no fueran <x> y <y>, como
en la ecuación de arriba, entonces las dos variables deberán ser
nombradas explicitamente en una lista que será dada como argumento al
comando plotdf (ver los ejemplos).

   Para dibujar el campo de direcciones de un sistema autónomo de dos
EDO's, Las dos ecuaciones deben ser escritas en la forma siguiente
            dx             dy
            -- = G(x,y)    -- = F(x,y)
            dt             dt

   y el argumento para el comando `plotdf' será una lista con dos
expresiones para las funciones <F> y <G>, en ese orden; o sea, la
primera expresión en la lista será interpretada como la derivada
temporal de la variable representada en el eje horizontal, y la segunda
expresión será la derivada de la varibale representada en el eje
vertical. Esas dos variables no tienen que ser <x> y <y>, pero si no
fueran, entonces el segundo argumento para el comando plotdf deberá ser
una lista que nombre las dos variables, primero la variable en el eje
horizontal y después la variable en el eje vertical.

   Cuando se trabaja con una única ecuación, `plotdf' asume
implícitamente que `x=t' y `G(x,y)=1', transformando la ecuación en un
sistema autónomo con dos ecuaciones.


File: maxima.info,  Node: Definiciones para plotdf,  Prev: Introducción a plotdf,  Up: plotdf

63.2 Definiciones para plotdf
=============================

 -- Function: plotdf (<dydx>, ...opciones...)
 -- Function: plotdf (<dvdu>, `['<u>,<v>`]', ...opciones...)
 -- Function: plotdf (`['<dxdt>,<dydt>`]', ...opciones...)
 -- Function: plotdf (`['<dudt>,<dvdt>`]', `['<u>,<v>`]',
          ...opciones...)
     Dibuja un campo de direcciones en dos dimensiones <x> y <y>.

     <dydx>, <dxdt> y <dydt> son expresiones que dependen de <x> y de
     <y>. <dvdu>, <dudt> y <dvdt> son expresiones que dependen de <u> y
     de <v>. Además de esas dos variables, las dos expresiones pueden
     depender de un conjunto de parámetros, con valores numéricos que
     son dados por medio de la opción `parameters' (la sintaxis de esa
     opción se explica mas al frente), o con un rango de posibles
     valores definidos con la opción <sliders>.

     Varias otras opciones se pueden incluir dentro del comando, o
     seleccionadas en el menú.  Haciendo click en un punto del gráfico
     se puede hacer que sea dibujada la curva integral que pasa por ese
     punto; lo mismo puede ser hecho dando las coordenadas del punto
     con la opción `trajectory_at' dentro del comando plotdf. La
     dirección de integración se puede controlar con la opción
     `direction', que acepta valores de _forward_, _backward_ ou
     _both_. El número de pasos realizado en la integración numérica se
     controla con la opción `nsteps' y el incremento del tiempo en cada
     paso con la opción `tstep'. Se usa el método de Adams Moulton para
     hacer la integración numérica; también es posible cambiar para el
     método de Runge-Kutta de cuarto orden con ajuste de pasos.

     Menú de la ventana del gráfico:

     El menú de la ventana gráfica dispone de las siguientes opciones:
     _Zoom_, que permite cambiar el comportamiento del ratón, de manera
     que hará posible el hacer zoom en la región del gráfico haciendo
     clic con el botón izquierdo. Cada clic agranda la imagen
     manteniendo como centro de la misma el punto sobre el cual se ha
     hecho clic. Manteniendo pulsada la tecla <Shift> mientras se hace
     clic, retrocede al tamaño anterior. Para reanudar el cálculo de las
     trayectorias cuando se hace clic, seleccine la opción _Integrate_
     del menú.

     La opción _Config_ del menú se puede utilizar para cambiar la(s)
     EDO(S) y algunos otros ajustes. Después de hacer los cambios, se
     debe utilizar la opción _Replot_ para activar los nuevos ajustes.
     Si en el campo _Trajectory at_ del menú de diálogo de _Config_ se
     introducen un par de coordenadas y luego se pulsa la tecla
     <retorno>, se mostrará una nueva curva integral, además de las ya
     dibujadas.  Si se selecciona la opción _Replot_, sólo se mostrará
     la última curva integral seleccionada.

     Manteniendo pulsado el botón derecho del ratón mientras se mueve el
     cursor, se puede arrastrar el gráfico horizontal y verticalmente.
     Otros parámetros, como pueden ser el número de pasos, el valor
     inicial de <t>, las coordenadas del centro y el radio, pueden
     cambiarse en el submenú de la opción _Config_.

     Con la opción _Save_, se puede guardar el gráfico en un fichero
     Postscript.

     Opciones gráficas:

     La función `plotdf' admite varias opciones, cada una de las cuales
     es una lista de dos o más elementos. El primer elemento es el
     nombre de la opción, y el resto está formado por el valor o
     valores asignados a dicha opción.

     La función `plotdf' reconoce las siguientes opciones:

        * "tstep" establece la amplitud de los incrementos en la
          variable independiente <t>, utilizados para calcular la curva
          integral. Si se aporta sólo una expresión <dydx>, la variable
          <x> será directamente proporcional a <t>.  El valor por
          defecto es 0.1.

        * "nsteps" establece el número de pasos de longitud `tstep' que
          se utilizarán en la variable independiente para calcular la
          curva integral.  El valor por defecto es 100.

        * "direction" establece la dirección de la variable
          independiente que será seguida para calcular una curva
          integral.  Valores posibles son: `forward', para hacer que la
          variable independiente aumente `nsteps' veces, con
          incrementos `tstep'; `backward', para hacer que la variable
          independiente disminuya; `both', para extender la curva
          integral `nsteps' pasos hacia adelante y `nsteps' pasos hacia
          atrás.  Las palabras `right' y `left' se pueden utilizar como
          sinónimos de `forward' y `backward'.  El valor por defecto es
          `both'.

        * "tinitial" establece el valor inicial de la variable <t>
          utilizado para calcular curvas integrales. Puesto que las
          ecuaciones diferenciales son autónomas, esta opción sólo
          aparecerá en los gráficos de las curvas como funciones de <t>.
          El valor por defecto es 0.

        * "versus_t" se utiliza para crear una segunda ventana gráfica,
          con el gráfico de una curva integral, como dos funciones <x>,
          <y>, de variable independiente <t>. Si se le da a `versus_t'
          cualquier valor diferente de 0, se mostrará la segunda
          ventana gráfica, la cual incluye otro menú, similar al de la
          ventana principal.  El valor por defecto es 0.

        * "trajectory_at" establece las coordenadas <xinitial> y
          <yinitial> para el extremo inicial de la curva integral.  No
          tiene asignado valor por defecto.

        * "parameters" establece una lista de parámetros, junto con sus
          valores numéricos, que son utilizados en la definición de la
          ecuación diferencial. Los nombres de los parámetros y sus
          valores deben escribirse en formato de cadena de caracteres
          como una secuencia de pares `nombre=valor' separados por
          comas.

        * "sliders" establece una lista de parámetros que se cambiarán
          interactivamente utilizando barras de deslizamiento, así como
          los rangos de variación de dichos parámetros.  Los nombres de
          los parámetros y sus rangos deben escribirse en formato de
          cadena de caracteres como una secuencia de pares
          `nombre=min:max' separados por comas.

        * "xfun" establece una cadena de caracteres con funciones de
          <x> separadas por puntos y comas para ser representadas por
          encima del campo de direcciones. Estas funciones serán
          interpretadas por Tcl, no por Maxima.

        * "x" deberá estar seguida por dos números, que indican los
          valores mínimo e máximo que serán representados en el eje
          horizontal. Si la variable en el eje horizontal no es <x>,
          entonces esta opción deberá tener el nombre de la variable en
          el eje horizontal.  El intervalo por defecto es de -10 a 10.

        * "y" deberá estar seguida por dos números, que indican los
          valores mínimo e máximo que serán representados en el eje
          vertical. Si la variable en el eje vertical no es <y>,
          entonces esta opción deberá tener el nombre de la variable en
          el eje vertical.  El intervalo por defecto es de -10 a 10.


     Ejemplos:

        * Para mostrar el campo de direcciones de la ecuación
          diferencial y' = exp(-x) + y y la solución que pasa por (2,
          -0.1):
               (%i1) load("plotdf")$

               (%i2) plotdf(exp(-x)+y,[trajectory_at,2,-0.1])$

        * Para mostrar el campo de direcciones de la ecuación diff(y,x)
          = x - y^2 y la solución de condición inicial y(-1) = 3, se
          puede utilizar la sentencia:
               (%i3) plotdf(x-y^2,[xfun,"sqrt(x);-sqrt(x)"],
                         [trajectory_at,-1,3], [direction,forward],
                         [y,-5,5], [x,-4,16])$
          El gráfico también muestra la función y = sqrt(x).

        * El siguiente ejemplo muestra el campo de direcciones de un
          oscilador armónico, definido por las ecuaciones dz/dt = v y
          dv/dt = -k*z/m, y la curva integral que pasa por (z,v) =
          (6,0), con una barra de deslizamiento que permitirá cambiar
          el valor de m interactivamente (k permanece fijo a 2):
               (%i4) plotdf([v,-k*z/m], [z,v], [parameters,"m=2,k=2"],
                           [sliders,"m=1:5"], [trajectory_at,6,0])$

        * Para representar el campo de direcciones de la ecuación de
          Duffing, m*x"+c*x'+k*x+b*x^3 = 0, se introduce la variable
          y=x' y se hace:
               (%i5) plotdf([y,-(k*x + c*y + b*x^3)/m],
                             [parameters,"k=-1,m=1.0,c=0,b=1"],
                             [sliders,"k=-2:2,m=-1:1"],[tstep,0.1])$

        * El campo de direcciones de un péndulo amortiguado, incluyendo
          la solución para condiciones iniciales dadas, con una barra
          de deslizamiento que se puede utilizar para cambiar el valor
          de la masa, m, y con el gráfico de las dos variables de
          estado como funciones del tiempo:

               (%i6) plotdf([w,-g*sin(a)/l - b*w/m/l], [a,w],
                        [parameters,"g=9.8,l=0.5,m=0.3,b=0.05"],
                        [trajectory_at,1.05,-9],[tstep,0.01],
                        [a,-10,2], [w,-14,14], [direction,forward],
                        [nsteps,300], [sliders,"m=0.1:1"], [versus_t,1]);




File: maxima.info,  Node: romberg,  Next: simplex,  Prev: plotdf,  Up: Top

64 romberg
**********

* Menu:

* Definiciones para romberg::


File: maxima.info,  Node: Definiciones para romberg,  Prev: Top,  Up: Top

64.1 Definiciones para romberg
==============================

 -- Función: romberg (<expr>, <x>, <a>, <b>)
 -- Función: romberg (<F>, <a>, <b>)
     Integra numéricamente por el método de Romberg.

     La llamada `romberg(<expr>, <x>, <a>, <b>)' devuelve una
     estimación de la integral `integrate(<expr>, <x>, <a>, <b>)'.  El
     argumento <expr> debe ser una expresión reducible a un valor
     decimal en coma flotante cuando <x> es a su vez un número decimal.

     La llamada `romberg(<F>, <a>, <b>)' devuelve una estimación de la
     integral `integrate(<F>(x), x, <a>, <b>)', siendo `x' el único
     argumento de <F>. El argumento <F> debe ser una función en Lisp o
     en Maxima que devuelva un valor decimal en coma flotante cuando
     <x> es a su vez un número decimal; <F> puede ser el nombre de una
     función de Maxima traducida o compilada.

     La exactitud de `romberg' se controla con las variables globales
     `rombergabs' y `rombergtol'. La función `romberg' termina con
     éxito su cálculo cuando la diferencia absoluta entre sucesivas
     aproximaciones es menor que `rombergabs', o cuando la diferencia
     relativa de sucesivas aproximaciones es menor que `rombergtol'.
     Así, cuando `rombergabs' vale 0.0 (su valor por defecto) sólo
     tiene efecto el test del error relativo basado en `romberg'.

     La función `romberg' reduce a mitades sucesivas la amplitud del
     paso un máximo de `rombergit' veces antes de abandonar el cómputo;
     el número máximo de evaluaciones del integrando es, por
     consiguiente, igual a `2^rombergit'.  De no satisfacerse el
     criterio de error establecido por `rombergabs' y `rombergtol',
     `romberg' devuelve un mensaje de error.  La función `romberg' hace
     siempre al menos `rombergmin' iteraciones; se trata de una
     heurística para evitar la finalización prematura cuando el
     integrando oscila mucho.

     La función `romberg' evalúa el integrando repetidamente tras
     asignarle a la variable de integración un valor específico. Este
     criterio permite anidar llamadas a `romberg' para calcular
     integrales múltiples.  Sin embargo, los errores de cálculo no
     tienen en cuenta los errores de las integraciones anidadas, por lo
     que tales errores pueden subestimarse.  Por otro lado, métodos
     especialmente desarrollados para integraciones múltiples pueden
     dar la misma exactitud con menos evaluaciones del integrando.

     Para hacer uso de esta función ejecútese primero `load(romberg)'.

     Véase también `QUADPACK', un conjunto de funciones para
     integración numérica.

     Ejemplos:

     Una integración unidimensional.

          (%i1) load (romberg);
          (%o1)    /usr/share/maxima/5.11.0/share/numeric/romberg.lisp
          (%i2) f(x) := 1/((x - 1)^2 + 1/100) + 1/((x - 2)^2 + 1/1000) + 1/((x - 3)^2 + 1/200);
                              1                 1                1
          (%o2) f(x) := -------------- + --------------- + --------------
                               2    1           2    1            2    1
                        (x - 1)  + ---   (x - 2)  + ----   (x - 3)  + ---
                                   100              1000              200
          (%i3) rombergtol : 1e-6;
          (%o3)                 9.9999999999999995E-7
          (%i4) rombergit : 15;
          (%o4)                          15
          (%i5) estimate : romberg (f(x), x, -5, 5);
          (%o5)                   173.6730736617464
          (%i6) exact : integrate (f(x), x, -5, 5);
          (%o6) 10 sqrt(10) atan(70 sqrt(10))
           + 10 sqrt(10) atan(30 sqrt(10)) + 10 sqrt(2) atan(80 sqrt(2))
           + 10 sqrt(2) atan(20 sqrt(2)) + 10 atan(60) + 10 atan(40)
          (%i7) abs (estimate - exact) / exact, numer;
          (%o7)                7.5527060865060088E-11

     Una integración bidimensional, implementada mediante llamadas
     anidadas a `romberg'.

          (%i1) load (romberg);
          (%o1)    /usr/share/maxima/5.11.0/share/numeric/romberg.lisp
          (%i2) g(x, y) := x*y / (x + y);
                                              x y
          (%o2)                   g(x, y) := -----
                                             x + y
          (%i3) rombergtol : 1e-6;
          (%o3)                 9.9999999999999995E-7
          (%i4) estimate : romberg (romberg (g(x, y), y, 0, x/2), x, 1, 3);
          (%o4)                   0.81930239628356
          (%i5) assume (x > 0);
          (%o5)                        [x > 0]
          (%i6) integrate (integrate (g(x, y), y, 0, x/2), x, 1, 3);
                                                    3
                                              2 log(-) - 1
                              9                     2        9
          (%o6)       - 9 log(-) + 9 log(3) + ------------ + -
                              2                    6         2
          (%i7) exact : radcan (%);
                              26 log(3) - 26 log(2) - 13
          (%o7)             - --------------------------
                                          3
          (%i8) abs (estimate - exact) / exact, numer;
          (%o8)                1.3711979871851024E-10


 -- Variable opcional: rombergabs
     Valor por defecto: 0.0

     La exactitud de `romberg' se controla con las variables globales
     `rombergabs' y `rombergtol'. La función `romberg' termina con
     éxito su cálculo cuando la diferencia absoluta entre sucesivas
     aproximaciones es menor que `rombergabs', o cuando la diferencia
     relativa de sucesivas aproximaciones es menor que `rombergtol'.
     Así, cuando `rombergabs' vale 0.0 (su valor por defecto) sólo
     tiene efecto el test del error relativo basado en `romberg'.

     Véanse también `rombergit' y `rombergmin'.


 -- Variable opcional: rombergit
     Valor por defecto: 11

     La función `romberg' reduce a mitades sucesivas la amplitud del
     paso un máximo de `rombergit' veces antes de abandonar el cómputo;
     el número máximo de evaluaciones del integrando es, por
     consiguiente, igual a `2^rombergit'.  La función `romberg' hace
     siempre al menos `rombergmin' iteraciones; se trata de una
     heurística para evitar la finalización prematura cuando el
     integrando oscila mucho.

     Véanse también `rombergabs' y `rombergtol'.


 -- Variable opcional: rombergmin
     Valor por defecto: 0

     La función `romberg' hace siempre al menos `rombergmin'
     iteraciones; se trata de una heurística para evitar la
     finalización prematura cuando el integrando oscila mucho.

     Véanse también `rombergit', `rombergabs' y `rombergtol'.


 -- Variable opcional: rombergtol
     Valor por defecto: 1e-4

     La exactitud de `romberg' se controla con las variables globales
     `rombergabs' y `rombergtol'. La función `romberg' termina con
     éxito su cálculo cuando la diferencia absoluta entre sucesivas
     aproximaciones es menor que `rombergabs', o cuando la diferencia
     relativa de sucesivas aproximaciones es menor que `rombergtol'.
     Así, cuando `rombergabs' vale 0.0 (su valor por defecto) sólo
     tiene efecto el test del error relativo basado en `romberg'.

     Véanse también `rombergit' y `rombergmin'.



File: maxima.info,  Node: simplex,  Next: simplification,  Prev: romberg,  Up: Top

65 simplex
**********

* Menu:

* Introducción a simplex::
* Definiciones para simplex::


File: maxima.info,  Node: Introducción a simplex,  Next: Definiciones para simplex,  Prev: simplex,  Up: simplex

65.1 Introducción a simplex
===========================

El paquete `simplex' utiliza el algoritmo simplex para programación
lineal.

   Ejemplo:

     (%i1) load("simplex")$
     (%i2) minimize_sx(x+y, [3*x+2*y>2, x+4*y>3]);
                            9        7       1
     (%o2)                 [--, [y = --, x = -]]
                            10       10      5


File: maxima.info,  Node: Definiciones para simplex,  Prev: Introducción a simplex,  Up: simplex

65.2 Definiciones para simplex
==============================

 -- Variable opcional: epsilon_sx
     Valor por defecto: `10^-8'

     Error epsilon utilizado en los cálculos numéricos de
     `linear_program'.

     Véase también `linear_program'.


 -- Función: linear_program (<A>, <b>, <c>)
     La función `linear_program' es una implementación del algoritmo
     simplex. La instrucción `linear_program(A, b, c)' calcula un
     vector <x> tal que minimiza `c.x' bajo las restricciones `A.x = b'
     y `x >= 0'. El argumento <A> es una matriz y los argumentos <b> y
     <c> son listas.

     La función `linear_program' devuelve una lista que contiene el
     vector solución <x> y el valor mínimo de `c.x'.  Si el problema no
     está acotado, devuelve el mensaje "Problem not bounded!"  y si el
     problema no es factible, devuelve el mensaje "Problem not
     feasible!".

     Para usar esta función, cárguese primero el paquete con la
     instrucción `load(simplex);'.

     Ejemplo:

          (%i1) A: matrix([1,1,-1,0], [2,-3,0,-1], [4,-5,0,0])$
          (%i2) b: [1,1,6]$
          (%i3) c: [1,-2,0,0]$
          (%i4) linear_program(A, b, c);
                               [ 1   1   - 1   0  ]
                               [                  ]
          (%o4) linear_program([ 2  - 3   0   - 1 ], [1, 1, 6],
                               [                  ]
                               [ 4  - 5   0    0  ]
                                                            [1, - 2, 0, 0])

     Véanse también `minimize_sx', `scale_sx' y `epsilon_sx'.


 -- Función: maximize_sx (<obj>, <cond>, [<pos>])
     Maximiza la función objetivo lineal <obj> sujeta a ciertas
     restricciones lineales <cond>. Véase `minimize_sx' para una
     descripción detallada de los argumentos y de la respuesta dada por
     esta función.


 -- Función: minimize_sx (<obj>, <cond>, [<pos>])
     Minimiza la función objetivo lineal <obj> sujeta a ciertas
     restricciones lineales <cond>, siendo ésta una lista de ecuaciones
     o inecuaciones lineales.  En las inecuaciones estrictas se
     reemplaza `>' por `>=' y `<' por `<='. El argumento opcional <pos>
     es una lista de variables de decisión que se suponen positivas.

     Si el mínimo existe, `minimize_sx' devuelve una lista que contiene
     el valor mínimo de la función objetivo y una lista de valores para
     las variables de decisión con los que se alcanza el mínimo.  Si el
     problema no está acotado, devuelve el mensaje "Problem not
     bounded!"  y si el problema no es factible, devuelve el mensaje
     "Problem not feasible!".

     Las variables de decisión no se suponen no negativas. Si todas las
     variables de decisión son no negativas, asígnese el valor `true' a
     la variable `nonegative_sx'. Si sólo algunas de las variables de
     decisión son positivas, lístense en el argumento opcional <pos>,
     lo cual es más eficiente que añadir restricciones.

     La función `minimize_sx' utiliza el algoritmo simplex implementado
     en la función `linear_program' de Maxima.

     Para usar esta función, cárguese primero el paquete con la
     instrucción `load(simplex);'.

     Ejemplos:

          (%i1) minimize_sx(x+y, [3*x+y=0, x+2*y>2]);
          (%o1)    minimize_sx(y + x, [y + 3 x = 0, 2 y + x > 2])
          (%i2) minimize_sx(x+y, [3*x+y>0, x+2*y>2]), nonegative_sx=true;
          (%o2)    minimize_sx(y + x, [y + 3 x > 0, 2 y + x > 2])
          (%i3) minimize_sx(x+y, [3*x+y=0, x+2*y>2]), nonegative_sx=true;
          (%o3)    minimize_sx(y + x, [y + 3 x = 0, 2 y + x > 2])
          (%i4) minimize_sx(x+y, [3*x+y>0]);
          (%o4)           minimize_sx(y + x, [y + 3 x > 0])

     Véanse también `maximize_sx', `nonegative_sx' y `epsilon_sx'.


 -- Variable opcional: nonegative_sx
     Valor por defecto: `false'

     Si `nonegative_sx' vale `true' todas las variables de decisión
     pasadas a `minimize_sx' y a `maximize_sx' se suponen positivas.

     Véase también `minimize_sx'.



File: maxima.info,  Node: simplification,  Next: solve_rec,  Prev: simplex,  Up: Top

66 simplification
*****************

* Menu:

* Introducción a simplification::
* Definiciones para simplification::


File: maxima.info,  Node: Introducción a simplification,  Next: Definiciones para simplification,  Prev: simplification,  Up: simplification

66.1 Introducción a simplification
==================================

El directorio `maxima/share/simplification' contiene programas que
implementan algunas reglas y funciones para simplificar expresiones,
así como ciertas funciones no relacionadas con la simplificación.


File: maxima.info,  Node: Definiciones para simplification,  Prev: Introducción a simplification,  Up: simplification

66.2 Definiciones para simplification
=====================================

66.2.1 Paquete absimp
---------------------

El paquete `absimp' contiene reglas para aplicar patrones que extienden
el sistema de reglas nativo de Maxima para las funciones `abs' y
`signum', respetando las relaciones establecidas con la función
`assume' o con declaraciones tales como `modedeclare (m, even, n, odd)'
para enteros pares o impares.

   En el paquete `absimp' se definen las funciones `unitramp' y
`unitstep' en términos de `abs' y `signum'.

   La instrucción `load (absimp)' carga este paquete y `demo (absimp)'
desarrolla una demostración sobre el uso del mismo.

   Ejemplos:

     (%i1) load (absimp)$
     (%i2) (abs (x))^2;
                                            2
     (%o2)                                 x
     (%i3) diff (abs (x), x);
                                           x
     (%o3)                               ------
                                         abs(x)
     (%i4) cosh (abs (x));
     (%o4)                               cosh(x)

66.2.2 Paquete facexp
---------------------

El paquete `facexp' contiene varias funciones que le aportan al usuario
la posibilidad de estructurar expresiones controlando su expansión.
Esta capacidad es especialmente útil cuando la expresión contiene
variables con significado físico, ya que se suele dar el caso de que la
forma más sencilla para estas expresiones se obtiene cuando se expanden
respecto de estas variables y luego se factoriza respecto de sus
coeficientes. Si bien es cierto que este procedimiento no es difícil de
llevar a cabo con las funciones estándar de Maxima, pueden ser
necesarios algunos retoques adicionales que sí pueden ser más difíciles
de hacer.

   La función `facsum' y sus formas relacionadas proporcionan un método
para controlar la estructura de expresiones. La función `collectterms'
puede usarse para añadir dos o más expresiones que ya hayan sido
simplificadas de la forma indicada, sin necesidad de volver a
simplificar la expresión completa.  Esta función puede ser útil cuando
las expresiones sean largas.

   La instrucción `load (facexp)' carga este paquete y `demo (facexp)'
hace una demostración sobre su uso.

 -- Función: facsum (<expr>, <arg_1>, ..., <arg_n>)
     Devuelve una expresión equivalente a <expr>, la cual depende de
     los argumentos <arg_1>, ..., <arg_n>, y éstos pueden ser de
     cualquiera de las formas aceptables para `ratvars', o listas de
     estas formas. Si los argumentos no son listas, la forma devuelta
     se expande completamente con respecto de los argumentos, siendo los
     coeficientes de tales argumentos factorizados. Estos coeficientes
     no contienen a ninguno de los argumentos, excepto quizás de una
     forma no racional.

     En caso de que cualquiera de los argumentos sea una lista, entonces
     todos ellos se combinan en una única lista, y en lugar de llamar a
     `factor' para los coeficientes de los argumentos, `facsum' se
     llama a sí misma utilizando esta nueva lista única como lista de
     argumentos.

     Es posible que se quiera utilizar `facsum' con respecto a
     expresiones más complicadas, tales como `log (x + y)'. Estos
     argumentos son también admisibles. Si no se especifican variables,
     como en `facsum (<expr>)', el resultado devuelto es el mismo que
     el conseguido mediante `ratsimp (<expr>)'.

     En ocasiones puede ser necesario obtener cualquiera de las formas
     anteriores especificadas por sus operadores principales. Por
     ejemplo, se puede querer aplicar `facsum' con respecto a todos los
     `log'; en este caso, se puede incluir entre los argumentos bien
     los `log' específicos que se quieran tratar de esta manera, bien
     la expresión `operator (log)' o `'operator (log)'.  Si se quiere
     aplicar `facsum' a <expr> con respecto a los operadores <op_1>,
     ..., <op_n>, se debe evaluar `facsum (<expr>, operator (<op_1>,
     ..., <op_n>))'.  La forma `operator' puede aparecer también dentro
     de las listas de argumentos.

     Además, dándole valores a las variables opcionales `facsum_combine'
     y `nextlayerfactor' se puede controlar el resultado de `facsum'.

 -- Variable global: nextlayerfactor
     Valor por defecto: `false'

     Si `nextlayerfactor' vale `true', las llamadas recursivas de
     `facsum' se aplican a los factores de la forma factorizada de los
     coeficientes de los argumentos.

     Si vale `false', `facsum' se aplica a cada coeficiente como un
     todo cada vez que se efectúen llamadas recursivas a `facsum'.

     La inclusión del átomo `nextlayerfactor' en la lista de argumentos
     de `facsum' tiene el mismo efecto que `nextlayerfactor: true',
     pero solamente para el siguiente nivel de la expresión. Puesto que
     `nextlayerfactor' toma siempre uno de los valores `true' o
     `false', debe aparecer comentado (comilla simple) cada vez que
     aparezca en la lista de argumentos de `facsum'.

 -- Variable global: facsum_combine
     Valor por defecto: `true'

     La variable `facsum_combine' controla la forma del resultado final
     devuelto por `facsum' si su argumento es un cociente de polinomios.
     Si `facsum_combine' vale `false', el resultado será una suma
     completamente expandida, pero si vale `true', la expresión devuelta
     es un cociente de polinomios.


 -- Función: factorfacsum (<expr>, <arg_1>, ... <arg_n>)
     Devuelve una expresión equivalente a <expr> obtenida aplicando
     `facsum' a los factores de <expr>, de argumentos <arg_1>, ...
     <arg_n>. Si alguno de los factores de <expr> se eleva a una
     potencia, tanto el factor como el exponente se procesarán de esta
     manera.

 -- Función: collectterms (<arg_1>, ..., <arg_n>)
     Si algunas expresiones fueron ya simplificadas con `facsum',
     `factorfacsum', `factenexpand',  `facexpten' o `factorfacexpten',
     debiendo ser luego sumadas, puede ser conveniente combinarlas
     utilizando la función `collecterms', la cual admite como
     argumentos todos aquéllos que se puedan pasar a las anteriormente
     citadas funciones, con la excepción de `nextlayerfactor', que no
     tiene efecto alguno sobre `collectterms'.  La ventaja de
     `collectterms' es que devuelve una forma similar a la de `facsum',
     pero debido a que suma expresiones que ya han sido previamente
     procesadas, no necesita repetir esta operación, lo cual resulta
     ser especialmente útil cuando las expresiones a sumar son muy
     grandes.

66.2.3 Paquete functs
---------------------

 -- Función: rempart (<expr>, <n>)
     Elimina la parte <n> de la expresión <expr>.

     Si <n> es una lista de la forma `[<l>, <m>]', entonces las partes
     desde <l> a <m> serán eliminadas.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: wronskian ([<f_1>, ..., <f_n>], <x>)
     Devuelve la matriz wronskiana de las funciones <f_1>, ..., <f_n>
     dependeientes de la variable <x>.

     Los argumentos <f_1>, ..., <f_n> pueden ser nombres de funciones
     definidas por el usuario, o expresiones de variable <x>.

     El determinante de la matriz wronskiana es el determinante
     wronskiano del conjunto de funciones. Las funciones serán
     linealmente dependientes si este determinante es nulo.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: tracematrix (<M>)
     Devuelve la traza (suma de los elementos de la diagonal) de la
     matriz <M>.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: rational (<z>)
     Multiplica el numerador y denominador de <z> por el complejo
     conjugado del denominador, racionalizando así el denominador.
     Devuelve la expresión canónica racional (canonical rational
     expression, CRE) si el argumento <z> es de esta forma, en caso
     contrario devuelve una expresión en formato común.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: logand (<x>,<y>)
     Devuelve el "y" lógico binario de los argumentos <x> e <y>.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: logor (<x>,<y>)
     Devuelve el "o" lógico binario de los argumentos <x> e <y>.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: logxor (<x>,<y>)
     Devuelve el "o-excusivo" lógico binario de los argumentos <x> e
     <y>.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: nonzeroandfreeof (<x>, <expr>)
     Devuelve `true' si <expr> es diferente de cero y `freeof (<x>,
     <expr>)' devuelve `true'.  En caso contrario devuelve `false'.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: linear (<expr>, <x>)
     Si <expr> es una expresión lineal respecto de la variable <x>,
     `linear' devuelve `<a>*<x> + <b>', siendo <a> no nula y, junto con
     <b>, no incluye a <x>. En otro caso, `linear' devuelve <expr>.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: gcdivide (<p>, <q>)
     Si `takegcd' vale `true', `gcdivide' divide los polinomios <p> y
     <q> por su máximo común divisor y devuelve el cociente de los
     resultados.

     Si `takegcd' vale `false', `gcdivide' devuelve el cociente
     `<p>/<q>'.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: arithmetic (<a>, <d>, <n>)
     Devuelve el <n>-ésimo término de la progresión aritmética `<a>,
     <a> + <d>, <a> + 2*<d>, ..., <a> + (<n> - 1)*<d>'.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: geometric (<a>, <r>, <n>)
     Devuelve el <n>-ésimo término de la progresión geométrica `<a>,
     <a>*<r>, <a>*<r>^2, ..., <a>*<r>^(<n> - 1)'.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: harmonic (<a>, <b>, <c>, <n>)
     Devuelve el <n>-ésimo término de la progresión armónica `<a>/<b>,
     <a>/(<b> + <c>), <a>/(<b> + 2*<c>), ..., <a>/(<b> + (<n> -
     1)*<c>)'.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: arithsum (<a>, <d>, <n>)
     Devuelve la suma de la progresión aritmética desde hasta el
     <n>-ésimo término.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: geosum (<a>, <r>, <n>)
     Devuelve la suma de la sucesión geométrica hasta el <n>-ésimo
     término.  Si <n> es infinito (`inf') la suma será finita sólo si
     el valor absoluto de <r> es menor que 1.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: gaussprob (<x>)
     Devuelve la función de densidad de probabilidad, normal
     `%e^(-<x>^2/2) / sqrt(2*%pi)'.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: gd (<x>)
     Devuelve la función de Gudermann, `2 * atan(%e^<x> - %pi/2)'.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: agd (<x>)
     Devuelve la inversa de la función de Gudermann, `log (tan (%pi/4 +
     x/2)))'.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: vers (<x>)
     Devuelve `1 - cos (x)'.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: covers (<x>)
     Devuelve `1 - sin (<x>)'.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: exsec (<x>)
     Devuelve `sec (<x>) - 1'.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: hav (<x>)
     Devuelve `(1 - cos(x))/2'.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: combination (<n>, <r>)
     Calcula el número de combinaciones de <n> objetos tomados de <r>
     en <r>.

     Para hacer uso de esta función ejecutar `load(functs)'.

 -- Función: permutation (<n>, <r>)
     Calcula el número de permutaciones de <r>, seleccionados de un
     conjunto de <n>.

     Para hacer uso de esta función ejecutar `load(functs)'.

66.2.4 Paquete ineq
-------------------

El paquete `ineq' contiene reglas de simplificación para desigualdades

   Una sesión de ejemplo:

     (%i1) load(ineq)$
     Warning: Putting rules on '+' or '*' is inefficient, and may not work.
     Warning: Putting rules on '+' or '*' is inefficient, and may not work.
     Warning: Putting rules on '+' or '*' is inefficient, and may not work.
     Warning: Putting rules on '+' or '*' is inefficient, and may not work.
     Warning: Putting rules on '+' or '*' is inefficient, and may not work.
     Warning: Putting rules on '+' or '*' is inefficient, and may not work.
     Warning: Putting rules on '+' or '*' is inefficient, and may not work.
     Warning: Putting rules on '+' or '*' is inefficient, and may not work.
     (%i2) a>=4;  /* a sample inequality */
     (%o2)                               a >= 4
     (%i3) (b>c)+%; /* add a second, strict inequality */
     (%o3)                            b + a > c + 4
     (%i4) 7*(x<y); /* multiply by a positive number */
     (%o4)                              7 x < 7 y
     (%i5) -2*(x>=3*z); /* multiply by a negative number */
     (%o5)                           - 2 x <= - 6 z
     (%i6) (1+a^2)*(1/(1+a^2)<=1); /* Maxima knows that 1+a^2 > 0 */
                                             2
     (%o6)                             1 <= a  + 1
     (%i7) assume(x>0)$ x*(2<3); /* assuming x>0 */
     (%o7)                              2 x < 3 x
     (%i8) a>=b; /* another inequality */
     (%o8)                               a >= b
     (%i9) 3+%; /* add something */
     (%o9)                           a + 3 >= b + 3
     (%i10) %-3; /* subtract it out */
     (%o10)                              a >= b
     (%i11) a>=c-b; /* yet another inequality */
     (%o11)                            a >= c - b
     (%i12) b+%; /* add b to both sides */
     (%o12)                            b + a >= c
     (%i13) %-c; /* subtract c from both sides */
     (%o13)                         - c + b + a >= 0
     (%i14) -%;  /* multiply by -1 */
     (%o14)                          c - b - a <= 0
     (%i15) (z-1)^2>-2*z; /* determining truth of assertion */
                                           2
     (%o15)                         (z - 1)  > - 2 z
     (%i16) expand(%)+2*z; /* expand this and add 2*z to both sides */
                                        2
     (%o16)                            z  + 1 > 0
     (%i17) %,pred;
     (%o17)                               true

   Debe tenerse cuidado con el uso de paréntesis que incluyan
desigualdades; si se escribe `(A > B) + (C = 5)' el resultado es `A + C
> B + 5', pero `A > B + C = 5' es un error sintáctico y `(A > B + C) =
5' es una cosa completamente diferente.

   Ejecútese `disprule (all)' para ver la lista completa de las reglas
definidas.

   Maxima preguntará al usuario cuando desconozca el signo de una
cantidad que multiplica a una desigualdad.

   Los fallos más comunes son:

     eq: a > b;
     2*eq;
     % - eq;

   Otro problema es el producto de una desigualdad por cero.  Si se
escribe `x*<some_inequality>' y Maxima pregunta por el signo de `x' y
se responde que vale `zero' (o `z'), el programa devuelve
`x*<some_inequality>' sin hacer uso de la información de que `x' es 0.
En tal caso se debería escribir `ev (%, x: 0)', ya que la base de datos
sólo será utilizada para fines comparativos y no para evaluar `x'.

   El usuario puede apreciar que las respuestas son más lentas al
cargarse este paquete, ya que el simplificador deberá examinar más
reglas que cuando no se hace uso del paquete, por lo que puede ser
conveniente borrar estas reglas cuando ya no se haga uso de ellas.
Ejecútese `kill (rules)' para eliminar todas las reglas (incluidas las
definidas por el usuario); también es posible eliminar parte de ellas o
utilizar `remrule' sobre una reglas específica.

   Nótese que si se carga este paquete después de haber definido otras
reglas de igual nombre,se borrarán las antiguas. Las reglas de este
paquete son: `*rule1', ..., `*rule8', `+rule1', ..., `+rule18',
debiéndose encerrar entre comillas el nombre de la reglas para
referenciarse a ellas, como en `remrule ("+", "+rule1")' para eliminar
la primera regla sobre `"+"', o `disprule ("*rule2")' para mostrar la
definición de la segunda regla multiplicativa.

66.2.5 Paquete rducon
---------------------

 -- Función: reduce_consts (<expr>)
     Sustituye subexpresiones constantes de <expr> por átomos,
     guardando la definición de todos ellos en la lista de ecuaciones
     `const_eqns' y devolviendo el expresión <expr> ya modificada. Se
     consideran partes constantes de <expr> aquellas que devuelven
     `true' cuando se les aplica la función `constantp', por lo que
     antes de llamar a `reduce_consts' se debe ejecutar

          declare ([<objetos a los que se quiera dar la propiedad de ser constantes>], constant)$

     para crear la base de datos de las cantidades constantes presentes
     en la expresión.

     Si se pretende generar código Fortran después de estos cálculos
     simbólicos, una de las primeras secciones del código debe ser el
     cálculo de las constantes. Para generar este segmento de código
     hacer

          map ('fortran, const_eqns)$

     Junto a `const_eqns', otras variables que afectan a
     `reduce_consts' son:

     `const_prefix' (Valor por defecto: `xx') es la cadena de
     caracteres utilizada como prefijo para todos los símbolos
     generados por `reduce_consts' para representar subexpresiones
     constantes.

     `const_counter' (Valor por defecto: 1) es el índice entero
     utilizado para generar los símbolos que representen a las
     subexpresiones constantes encontradas por `reduce_consts'.

     La instrucción `load (rducon)' carga esta función y `demo (rducon)'
     hace una demostración sobre su uso.

66.2.6 Paquete scifac
---------------------

 -- Función: gcfac (<expr>)
     Es una función de factorización que intenta aplicar la misma
     heurística que los humanos cuando tratan de hacer las expresiones
     más simples, limitándose a la factorización de monomios. En caso
     de sumas, `gcfac' hace lo siguiente:

       1. Factoriza los enteros.

       2. Factoriza las potencias mayores de los términos que aparecen
          como coeficientes, independientemente de su complejidad.

       3. Utiliza (1) y (2) en la factorización de pares de términos
          adyacentes.

       4. Aplica estas técnicas repetida y recursivamente hasta que la
          expresión deje de sufrir cambios.

     En general, el apartado (3) no hace una factorización óptima
     debido a la naturaleza combinatoria y compleja de encontrar cuál
     de todas las ordenaciones posibles de los pares da lugar a la
     expresión más compacta.

     La instrucción `load (scifac)' carga esta función y `demo (scifac)'
     hace una demostración sobre su uso.

66.2.7 Paquete sqdnst
---------------------

 -- Función: sqrtdenest (<expr>)
     Reduce expresiones en las que se encuentren raíces cuadradas
     anidadas, siempre que sea posible

     Ejemplo:

          (%i1) load (sqdnst)$
          (%i2) sqrt(sqrt(3)/2+1)/sqrt(11*sqrt(2)-12);
                                              sqrt(3)
                                         sqrt(------- + 1)
                                                 2
          (%o2)                        ---------------------
                                       sqrt(11 sqrt(2) - 12)
          (%i3) sqrtdenest(%);
                                            sqrt(3)   1
                                            ------- + -
                                               2      2
          (%o3)                            -------------
                                              1/4    3/4
                                           3 2    - 2

     A veces conviene aplicar `sqrtdenest' más de una vez, como en el
     caso `(19601-13860 sqrt(2))^(7/4)'.

     La sentencia `load (sqdnst)' carga esta función.


File: maxima.info,  Node: solve_rec,  Next: stats,  Prev: simplification,  Up: Top

67 solve_rec
************

* Menu:

* Introducción a solve_rec::
* Definiciones para solve_rec::


File: maxima.info,  Node: Introducción a solve_rec,  Next: Definiciones para solve_rec,  Prev: solve_rec,  Up: solve_rec

67.1 Introducción a solve_rec
=============================

El paquete `solve_rec' resuelve expresiones recurrentes lineales con
coeficientes polinomiales.

   Ejecútese `demo(solve_rec);' para ver una demostración sobre la
utilización de este paquete.

   Ejemplo:

     (%i1) load("solve_rec")$
     (%i2) solve_rec((n+4)*s[n+2] + s[n+1] - (n+1)*s[n], s[n]);
                                         n
                      %k  (2 n + 3) (- 1)          %k
                        1                            2
     (%o2)       s  = -------------------- + ---------------
                  n     (n + 1) (n + 2)      (n + 1) (n + 2)


File: maxima.info,  Node: Definiciones para solve_rec,  Prev: Introducción a solve_rec,  Up: solve_rec

67.2 Definiciones para solve_rec
================================

 -- Función: reduce_order (<rec>, <sol>, <var>)
     Reduce el orden de la expresión recurrente lineal <rec> cuando se
     conoce una solución particular <sol>. La recurrencia reducida
     puede utilizarse para obterner más soluciones.

     Ejemplo:

          (%i3) rec: x[n+2] = x[n+1] + x[n]/n;
                                                x
                                                 n
          (%o3)               x      = x      + --
                               n + 2    n + 1   n
          (%i4) solve_rec(rec, x[n]);
          WARNING: found some hypergeometrical solutions!
          (%o4)                    x  = %k  n
                                    n     1
          (%i5) reduce_order(rec, n, x[n]);
          (%t5)                    x  = n %z
                                    n       n

                                     n - 1
                                     ====
                                     \
          (%t6)                %z  =  >     %u
                                 n   /        %j
                                     ====
                                     %j = 0

          (%o6)             (- n - 2) %u     - %u
                                        n + 1     n
          (%i6) solve_rec((n+2)*%u[n+1] + %u[n], %u[n]);
                                               n
                                      %k  (- 1)
                                        1
          (%o6)                 %u  = ----------
                                  n    (n + 1)!

     So the general solution is

                       n - 1
                       ====        n
                       \      (- 1)
                 %k  n  >    -------- + %k  n
                   2   /     (n + 1)!     1
                       ====
                       n = 0


 -- Variable opcional: simplify_products
     Valor por defecto: `true'

     Si `simplify_products' vale `true', `solve_rec' intentará
     simplificar los productos del resultado.

     Véase también `solve_rec'.


 -- Función: simplify_sum (<expr>)
     Intenta reducir todas las sumas que aparecen en <expr> a una forma
     cerrada. La función `simplify_sum' utiliza los algoritmos de Gosper
     y Zeilberger para reducir las sumas.

     Para utilizar esta función cárguese previamente el paquete
     `simplify_sum' ejecutando la instrucción `load(simplify_sum)'.

     Ejemplo:

          (%i1) load("simplify_sum")$
          (%i2) sum(binom(n+k,k)/2^k, k, 0, n) + sum(binom(2*n, 2*k), k, 0, n);
                   n                            n
                  ====                         ====
                  \      binomial(n + k, k)    \
          (%o2)    >     ------------------ +   >    binomial(2 n, 2 k)
                  /               k            /
                  ====           2             ====
                  k = 0                        k = 0
          (%i3) simplify_sum(%);
                                         n
                                        4     n
          (%o3)                         -- + 2
                                        2


 -- Función: solve_rec (<eqn>, <var>, [<init>])
     Obtiene las soluciones hipergeométricas de la expresión recurrente
     <eqn> con coeficientes lineales en la variable <var>. Los
     argumentos opcionales <init> son condiciones iniciales.

     La función `solve_rec' puede resolver expresiones recurrentes con
     coeficientes constantes, encuentra soluciones hipergeométricas de
     expresiones recurrentes lineales homogéneas con coeficientes
     polinomiales, obtiene soluciones racionales de expresiones
     recurrentes lineales con coeficientes lineales y resuelve también
     expresiones recurrentes de Ricatti.

     Nótese que el tiempo de ejecución del algoritmo para encontrar
     soluciones hipergeométricas es exponencial respecto del grado del
     coeficiente principal.

     Para hacer uso de esta función ejecútese previamente
     `load(solve_rec);'.

     Ejemplo de recurrencia lineal con coeficientes constantes:

          (%i2) solve_rec(a[n]=a[n-1]+a[n-2]+n/2^n, a[n]);
                                  n          n
                     (sqrt(5) - 1)  %k  (- 1)
                                      1           n
          (%o2) a  = ------------------------- - ----
                 n               n                  n
                                2                5 2
                                                          n
                                             (sqrt(5) + 1)  %k
                                                              2    2
                                           + ------------------ - ----
                                                      n              n
                                                     2            5 2

     Ejemplo de recurrencia lineal con coeficientes polinomiales:

          (%i7) 2*x*(x+1)*y[x] - (x^2+3*x-2)*y[x+1] + (x-1)*y[x+2];
                                   2
          (%o7) (x - 1) y      - (x  + 3 x - 2) y      + 2 x (x + 1) y
                         x + 2                   x + 1                x
          (%i8) solve_rec(%, y[x], y[1]=1, y[3]=3);
                                        x
                                     3 2    x!
          (%o9)                 y  = ---- - --
                                 x    4     2

     Ejemplo de recurrencia de Ricatti:

          (%i2) x*y[x+1]*y[x] - y[x+1]/(x+2) + y[x]/(x-1) = 0;
                                      y         y
                                       x + 1     x
          (%o2)         x y  y      - ------ + ----- = 0
                           x  x + 1   x + 2    x - 1
          (%i3) solve_rec(%, y[x], y[3]=5)$
          (%i4) ratsimp(minfactorial(factcomb(%)));
                                             3
                                         30 x  - 30 x
          (%o4) y  = - -------------------------------------------------
                 x        6      5       4       3       2
                       5 x  - 3 x  - 25 x  + 15 x  + 20 x  - 12 x - 1584

     Véanse también `solve_rec_rat', `simplify_products' y
     `product_use_gamma'.


 -- Función: solve_rec_rat (<eqn>, <var>, [<init>])
     Calcula las soluciones racionales de las expresiones recurrentes
     lineales.  Véase `solve_rec' para la descripción de sus argumentos.

     Para hacer uso de esta función ejecútese previamente
     `load(solve_rec);'.

     Ejemplo:

          (%i1) (x+4)*a[x+3] + (x+3)*a[x+2] - x*a[x+1] + (x^2-1)*a[x];
          (%o1)  (x + 4) a      + (x + 3) a      - x a
                          x + 3            x + 2      x + 1
                                                             2
                                                         + (x  - 1) a
                                                                      x
          (%i2) solve_rec_rat(% = (x+2)/(x+1), a[x]);
                                 1
          (%o2)      a  = ---------------
                      x   (x - 1) (x + 1)

     Véase también `solve_rec'.


 -- Variable opcional: product_use_gamma
     Valor por defecto:`true'

     Si `product_use_gamma' vale `true',  `solve_rec' introduce la
     función gamma en la expresión del resultado cuando se simplifican
     productos.

     Véanse también `simplify_products' y `solve_rec'.


 -- Función: summand_to_rec (<summand>, <k>, <n>)
     Devuelve la expresión recurrente que satisface la suma

              inf
              ====
              \
               >     sumando
              /
              ====
            k = minf

     donde el sumando es hipergeométrico en  <k> y <n>.

     Para hacer uso de esta función deben cargarse previamente los
     paquetes `zeilberger' y `solve_rec' mediante la ejecución de las
     sentencias `load(solve_rec)' y `load(zeilberger)'.

          (%i17) load("zeilberger")$
          (%i18) summand: binom(3*k+1,k)*binom(3*(n-k),n-k)/(3*k+1)$
          (%i19) summand_to_rec(summand, k, n);
          Dependent equations eliminated:  (3 2)
          (%o19) - 4 (n + 2) (2 n + 3) (2 n + 5) sm
                                                   n + 2
                              2
           + 12 (2 n + 3) (9 n  + 27 n + 22) sm
                                               n + 1
           - 81 (n + 1) (3 n + 2) (3 n + 4) sm
                                              n
          (%i21) sum(''summand, k, 0, n), n=0;
          (%o21)                       1
          (%i22) sum(''summand, k, 0, n), n=1;
          (%o22)                       4
          (%i23) product_use_gamma: false$
          (%i24) solve_rec(%o19, sm[n], sm[0]=1, sm[1]=4);
                        n - 1               n - 1
                        /===\               /===\
                         ! !                 ! !                n
                       ( ! !   (3 %j + 2)) ( ! !   (3 %j + 4)) 3
                         ! !                 ! !
                        %j = 0              %j = 0
          (%o24) sm  = ------------------------------------------
                   n            n - 1
                                /===\
                                 ! !                n
                               ( ! !   (2 %j + 3)) 2  n!
                                 ! !
                                %j = 0



File: maxima.info,  Node: stats,  Next: stirling,  Prev: solve_rec,  Up: Top

68 stats
********

* Menu:

* Introducción a stats::
* Definiciones para inference_result::
* Definiciones para stats::
* Definiciones para distribuciones especiales::


File: maxima.info,  Node: Introducción a stats,  Next: Definiciones para inference_result,  Prev: Top,  Up: Top

68.1 Introducción a stats
=========================

El paquete `stats' contiene procedimientos clásicos sobre inferencia
estadística y contraste de hipótesis.

   Todas estas funciones devuelven un objeto Maxima de tipo
`inference_result', el cual contiene los resultados necesarios para
hacer inferencias sobre la población y toma de decisiones.

   La variable global `stats_numer' controla si los resultados deben
darse en formato decimal o simbólico y racional; su valor por defecto
es `true', por lo que el formato de salida es decimal.

   El paquete `descriptive' contiene algunas utilidades para manipular
estructuras de datos (listas y matrices); por ejemplo para extraer
submuestras.  También contiene algunos ejemplos sobre cómo utilizar el
paquete `numericalio' para leer datos de ficheros en texto plano. Véanse
`descriptive' y `numericalio' para más detalles.

   El paquete `stats' carga en memoria los paquetes `descriptive',
`distrib' y `inference_result'.

   Para comentarios, errores o sugerencias, contáctese con el autor en

   <'mario ARROBA edu PUNTO xunta PUNTO es'>.


File: maxima.info,  Node: Definiciones para inference_result,  Next: Definiciones para stats,  Prev: Introducción a stats,  Up: Top

68.2 Definiciones para inference_result
=======================================

 -- Función: inference_result (<title>, <values>, <numbers>)
     Construye un objeto `inference_result' del tipo devuelto por las
     funciones estadísticas. El argumento <title> es una cadena de
     Maxima con el nombre del procedimiento; <values> es una lista con
     elementos de la forma `symbol = value' y <numbers> es una lista
     con enteros positivos desde uno hasta `length(<values>)', que
     indican qué valores serán mostrados por defecto.

     Ejemplo:

     Este es un ejemplo que muestra los resultados asociados a un
     rectángulo. El título de este objeto es la cadena `"Rectangle"',
     el cual almacena cinco resultados, a saber, `'base', `'height',
     `'diagonal', `'area' y `'perimeter', pero sólo muestra el primero,
     segundo, quinto y cuarto. El resultado `'diagonal' también se
     almacena en este objeto, pero no se muestra por defecto; para
     tener acceso a este valor, hágase uso de la función
     `take_inference'.

          (%i1) load(inference_result)$
          (%i2) b: 3$ h: 2$
          (%i3) inference_result("Rectangle",
                                  ['base=b,
                                   'height=h,
                                   'diagonal=sqrt(b^2+h^2),
                                   'area=b*h,
                                   'perimeter=2*(b+h)],
                                  [1,2,5,4] );
                                  |   Rectangle
                                  |
                                  |    base = 3
                                  |
          (%o3)                   |   height = 2
                                  |
                                  | perimeter = 10
                                  |
                                  |    area = 6
          (%i4) take_inference('diagonal,%);
          (%o4)                        sqrt(13)

     Véase también `take_inference'.

 -- Función: inferencep (<obj>)
     Devuelve `true' o `false', dependiendo de que <obj> sea un objeto
     de tipo `inference_result' o no.


 -- Función: items_inference (<obj>)
     Devuelve una lista con los nombres de los elementos almacenados en
     <obj>, el cual debe ser un objeto de tipo `inference_result'.

     Ejemplo:

     El objeto `inference_result' almacena dos valores, cuyos nombres
     son `'pi' y `'e', pero sólo se muestra el segundo. La función
     `items_inference' devuelve los nombres de todos los elementos
     almacenados, independientemente de que sean mostrados o no.

          (%i1) load(inference_result)$
          (%i2) inference_result("Hi", ['pi=%pi,'e=%e],[2]);
                                      |   Hi
          (%o2)                       |
                                      | e = %e
          (%i3) items_inference(%);
          (%o3)                        [pi, e]

 -- Función: take_inference (<n>, <obj>)
 -- Función: take_inference (<name>, <obj>)
 -- Función: take_inference (<list>, <obj>)
     Si <n> es un entero positivo, devuelve el <n>-ésimo valor
     almacenado en <obj>; si el símbolo <name> es el nombre de uno de
     los elementos almacenados, también devuelve su valor. Si el primer
     elemento es una lista de números y/o símbolos, la función
     `take_inference' devuelve una lista con los resultados
     correspondientes.

     Ejemplo:

     Dado un objeto `inference_result', la función `take_inference' es
     invocada para extraer cierta información almacenada en él.

          (%i1) load(inference_result)$
          (%i2) b: 3$ h: 2$
          (%i3) sol: inference_result("Rectangle",
                                      ['base=b,
                                       'height=h,
                                       'diagonal=sqrt(b^2+h^2),
                                       'area=b*h,
                                       'perimeter=2*(b+h)],
                                      [1,2,5,4] );
                                  |   Rectangle
                                  |
                                  |    base = 3
                                  |
          (%o3)                   |   height = 2
                                  |
                                  | perimeter = 10
                                  |
                                  |    area = 6
          (%i4) take_inference('base,sol);
          (%o4)                           3
          (%i5) take_inference(5,sol);
          (%o5)                          10
          (%i6) take_inference([1,'diagonal],sol);
          (%o6)                     [3, sqrt(13)]
          (%i7) take_inference(items_inference(sol),sol);
          (%o7)                [3, 2, sqrt(13), 6, 10]

     Véanse también `inference_result' y `take_inference'.


File: maxima.info,  Node: Definiciones para stats,  Next: Definiciones para distribuciones especiales,  Prev: Definiciones para inference_result,  Up: Top

68.3 Definiciones para stats
============================

 -- Variable opcional: stats_numer
     Valor por defecto: `true'

     Cuando `stats_numer' vale `true', las funciones de inferencia
     estadística devuelven sus resultados en formato decimal de coma
     flotante. Cuando vale `false', los resultados se devuelven en
     formato simbólico y racional.

 -- Función: test_mean (<x>)
 -- Función: test_mean (<x>, <option_1>, <option_2>, ...)
     Es el test <t> de la media. El argumento <x> es una lista o matriz
     columna con los datos de una muestra unidimensional. También
     realiza el test asintótico basado en el Teorema Central del límite
     si se le asigna a la opción `'asymptotic' el valor `true'.

     Opciones:

        * `'mean', valor por defecto `0', es el valor de la media a
          contrastar.

        * `'alternative', valor por defecto `'twosided', es la
          hipótesis alternativa; valores válidos son: `'twosided',
          `'greater' y `'less'.

        * `'dev', valor por defecto `'unknown', este es el valor de la
          desviación típica cuando se conoce; valores válidos son:
          `'unknown' o una expresión con valor positivo.

        * `'conflevel', valor por defecto `95/100', nivel de confianza
          para el intervalo de confianza; debe ser una expresión que
          tome un valor en el intervalo (0,1).

        * `'asymptotic', valor por defecto `false', indica si debe
          realizar el test exacto basado en la <t> de Student, o el
          asintótico basado en el Teorema Central del límite; valores
          válidos son `true' y `false'.


     El resultado devuelto por la función  `test_mean' es un objeto
     `inference_result' con los siguientes resultados:

       1. `'mean_estimate': la media muestral.

       2. `'conf_level': nivel de confianza seleccionado por el usuario.

       3. `'conf_interval': intervalo de confianza para la media
          poblacional.

       4. `'method': procedimiento de inferencia.

       5. `'hypotheses': hipótesis nula y alternativa a ser contrastada.

       6. `'statistic': valor del estadístico de contraste utilizado
          para probar la hipótesis.

       7. `'distribution': distribución del estadístico de contraste,
          junto con su(s) parámetro(s).

       8. `'p_value': p-valor del test.


     Ejemplos:

     Realiza el contraste exacto <t> con varianza desconocida. La
     hipótesis nula es H_0: mean=50, frente a la alternativa unilátera
     H_1: mean<50; de acuerdo con los resultados, no hay evidencia para
     rechazar H_0, pues el p-valor es muy grande.

          (%i1) load("stats")$
          (%i2) data: [78,64,35,45,45,75,43,74,42,42]$
          (%i3) test_mean(data,'conflevel=0.9,'alternative='less,'mean=50);
                    |                 MEAN TEST
                    |
                    |            mean_estimate = 54.3
                    |
                    |              conf_level = 0.9
                    |
                    | conf_interval = [minf, 61.51314273502712]
                    |
          (%o3)     |  method = Exact t-test. Unknown variance.
                    |
                    | hypotheses = H0: mean = 50 , H1: mean < 50
                    |
                    |       statistic = .8244705235071678
                    |
                    |       distribution = [student_t, 9]
                    |
                    |        p_value = .7845100411786889

     En esta ocasión Maxima realiza un test asintótico. La hipótesis
     nula es H_0: equal(mean, 50) frente a la alternativa bilátera H_1:
     not equal(mean, 50); de acuerdo con los resultados, H_0 debe
     rechazarse en favor de la alternativa H_1, pues el p-valor es muy
     pequeño.  Nótese que, tal como indica la componente `Method', este
     procedimiento sólo puede aplicarse en muestras grandes.

          (%i1) load("stats")$
          (%i2) test_mean([36,118,52,87,35,256,56,178,57,57,89,34,25,98,35,
                        98,41,45,198,54,79,63,35,45,44,75,42,75,45,45,
                        45,51,123,54,151],
                        'asymptotic=true,'mean=50);
                    |                       MEAN TEST
                    |
                    |           mean_estimate = 74.88571428571429
                    |
                    |                   conf_level = 0.95
                    |
                    | conf_interval = [57.72848600856194, 92.04294256286663]
                    |
          (%o2)     |    method = Large sample z-test. Unknown variance.
                    |
                    |       hypotheses = H0: mean = 50 , H1: mean # 50
                    |
                    |             statistic = 2.842831192874313
                    |
                    |             distribution = [normal, 0, 1]
                    |
                    |             p_value = .004471474652002261


 -- Función: test_means_difference (<x1>, <x2>)
 -- Función: test_means_difference (<x1>, <x2>, <option_1>, <option_2>,
          ...)
     Este es el test <t> para la diferencia de medias con muestras.
     Los argumentos <x1> y <x2> son listas o matrices columna que
     contienen dos muestras independientes. En caso de varianzas
     diferentes y desconocidas (véanse las opciones `'dev1', `'dev2' y
     `'varequal' más abajo) los grados de libertad se calculan mediante
     la aproximación de Welch.  También realiza el test asintótico
     basado en el Teorema Central del límite si se le asigna a la
     opción `'asymptotic' el valor `true'.

     Opciones:

        *        * `'alternative', valor por defecto `'twosided', es la
          hipótesis alternativa; valores válidos son: `'twosided',
          `'greater' y `'less'.

        * `'dev1', valor por defecto `'unknown', es el valor de la
          desviación típica de la muestra <x1> cuando se conoce;
          valores válidos son: `'unknown' o una expresión positiva.

        * `'dev2', valor por defecto `'unknown', es el valor de la
          desviación típica de la muestra <x2> cuando se conoce;
          valores válidos son: `'unknown' o una expresión positiva.

        * `'varequal', valor por defecto `false', indica si las
          varianzas deben considerarse iguales o no; esta opción sólo
          toma efecto cuando `'dev1' y/o `'dev2' tienen el valor
          `'unknown'.

        * `'conflevel', valor por defecto `95/100', nivel de confianza
          para el intervalo de confianza; debe ser una expresión que
          tome un valor en el intervalo (0,1).

        * `'asymptotic', valor por defecto `false', indica si debe
          realizar el test exacto basado en la <t> de Student, o el
          asintótico basado en el Teorema Central del límite; valores
          válidos son `true' y `false'.


     El resultado devuelto por la función  `test_means_difference' es
     un objeto `inference_result' con los siguientes resultados:

       1. `'diff_estimate': el estimador de la diferencia de medias.

       2. `'conf_level': nivel de confianza seleccionado por el usuario.

       3. `'conf_interval': intervalo de confianza para la diferencia
          de medias.

       4. `'method': procedimiento de inferencia.

       5. `'hypotheses': hipótesis nula y alternativa a ser contrastada.

       6. `'statistic': valor del estadístico de contraste utilizado
          para probar la hipótesis.

       7. `'distribution': distribución del estadístico de contraste,
          junto con su(s) parámetro(s).

       8. `'p_value': p-valor del test.


     Ejemplos:

     La igualdad de medias se contrasta con dos pequeñas muestras <x> y
     <y>, contra la alternativa H_1: m_1>m_2, siendo m_1 y m_2 las
     medias poblacionales; las varianzas son desconocidas y se supone
     que diferentes.

          (%i1) load("stats")$
          (%i2) x: [20.4,62.5,61.3,44.2,11.1,23.7]$
          (%i3) y: [1.2,6.9,38.7,20.4,17.2]$
          (%i4) test_means_difference(x,y,'alternative='greater);
                      |              DIFFERENCE OF MEANS TEST
                      |
                      |         diff_estimate = 20.31999999999999
                      |
                      |                 conf_level = 0.95
                      |
                      |    conf_interval = [- .04597417812882298, inf]
                      |
          (%o4)       |        method = Exact t-test. Welch approx.
                      |
                      | hypotheses = H0: mean1 = mean2 , H1: mean1 > mean2
                      |
                      |           statistic = 1.838004300728477
                      |
                      |    distribution = [student_t, 8.62758740184604]
                      |
                      |            p_value = .05032746527991905

     El mismo test que antes, pero ahora se suponen las varianzas
     iguales.

          (%i1) load("stats")$
          (%i2) x: [20.4,62.5,61.3,44.2,11.1,23.7]$
          (%i3) y: matrix([1.2],[6.9],[38.7],[20.4],[17.2])$
          (%i4) test_means_difference(x,y,'alternative='greater,'varequal=true);
                      |              DIFFERENCE OF MEANS TEST
                      |
                      |         diff_estimate = 20.31999999999999
                      |
                      |                 conf_level = 0.95
                      |
                      |     conf_interval = [- .7722627696897568, inf]
                      |
          (%o4)       |   method = Exact t-test. Unknown equal variances
                      |
                      | hypotheses = H0: mean1 = mean2 , H1: mean1 > mean2
                      |
                      |           statistic = 1.765996124515009
                      |
                      |           distribution = [student_t, 9]
                      |
                      |            p_value = .05560320992529344


 -- Función: test_variance (<x>)
 -- Función: test_variance (<x>, <option_1>, <option_2>, ...)
     Este es el test <chi^2> de la varianza. El argumento <x> es una
     lista o matriz columna con los datos de una muestra unidimensional
     extraída de una población normal.

     Opciones:

        * `'mean', valor por defecto `'unknown', es la media de la
          población, si se conoce.

        * `'alternative', valor por defecto `'twosided', es la
          hipótesis alternativa; valores válidos son: `'twosided',
          `'greater' y `'less'.

        * `'variance', valor por defecto `1', este es el valor
          (positivo) de la varianza a contrastar.

        * `'conflevel', valor por defecto `95/100', nivel de confianza
          para el intervalo de confianza; debe ser una expresión que
          tome un valor en el intervalo (0,1).


     El resultado devuelto por la función  `test_variance' es un objeto
     `inference_result' con los siguientes resultados:

       1. `'var_estimate': la varianza muestral.

       2. `'conf_level': nivel de confianza seleccionado por el usuario.

       3. `'conf_interval': intervalo de confianza para la varianza
          poblacional.

       4. `'method': procedimiento de inferencia.

       5. `'hypotheses': hipótesis nula y alternativa a ser contrastada.

       6. `'statistic': valor del estadístico de contraste utilizado
          para probar la hipótesis.

       7. `'distribution': distribución del estadístico de contraste,
          junto con su parámetro.

       8. `'p_value': p-valor del test.


     Ejemplos:

     Se contrasta si la varianza de una población de media desconocida
     es igual o mayor que 200.

          (%i1) load("stats")$
          (%i2) x: [203,229,215,220,223,233,208,228,209]$
          (%i3) test_variance(x,'alternative='greater,'variance=200);
                       |                  VARIANCE TEST
                       |
                       |              var_estimate = 110.75
                       |
                       |                conf_level = 0.95
                       |
                       |     conf_interval = [57.13433376937479, inf]
                       |
          (%o3)        | method = Variance Chi-square test. Unknown mean.
                       |
                       |    hypotheses = H0: var = 200 , H1: var > 200
                       |
                       |                 statistic = 4.43
                       |
                       |             distribution = [chi2, 8]
                       |
                       |           p_value = .8163948512777689


 -- Función: test_variance_ratio (<x1>, <x2>)
 -- Función: test_variance_ratio (<x1>, <x2>, <option_1>, <option_2>,
          ...)
     Este es el test <F> del cociente de las varianzas para dos
     poblaciones normales. Los argumentos <x1> y <x2> son listas o
     matrices columna que contienen los datos de dos muestras
     independientes.

     Opciones:

        * `'alternative', valor por defecto `'twosided', es la
          hipótesis alternativa; valores válidos son: `'twosided',
          `'greater' y `'less'.

        * `'mean1', valor por defecto `'unknown', es la media de la
          población de la que procede <x1> cuando se conoce.

        * `'mean2', valor por defecto `'unknown', es la media de la
          población de la que procede <x2> cuando se conoce.

        * `'conflevel', valor por defecto `95/100', nivel de confianza
          para el intervalo de confianza del cociente; debe ser una
          expresión que tome un valor en el intervalo (0,1).


     El resultado devuelto por la función  `test_variance_ratio' es un
     objeto `inference_result' con los siguientes resultados

       1. `'ratio_estimate': el cociente de varianzas muestral.

       2. `'conf_level': nivel de confianza seleccionado por el usuario.

       3. `'conf_interval': intervalo de confianza para el cociente de
          varianzas.

       4. `'method': procedimiento de inferencia.

       5. `'hypotheses': hipótesis nula y alternativa a ser contrastada.

       6. `'statistic': valor del estadístico de contraste utilizado
          para probar la hipótesis.

       7. `'distribution': distribución del estadístico de contraste,
          junto con sus parámetros.

       8. `'p_value': p-valor del test.


     Ejemplos:

     Se contrasta la igualdad de varianzas de dos poblaciones normales
     frente a la alternativa de que la primera es mayor que la segunda.

          (%i1) load("stats")$
          (%i2) x: [20.4,62.5,61.3,44.2,11.1,23.7]$
          (%i3) y: [1.2,6.9,38.7,20.4,17.2]$
          (%i4) test_variance_ratio(x,y,'alternative='greater);
                        |              VARIANCE RATIO TEST
                        |
                        |       ratio_estimate = 2.316933391522034
                        |
                        |               conf_level = 0.95
                        |
                        |    conf_interval = [.3703504689507268, inf]
                        |
          (%o4)         | method = Variance ratio F-test. Unknown means.
                        |
                        | hypotheses = H0: var1 = var2 , H1: var1 > var2
                        |
                        |         statistic = 2.316933391522034
                        |
                        |            distribution = [f, 5, 4]
                        |
                        |          p_value = .2179269692254457


 -- Función: test_sign (<x>)
 -- Función: test_sign (<x>, <option_1>, <option_2>, ...)
     Este es el test no paramétrico de los signos para contrastes sobre
     la mediana de una población continua. El argumento <x> es una
     lista o matriz columna que contiene los datos de una muestra
     unidimensional.

     Opciones:

        * `'alternative', valor por defecto `'twosided', es la
          hipótesis alternativa; valores válidos son: `'twosided',
          `'greater' y `'less'.

        * `'median', valor por defecto `0', es el valor de la mediana a
          contrastar.


     El resultado devuelto por la función `test_sign' es un objeto
     `inference_result' con los siguientes resultados:

       1. `'med_estimate': la mediana muestral.

       2. `'method': procedimiento de inferencia.

       3. `'hypotheses': hipótesis nula y alternativa a ser contrastada.

       4. `'statistic': valor del estadístico de contraste utilizado
          para probar la hipótesis.

       5. `'distribution': distribución del estadístico de contraste,
          junto con sus parámetros.

       6. `'p_value': p-valor del test.


     Ejemplos:

     Contrasta si la mediana de la población de la que se ha extraido
     la muestra es 6, frente a la alternativa H_1: median > 6.

          (%i1) load("stats")$
          (%i2) x: [2,0.1,7,1.8,4,2.3,5.6,7.4,5.1,6.1,6]$
          (%i3) test_sign(x,'median=6,'alternative='greater);
                         |                  SIGN TEST
                         |
                         |              med_estimate = 5.1
                         |
                         |      method = Non parametric sign test.
                         |
          (%o3)          | hypotheses = H0: median = 6 , H1: median > 6
                         |
                         |                statistic = 7
                         |
                         |      distribution = [binomial, 10, 0.5]
                         |
                         |         p_value = .05468749999999989


 -- Función: test_signed_rank (<x>)
 -- Función: test_signed_rank (<x>, <option_1>, <option_2>, ...)
     Este el test de los rangos signados de Wilcoxon para hacer
     inferencias sobre la mediana de una población continua. El
     argumento <x> es una lista o matriz columna que contiene los datos
     de una muestra unidimensional.  Realiza la aproximación normal si
     el tamaño muestral es mayor que 20, o si en la muestra aparece
     algún cero o hay empates.

     Véanse también `pdf_rank_test' y `cdf_rank_test'.

     Opciones:

        * `'median', valor por defecto `0', es el valor de la mediana a
          ser contrastado.

        * `'alternative', valor por defecto `'twosided', es la
          hipótesis alternativa; valores válidos son: `'twosided',
          `'greater' y `'less'.


     El resultado devuelto por la función  `test_signed_rank' es un
     objeto `inference_result' con los siguientes resultados:

       1. `'med_estimate': la mediana muestral.

       2. `'method': procedimiento de inferencia.

       3. `'hypotheses': hipótesis nula y alternativa a ser contrastada.

       4. `'statistic': valor del estadístico de contraste utilizado
          para probar la hipótesis.

       5. `'distribution': distribución del estadístico de contraste,
          junto con su(s) parámetro(s).

       6. `'p_value': p-valor del test.


     Ejemplos:

     Contrasta la hipótesis nula H_0: median = 15 frente a la
     alternativa H_1: median > 15. Este test es exacto, puesto que no
     hay empates.

          (%i1) load("stats")$
          (%i2) x: [17.1,15.9,13.7,13.4,15.5,17.6]$
          (%i3) test_signed_rank(x,median=15,alternative=greater);
                           |             SIGNED RANK TEST
                           |
                           |           med_estimate = 15.7
                           |
                           |           method = Exact test
                           |
          (%o3)            | hypotheses = H0: med = 15 , H1: med > 15
                           |
                           |              statistic = 14
                           |
                           |     distribution = [signed_rank, 6]
                           |
                           |            p_value = 0.28125

     Contrasta la hipótesis nula H_0: equal(median, 2.5) frente a la
     alternativa H_1: not equal(median, 2.5). Este es un test
     asintótico, debido a la presencia de empates.

          (%i1) load("stats")$
          (%i2) y:[1.9,2.3,2.6,1.9,1.6,3.3,4.2,4,2.4,2.9,1.5,3,2.9,4.2,3.1]$
          (%i3) test_signed_rank(y,median=2.5);
                       |                 SIGNED RANK TEST
                       |
                       |                med_estimate = 2.9
                       |
                       |          method = Asymptotic test. Ties
                       |
          (%o3)        |    hypotheses = H0: med = 2.5 , H1: med # 2.5
                       |
                       |                 statistic = 76.5
                       |
                       | distribution = [normal, 60.5, 17.58195097251724]
                       |
                       |           p_value = .3628097734643669


 -- Función: test_rank_sum (<x1>, <x2>)
 -- Función: test_rank_sum (<x1>, <x2>, <option_1>)
     Este es el test de Wilcoxon-Mann-Whitney para comparar las medianas
     de dos poblaciones continuas. Los dos primeros argumentos <x1> y
     <x2> son listas o matrices columna con los datos de dos muestras
     independientes. Realiza la aproximación normal si alguna de las
     muestras tiene tamaño mayor que 10, o si hay empates.

     Opción:

        * `'alternative', valor por defecto `'twosided', es la
          hipótesis alternativa; valores válidos son: `'twosided',
          `'greater' y `'less'.


     El resultado devuelto por la función  `test_rank_sum' es un objeto
     `inference_result' con los siguientes resultados:

       1. `'method': procedimiento de inferencia.

       2. `'hypotheses': hipótesis nula y alternativa a ser contrastada.

       3. `'statistic': valor del estadístico de contraste utilizado
          para probar la hipótesis.

       4. `'distribution': distribución del estadístico de contraste,
          junto con sus parámetros.

       5. `'p_value': p-valor del test.


     Ejemplos:

     Contrasta si dos poblaciones tiene medianas similares. Al ser los
     tamaños muestrales pequeños, se realiza el test exacto.

          (%i1) load("stats")$
          (%i2) x:[12,15,17,38,42,10,23,35,28]$
          (%i3) y:[21,18,25,14,52,65,40,43]$
          (%i4) test_rank_sum(x,y);
                        |                 RANK SUM TEST
                        |
                        |              method = Exact test
                        |
                        | hypotheses = H0: med1 = med2 , H1: med1 # med2
          (%o4)         |
                        |                 statistic = 22
                        |
                        |        distribution = [rank_sum, 9, 8]
                        |
                        |          p_value = .1995886466474702

     Ahora, con muestras mayores y empates, el procedimiento realiza la
     aproximación normal. La hipótesis alternativa es H_1: median1 <
     median2.

          (%i1) load("stats")$
          (%i2) x: [39,42,35,13,10,23,15,20,17,27]$
          (%i3) y: [20,52,66,19,41,32,44,25,14,39,43,35,19,56,27,15]$
          (%i4) test_rank_sum(x,y,'alternative='less);
                       |                  RANK SUM TEST
                       |
                       |          method = Asymptotic test. Ties
                       |
                       |  hypotheses = H0: med1 = med2 , H1: med1 < med2
          (%o4)        |
                       |                 statistic = 48.5
                       |
                       | distribution = [normal, 79.5, 18.95419580097078]
                       |
                       |           p_value = .05096985666598441


 -- Función: test_normality (<x>)
     Test de Shapiro-Wilk para el contraste de normalidad. El argumento
     <x> es una lista de números, con tamaño muestral mayor que 2 y
     menor o igual que 5000; bajo cualesquiera otras condiciones, la
     función `test_normality' emite un mensaje de error.

     Referencia:

     [1] Algorithm AS R94, Applied Statistics (1995), vol.44, no.4,
     547-551

     El resultado devuelto por la función `test_normality' es un objeto
     `inference_result' con los siguientes resultados:

       1. `'statistic': valor del estadístico <W>.

       2. `'p_value': p-valor bajo la hipótesis de normalidad.


     Ejemplos:

     Contrasta la normalidad de una población a partir de una muestra
     de tamaño 9.

          (%i1) load("stats")$
          (%i2) x:[12,15,17,38,42,10,23,35,28]$
          (%i3) test_normality(x);
                                 |      SHAPIRO - WILK TEST
                                 |
          (%o3)                  | statistic = .9251055695162436
                                 |
                                 |  p_value = .4361763918860381


 -- Función: simple_linear_regression (<x>)
 -- Función: simple_linear_regression (<x> <option_1>)
     Regresión lineal simple, y_i=a+b x_i+e_i, donde las e_i son
     variables aleatorias independientes de distribución N(0,sigma).
     El argumento <x> debe ser una matriz de dos columnas o una lista
     de pares de números.

     Opciones:

        * `'conflevel', valor por defecto `95/100', nivel de confianza
          para el intervalo de confianza; debe ser una expresión que
          tome un valor en el intervalo (0,1).

        * `'regressor', valor por defecto `'x', nombre de la variable
          independiente.


     El resultado devuelto por la función  `simple_linear_regression'
     es un objeto `inference_result' con los siguientes resultados:

       1. `'model': la ecuación ajustada. Útil para hacer predicciones.
          Véanse los ejemplos más abajo.

       2. `'means': media bivariante.

       3. `'variances': varianzas de ambas variables.

       4. `'correlation': coeficiente de correlación.

       5. `'adc': coeficiente de determinación ajustado.

       6. `'a_estimation': estimador del parámetro <a>.

       7. `'a_conf_int': intervalo de confianza del parámetro <a>.

       8. `'b_estimation': estimador del parámetro <b>.

       9. `'b_conf_int': intervalo de confianza del parámetro <b>.

      10. `'hypotheses': hipótesis nula y altenativa sobre el parámetro
          <b>.

      11. `'statistic': valor del estadístico de contraste utilizado
          para probar la hipótesis.

      12. `'distribution': distribución del estadístico de contraste,
          junto con su parámetro.

      13. `'p_value': p-valor del test sobre <b>.

      14. `'v_estimation': estimador insesgado de la varianza, o
          varianza residual.

      15. `'v_conf_int': intervalo de confianza de la varianza.

      16. `'cond_mean_conf_int': intervalo de confianza para la media
          condicionada.  Véanse los ejemplos más abajo.

      17. `'new_pred_conf_int': intervalo de confianza para una nueva
          predicción.  Véanse los ejemplos más abajo.

      18. `'residuals': lista de pares (predicción, residuo), ordenado
          respecto de las predicciones.  Útil para el análisis de la
          bondad de ajuste. Véanse los ejemplos más abajo.


     Sólo los elementos 1, 4, 14, 9, 10, 11, 12 y 13 de arriba, y en
     este orden, son mostrados por defecto. El resto permanecen ocultos
     hasta que el usuario haga uso de las funciones `items_inference' y
     `take_inference'.

     Ejemplo:

     Ajuste de un modelo lineal a una muestra bivariante. La entrada
     `%i4' representa gráficamente la muestra junto con la recta de
     regresión; la entrada `%i5' calcula `y' dado `x=113'; también se
     calculan las medias y el intervalo de confianza para una nueva
     predicción cuando `x=113'.

          (%i1) load("stats")$
          (%i2) s:[[125,140.7],[130,155.1],[135,160.3],[140,167.2],[145,169.8]]$
          (%i3) z:simple_linear_regression(s,conflevel=0.99);
                     |               SIMPLE LINEAR REGRESSION
                     |
                     |   model = 1.405999999999985 x - 31.18999999999804
                     |
                     |           correlation = .9611685255255155
                     |
                     |           v_estimation = 13.57966666666665
                     |
          (%o3)      | b_conf_int = [.04469633662525263, 2.767303663374718]
                     |
                     |          hypotheses = H0: b = 0 ,H1: b # 0
                     |
                     |            statistic = 6.032686683658114
                     |
                     |            distribution = [student_t, 3]
                     |
                     |             p_value = 0.0038059549413203
          (%i4) plot2d([[discrete, s], take_inference(model,z)],
                        [x,120,150],
                        [gnuplot_curve_styles, ["with points","with lines"]] )$
          (%i5) take_inference(model,z), x=133;
          (%o5)                         155.808
          (%i6) take_inference(means,z);
          (%o6)                     [135.0, 158.62]
          (%i7) take_inference(new_pred_conf_int,z), x=133;
          (%o7)              [132.0728595995113, 179.5431404004887]



File: maxima.info,  Node: Definiciones para distribuciones especiales,  Prev: Definiciones para stats,  Up: Top

68.4 Definiciones para distribuciones especiales
================================================

 -- Función: pdf_signed_rank (<x>, <n>)
     Función de densidad de probabilidad de la distribución exacta del
     estadístico de contraste del test de los rangos signados. El
     argumento <x> es un número real y <n> un entero positivo.

     Véase también `test_signed_rank'.

 -- Función: cdf_signed_rank (<x>, <n>)
     Función de probabilidad acumulada de la distribución exacta del
     estadístico de contraste del test de los rangos signados. El
     argumento <x> es un número real y <n> un entero positivo.

     Véase también `test_signed_rank'.

 -- Función: pdf_rank_sum (<x>, <n>, <m>)
     Función de densidad de probabilidad de la distribución exacta del
     estadístico de contraste de Wilcoxon-Mann-Whitney.  El argumento
     <x> es un número real y <n> y <m> son ambos enteros positivos.

     Véase también `test_rank_sum'.

 -- Función: cdf_rank_sum (<x>, <n>, <m>)
     Función de probabilidad acumulada de la distribución exacta del
     estadístico de contraste de Wilcoxon-Mann-Whitney.  El argumento
     <x> es un número real y <n> y <m> son ambos enteros positivos.

     Véase también `test_rank_sum'.


File: maxima.info,  Node: stirling,  Next: stringproc,  Prev: stats,  Up: Top

69 stirling
***********

* Menu:

* Definiciones para stirling::


File: maxima.info,  Node: Definiciones para stirling,  Prev: stirling,  Up: stirling

69.1 Definiciones para stirling
===============================

 -- Función: stirling (<z>,<n>)
     Sustituye `gamma(x)' por la fórmula de Stirling O(1/x^(2n-1)).  Si
     <n> no es un entero no negativo, emite un mensaje de error.

     Referencia: Abramowitz & Stegun, " Handbook of mathematical
     functions", 6.1.40.

     Ejemplos:
          (%i1) load (stirling)$

          (%i2) stirling(gamma(%alpha+x)/gamma(x),1);
                 1/2 - x             x + %alpha - 1/2
          (%o2) x        (x + %alpha)
                                             1           1
                                      --------------- - ---- - %alpha
                                      12 (x + %alpha)   12 x
                                    %e
          (%i3) taylor(%,x,inf,1);
                              %alpha       2    %alpha
                    %alpha   x       %alpha  - x       %alpha
          (%o3)/T/ x       + -------------------------------- + . . .
                                           2 x
          (%i4) map('factor,%);
                                                 %alpha - 1
                   %alpha   (%alpha - 1) %alpha x
          (%o4)   x       + -------------------------------
                                            2

     La función `stirling' conoce la diferencia existente entre la
     variable 'gamma' y la función gamma:

          (%i5) stirling(gamma + gamma(x),0);
                                              x - 1/2   - x
          (%o5)    gamma + sqrt(2) sqrt(%pi) x        %e
          (%i6) stirling(gamma(y) + gamma(x),0);
                                   y - 1/2   - y
          (%o6) sqrt(2) sqrt(%pi) y        %e
                                                        x - 1/2   - x
                                   + sqrt(2) sqrt(%pi) x        %e

     Antes de hacer uso de esta función ejecútese  `load("stirling")'.


File: maxima.info,  Node: stringproc,  Next: unit,  Prev: stirling,  Up: Top

70 stringproc
*************

* Menu:

* Introducción al procesamiento de cadenas::
* Definiciones para entrada y salida::
* Definiciones para caracteres::
* Definiciones para cadenas::


File: maxima.info,  Node: Introducción al procesamiento de cadenas,  Next: Definiciones para entrada y salida,  Prev: stringproc,  Up: stringproc

70.1 Introducción al procesamiento de cadenas
=============================================

El paquete `stringproc' amplía las capacidades de Maxima para manipular
cadenas de caracteres, al tiempo que añade algunas funciones útiles
para la lectura y escritura de ficheros.

   Para dudas y fallos, por favor contáctese con van.nek at arcor.de .

   En Maxima, una cadena de caracteres se construye fácilmente
escribiéndola entre comillas dobles (`"'). Téngase en cuenta que las
cadenas de Maxima no son cadenas de Lisp, pudiéndose ejecutar las
funciones de chequeo `stringp' y `lstringp' con el fin de dilucidar qué
tipo de cadena es su argumento. Si por cualquier motivo el usuario
tiene una cadena de Lisp, quizás por haber hecho uso de la función
`sconcat', y la quiere convertir a una cadena de Maxima habrá de
utilizar la función conversora `sunlisp'.

     (%i1) m: "text";
     (%o1)                         text
     (%i2) [stringp(m),lstringp(m)];
     (%o2)                     [true, false]
     (%i3) l: sconcat("text");
     (%o3)                         text
     (%i4) [stringp(l),lstringp(l)];
     (%o4)                     [false, true]
     (%i5) stringp( sunlisp(l) );
     (%o5)                         true

   Todas las cadenas devueltas por las funciones de `stringproc' son
cadenas de Maxima.

   Los caracteres individuales se introducen como cadenas de Maxima de
longitud igual a la unidad. Estos caracteres no son caracteres de Lisp
y se pueden chequear con las funciones `charp' y `lcharp', pudiéndose
convertir los caracteres de Lisp a Maxima mediante `cunlisp'.

     (%i1) c: "e";
     (%o1)                           e
     (%i2) [charp(c),lcharp(c)];
     (%o2)                     [true, false]
     (%i3) supcase(c);
     (%o3)                           E
     (%i4) charp(%);
     (%o4)                         true

   Todos los caracteres devueltos por las funciones de `stringproc' son
caracteres de Maxima. Puesto que los caracteres introducidos son
cadenas de longitud igual a la unidad, se pueden utilizar las funciones
de cadenas también para los caracteres, como se ha hecho con `supcase'
en el anterior ejemplo.

   Es importante tener en cuenta que el primer carácter en una cadena
de Maxima ocupa la posición 1. Esto se ha diseñado así para mantener la
compatibilidad con las listas de Maxima. Véanse las definiciones de
`charat' y `charlist' para ver ejemplos.

   Las funciones de cadena se utilizan frecuentemente cuando se trabaja
con ficheros. El siguiente ejemplo muestra algunas de estas funciones
en acción.

   Ejemplo:

   La función `openw' envía un flujo de salida hacia un fichero,
entonces `printf' permitirá formatera la escritura en este fichero.
Véase `printf' para más detalles.

     (%i1) s: openw("E:/file.txt");
     (%o1)                    #<output stream E:/file.txt>
     (%i2) for n:0 thru 10 do printf( s, "~d ", fib(n) );
     (%o2)                                done
     (%i3) printf( s, "~%~d ~f ~a ~a ~f ~e ~a~%",
                   42,1.234,sqrt(2),%pi,1.0e-2,1.0e-2,1.0b-2 );
     (%o3)                                false
     (%i4) close(s);
     (%o4)                                true

   Una vez cerrado el flujo, se podrá abrir nuevamente. La función
`readline' devuelve el renglón entero como una única cadena. El paquete
`stringproc' dispone de muchas funciones para manipular cadenas. La
separación de palabras se puede hacer con `split' o `tokens'.

     (%i5) s: openr("E:/file.txt");
     (%o5)                     #<input stream E:/file.txt>
     (%i6) readline(s);
     (%o6)                     0 1 1 2 3 5 8 13 21 34 55
     (%i7) line: readline(s);
     (%o7)               42 1.234 sqrt(2) %pi 0.01 1.0E-2 1.0b-2
     (%i8) list: tokens(line);
     (%o8)           [42, 1.234, sqrt(2), %pi, 0.01, 1.0E-2, 1.0b-2]
     (%i9) map( parsetoken, list );
     (%o9)           [42, 1.234, false, false, 0.01, 0.01, false]

   La función `parsetoken' sólo analiza sintácticamente números enteros
y decimales. El análisis de símbolos y números decimales grandes (big
floats) necesita `parse_string', que se cargar automáticamente desde
`eval_string.lisp'.

     (%i10) map( parse_string, list );
     (%o10)           [42, 1.234, sqrt(2), %pi, 0.01, 0.01, 1.0b-2]
     (%i11) float(%);
     (%o11) [42.0, 1.234, 1.414213562373095, 3.141592653589793, 0.01, 0.01, 0.01]
     (%i12) readline(s);
     (%o12)                               false
     (%i13) close(s)$

   La función `readline' devuelve `false' cuando se alcanza el final
del fichero.


File: maxima.info,  Node: Definiciones para entrada y salida,  Next: Definiciones para caracteres,  Prev: Introducción al procesamiento de cadenas,  Up: stringproc

70.2 Definiciones para entrada y salida
=======================================

Ejemplo:

     (%i1) s: openw("E:/file.txt");
     (%o1)                     #<output stream E:/file.txt>
     (%i2) control:
     "~2tAn atom: ~20t~a~%~2tand a list: ~20t~{~r ~}~%~2tand an integer: ~20t~d~%"$
     (%i3) printf( s,control, 'true,[1,2,3],42 )$
     (%o3)                                false
     (%i4) close(s);
     (%o4)                                true
     (%i5) s: openr("E:/file.txt");
     (%o5)                     #<input stream E:/file.txt>
     (%i6) while stringp( tmp:readline(s) ) do print(tmp)$
       An atom:          true
       and a list:       one two three
       and an integer:   42
     (%i7) close(s)$

 -- Función: close (<stream>)
     Cierra el flujo de datos <stream> y devuelve `true' si <stream>
     había sido abierto.


 -- Función: flength (<stream>)
     Devuelve el número de elementos en el flujo de datos <stream>.


 -- Función: fposition (<stream>)
 -- Función: fposition (<stream>, <pos>)
     Devuelve la posición actual en el flujo de datos <stream> si no se
     utiliza <pos>.  Si se utiliza <pos>, `fposition' ajusta la
     posición en <stream>.  El argumento <pos> debe ser un número
     positivo, ocupando el primer elemento en <stream> la posición 1.


 -- Función: freshline ()
 -- Función: freshline (<stream>)
     Escribe una nueva línea (en el flujo de datos <stream>) si la
     posición actual no corresponde al inicio de la línea.

     Véase también `newline'.


 -- Función: newline ()
 -- Función: newline (<stream>)
     Escribe una nueva línea (en el flujo de datos  <stream>).

     Véase `sprint' para un ejemplo de uso de `newline()'.

     Nótese que hay algunos casos en los que `newline' no trabaja según
     lo esperado.


 -- Función: opena (<file>)
     Devuelve un flujo de datos al fichero <file>.  Si se abre un
     fichero ya existente, `opena' añade elementos al final del fichero.


 -- Función: openr (<file>)
     Devuelve un flujo de datos de entrada al fichero <file>.  Si
     <file> no existe, será creado.

 -- Función: openw (<file>)
     Devuelve un flujo de datos de salida al fichero <file>.  Si <file>
     no existe, será creado.  Si se abre un fichero ya existente,
     `openw' lo modifica borrando el contenido anterior.

 -- Función: printf (<dest>, <string>)
 -- Función: printf (<dest>, <string>, <expr_1>, ..., <expr_n>)
     Pone al alcance de Maxima la función FORMAT de Common Lisp.

     Véanse las referencias de Lisp para más información.

     La siguiente descripción y los ejemplos pueden dar una idea de
     cómo usar `printf'.

             ~%       nueva línea
             ~&       línea de refresco
             ~t       tabulación
             ~$       moneda
             ~d       entero en base decimal
             ~b       entero en base binaria
             ~o       entero en base octal
             ~x       entero en base hexadecimal
             ~br      entero en base b
             ~r       deletrea un entero
             ~p       plural
             ~f       decimal en coma flotante
             ~e       notación científica
             ~g       ~f o ~e, dependiendo de la magnitud
             ~a       tal como imprime la función de Maxima `print'
             ~s       cadenas limitadas por "comillas dobles"
             ~~       ~
             ~<       justificación, ~> termina
             ~(       conversor mayúscula/minúscula, ~) termina
             ~[       selección, ~] termina
             ~{       iteración, ~} termina

     Nótese que no hay un formato especificado para números decimales
     grandes (big floats). Sin embargo, estos números pueden escribirse
     utilizando simplemente la directiva `~a'. La directiva `~s'
     imprime cadenas encerradas entre "comillas dobles", lo cual se
     puede evitar utilizando `~a'.  Por otro lado, la directiva `~['
     está indexada a partir del cero.  Por último, indicar que algunas
     directivas no funcionan en Maxima, como por ejemplo `~:['.

          (%i1) printf( false, "~a ~a ~4f ~a ~@r",
                        "String",sym,bound,sqrt(12),144), bound = 1.234;
          (%o1)                 String sym 1.23 2*sqrt(3) CXLIV
          (%i2) printf( false,"~{~a ~}",["one",2,"THREE"] );
          (%o2)                          one 2 THREE
          (%i3) printf( true,"~{~{~9,1f ~}~%~}",mat ),
                        mat = args( matrix([1.1,2,3.33],[4,5,6],[7,8.88,9]) )$
                1.1       2.0       3.3
                4.0       5.0       6.0
                7.0       8.9       9.0
          (%i4) control: "~:(~r~) bird~p ~[is~;are~] singing."$
          (%i5) printf( false,control, n,n,if n=1 then 0 else 1 ), n=2;
          (%o5)                    Two birds are singing.

     Si <dest> es un flujo de datos o `true', entonces `printf'
     devuelve `false'. En otro caso, `printf' devuelve una cadena con
     la salida.

 -- Función: readline (<stream>)
     Devuelve una cadena con los caracteres desde la posición actual en
     el flujo de datos <stream> hasta el final de la línea, o `false'
     si está al final del fichero.

 -- Función: sprint (<expr_1>, ..., <expr_n>)
     Evalúa y muestra sus argumentos uno tras otro en un renglón
     comenzando por su extremo izquierdo.

     La función `newline()', que se carga automáticamente desde
     `stringproc.lisp', puede ser de utilidad si se quiere intercalar
     un salto de línea.

          (%i1) for n:0 thru 22 do sprint( fib(n) )$
          0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711
          (%i2) for n:0 thru 22 do (
                   sprint(fib(n)), if mod(n,10)=9 then newline() )$
          0 1 1 2 3 5 8 13 21 34
          55 89 144 233 377 610 987 1597 2584 4181
          6765 10946 17711



File: maxima.info,  Node: Definiciones para caracteres,  Next: Definiciones para cadenas,  Prev: Definiciones para entrada y salida,  Up: stringproc

70.3 Definiciones para caracteres
=================================

 -- Función: alphacharp (<char>)
     Devuelve `true' si <char> es una carácter alfabético.

 -- Función: alphanumericp (<char>)
     Devuelve `true' si <char> es una carácter alfabético o un dígito.

 -- Función: ascii (<int>)
     Devuelve el carácter correspondiente al número ASCII <int>,
     debiendo ser -1 < int < 256.

          (%i1) for n from 0 thru 255 do (
          tmp: ascii(n), if alphacharp(tmp) then sprint(tmp), if n=96 then newline() )$
          A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
          a b c d e f g h i j k l m n o p q r s t u v w x y z


 -- Función: cequal (<char_1>, <char_2>)
     Devuelve `true' si <char_1> y <char_2> son el mismo carácter.

 -- Función: cequalignore (<char_1>, <char_2>)
     Como `cequal', pero ignora si las letras están en mayúsculas o
     minúsculas.

 -- Función: cgreaterp (<char_1>, <char_2>)
     Devuelve  `true' si el número ASCII de <char_1> es mayor que el de
     <char_2>.

 -- Función: cgreaterpignore (<char_1>, <char_2>)
     Como `cgreaterp', pero ignora si las letras están en mayúsculas o
     minúsculas.

 -- Función: charp (<obj>)
     Devuelve `true' si <obj> es un carácter de Maxima.

 -- Función: cint (<char>)
     Devuelve el número ASCII de <char>.

 -- Función: clessp (<char_1>, <char_2>)
     Devuelve  `true' si el número ASCII de <char_1> es menor que el de
     <char_2>.

 -- Función: clesspignore (<char_1>, <char_2>)
     Como `clessp', pero ignora si las letras están en mayúsculas o
     minúsculas.

 -- Función: constituent (<char>)
     Devuelve `true' si <char> es un carácter gráfico y no el carácter
     espacio. Un carácter gráfico es el que se puede ver y con un
     espacio añadido; `constituent' está definido por Paul Graham, ANSI
     Common Lisp, 1996, page 67.

          (%i1) for n from 0 thru 255 do (
          tmp: ascii(n), if constituent(tmp) then sprint(tmp) )$
          ! " #  %  ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ? @ A B
          C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \ ] ^ _ ` a b c
          d e f g h i j k l m n o p q r s t u v w x y z { | } ~


 -- Función: cunlisp (<lisp_char>)
     Convierte un carácter Lisp en uno de Maxima. El uso de esta
     función por parte del usuario no será necesario.

 -- Función: digitcharp (<char>)
     Devuelve `true' si <char> es un dígito.

 -- Función: lcharp (<obj>)
     Devuelve `true' si <obj> es un carácter de Lisp.  El uso de esta
     función por parte del usuario no será necesario.

 -- Función: lowercasep (<char>)
     Devuelve  `true' si <char> es un carácter en minúscula.

 -- Variable: newline
     El carácter de nueva línea.

 -- Variable: space
     El carácter de espacio.

 -- Variable: tab
     El carácter de tabulación.

 -- Función: uppercasep (<char>)
     Devuelve `true' si <char> es un carácter en mayúscula.


File: maxima.info,  Node: Definiciones para cadenas,  Prev: Definiciones para caracteres,  Up: stringproc

70.4 Definiciones para cadenas
==============================

 -- Función: sunlisp (<lisp_string>)
     Convierte una cadena Lisp en una de Maxima.  El uso de esta
     función por parte del usuario no será necesario.

 -- Función: lstringp (<obj>)
     Devuelve `true' si <obj> es una cadena de Lisp.  El uso de esta
     función por parte del usuario no será necesario.

 -- Función: stringp (<obj>)
     Devuelve `true' si <obj> es una cadena de Maxima.  Véase un
     ejemplo en la introducción.

 -- Función: charat (<string>, <n>)
     Devuelve el <n>-ésimo carácter de <string>.  Al primer carácter de
     <string> le corresponde <n> = 1.

          (%i1) charat("Lisp",1);
          (%o1)                           L


 -- Función: charlist (<string>)
     Devuelve una lista con todos los caracteres de <string>.

          (%i1) charlist("Lisp");
          (%o1)                     [L, i, s, p]
          (%i2) %[1];
          (%o2)                           L


 -- Función: parsetoken (<string>)
     La función `parsetoken' convierte el primer lexema de <string> a
     su forma numérica, devolviendo `false' si no se puede determinar
     este número. El conjunto de delimitadores de lexemas es `{space,
     comma, semicolon, tab, newline}'.

          (%i1) 2*parsetoken("1.234 5.678");
          (%o1)                         2.468

     También se puede utilizar la función `parse_string' para el
     análisis sintáctico.

 -- Función: sconc (<expr_1>, ..., <expr_n>)
     Evalúa sus argumentos y los yuxtapone para formar una cadena.
     Esta función es similar a `sconcat', pero devuelve una cadena de
     Maxima.

          (%i1) sconc("xx[",3,"]:",expand((x+y)^3));
          (%o1)             xx[3]:y^3+3*x*y^2+3*x^2*y+x^3
          (%i2) stringp(%);
          (%o2)                         true


 -- Función: scopy (<string>)
     Devuelve una copia nueva de la cadena <string>.

 -- Función: sdowncase (<string>)
 -- Función: sdowncase (<string>, <start>)
 -- Función: sdowncase (<string>, <start>, <end>)
     Convierte caracteres en minúscula a mayúscula. Véase también
     `supcase'.

 -- Función: sequal (<string_1>, <string_2>)
     Devuelve `true' si <string_1> y <string_2> son dos cadenas de
     caracteres iguales.


 -- Función: sequalignore (<string_1>, <string_2>)
     Igual que `sequal' pero no diferencia entre minúsculas y
     mayúsculas..


 -- Función: sexplode (<string>)
     El nombre `sexplode' es un seudónimo de la función `charlist'.


 -- Función: simplode (<list>)
 -- Función: simplode (<list>, <delim>)
     La función `simplode' admite como entrada una lista de expresiones
     para luego convertirla en una cadena de caracteres. Si no se
     utiliza la opción <delim> para indicar el delimitador, entonces
     `simplode' actúa como `sconc' y no hace uso de ninguno. El valor
     de <delim> puede ser cualquier cadena.

          (%i1) simplode(["xx[",3,"]:",expand((x+y)^3)]);
          (%o1)             xx[3]:y^3+3*x*y^2+3*x^2*y+x^3
          (%i2) simplode( sexplode("stars")," * " );
          (%o2)                   s * t * a * r * s
          (%i3) simplode( ["One","more","coffee."]," " );
          (%o3)                   One more coffee.


 -- Función: sinsert (<seq>, <string>, <pos>)
     Devuelve la concatenación de las cadenas `substring (<string>, 1,
     <pos> - 1)', <seq> y `substring (<string>, <pos>)'.  Nótese que al
     primer carácter de <string> le corresponde la posición 1.

          (%i1) s: "A submarine."$
          (%i2) sconc( substring(s,1,3),"yellow ",substring(s,3) );
          (%o2)                  A yellow submarine.
          (%i3) sinsert("hollow ",s,3);
          (%o3)                  A hollow submarine.


 -- Función: sinvertcase (<string>)
 -- Función: sinvertcase (<string>, <start>)
 -- Función: sinvertcase (<string>, <start>, <end>)
     Devuelve la misma cadena <string> pero con todos sus caracteres
     desde la posición <start> hasta <end> quedan invertidos, esto es,
     las mayúsculas se convierten en minúsculas y éstas en mayúsculas.
     Si no se incluye el argumento <end>, se invierten todos los
     caracteres desde <start> hasta el final de la cadena.

          (%i1) sinvertcase("sInvertCase");
          (%o1)                      SiNVERTcASE


 -- Función: slength (<string>)
     Devuelve el número de caracteres de <string>.


 -- Función: smake (<num>, <char>)
     Construye una cadena de longitud <num> con todos sus caracteres
     iguales a <char>.

          (%i1) smake(3,"w");
          (%o1)                          www


 -- Función: smismatch (<string_1>, <string_2>)
 -- Función: smismatch (<string_1>, <string_2>, <test>)
     Devuelve la posición del primer carácter de <string_1> distinto del
     correpondiente a <string_2>. La respuesta será `false' si no existe
     tal carácter. Por defecto, la función de comparación es `sequal'.
     Si se quiere ignorar la diferencia entre mayúsculas y minúsculas,
     hágase uso de `sequalignore' para el argumento <test>.

          (%i1) smismatch("seven","seventh");
          (%o1)                           6


 -- Función: split (<string>)
 -- Función: split (<string>, <delim>)
 -- Función: split (<string>, <delim>, <multiple>)
     Devuelve la lista de todos los lexemas (tokens) de <string>.  La
     función `split' utiliza <delim> como delimitador, y en caso de no
     ser utilizado este argumento, será utilizado el espacio en blanco
     como delimitador por defecto. El argumento <multiple> es una
     variable booleana con valor `true' por defecto. Los delimitadores
     múltiples se leen como uno solo, lo que resulta de utilidad si las
     tabulaciones son almacenadas como secuencias de espacios en
     blanco. Si a <multiple> se le asigna el valor `false', se
     consirararán todos los delimitadores.

          (%i1) split("1.2   2.3   3.4   4.5");
          (%o1)                 [1.2, 2.3, 3.4, 4.5]
          (%i2) split("first;;third;fourth",";",false);
          (%o2)               [first, , third, fourth]


 -- Función: sposition (<char>, <string>)
     Devuelve la posición del primer carácter de <string> que coincide
     con <char>. Al primer carácter de <string> le corresponde la
     posición 1.  Para cuando se quiera ignorar la diferencia entre
     mayúsculas y minúsculas, véase <ssearch>.

 -- Función: sremove (<seq>, <string>)
 -- Función: sremove (<seq>, <string>, <test>)
 -- Función: sremove (<seq>, <string>, <test>, <start>)
 -- Función: sremove (<seq>, <string>, <test>, <start>, <end>)
     Devuelve la cadena <string> pero sin las subcadenas que coinciden
     con <seq>.  La función de comparación por defecto es `sequal'.  Si
     se quiere ignorar la diferencia entre mayúsculas y minúsculas,
     hágase uso de `sequalignore' para el argumento <test>.  Utilícense
     <start> y <end> para acotar la búsqueda.  Al primer carácter de
     <string> le corresponde la posición 1.

          (%i1) sremove("n't","I don't like coffee.");
          (%o1)                   I do like coffee.
          (%i2) sremove ("DO ",%,'sequalignore);
          (%o2)                    I like coffee.


 -- Función: sremovefirst (<seq>, <string>)
 -- Función: sremovefirst (<seq>, <string>, <test>)
 -- Función: sremovefirst (<seq>, <string>, <test>, <start>)
 -- Función: sremovefirst (<seq>, <string>, <test>, <start>, <end>)
     Actúa de forma similar a la función `sremove', pero sólo elimina
     la primera aparición de la subcadena `seq'.


 -- Función: sreverse (<string>)
     Devuelve una cadena con todos los caracteres de <string> en orden
     inverso.


 -- Función: ssearch (<seq>, <string>)
 -- Función: ssearch (<seq>, <string>, <test>)
 -- Función: ssearch (<seq>, <string>, <test>, <start>)
 -- Función: ssearch (<seq>, <string>, <test>, <start>, <end>)
     Devuelve la posición de la primera subcadena de <string> que
     coincide con la cadena <seq>.  La función de comparación por
     defecto es `sequal'.  Si se quiere ignorar la diferencia entre
     mayúsculas y minúsculas, hágase uso de `sequalignore' para el
     argumento <test>.  Utilícense <start> y <end> para acotar la
     búsqueda.  Al primer carácter de <string> le corresponde la
     posición 1.

          (%i1) ssearch("~s","~{~S ~}~%",'sequalignore);
          (%o1)                                  4


 -- Función: ssort (<string>)
 -- Función: ssort (<string>, <test>)
     Devuelve una cadena con todos los caracteres de <string> en un
     orden tal que no haya dos caracteres sucesivos <c> y <d> que
     verifiquen que `test (<c>, <d>)' sea igual `false' y `test (<d>,
     <c>)' igual a `true'.  La función de comparación <test> por
     defecto es  <clessp>, siendo el conjunto de posibles valores para
     este argumento `{clessp, clesspignore, cgreaterp, cgreaterpignore,
     cequal, cequalignore}'.

          (%i1) ssort("I don't like Mondays.");
          (%o1)                    '.IMaddeiklnnoosty
          (%i2) ssort("I don't like Mondays.",'cgreaterpignore);
          (%o2)                 ytsoonnMlkIiedda.'


 -- Función: ssubst (<new>, <old>, <string>)
 -- Función: ssubst (<new>, <old>, <string>, <test>)
 -- Función: ssubst (<new>, <old>, <string>, <test>, <start>)
 -- Función: ssubst (<new>, <old>, <string>, <test>, <start>, <end>)
     Devuelve una cadena similar a <string> pero en la que aquellas
     subcadenas coincidentes con <old> han sido sustituidas por <new>.
     Las subcadenas <old> y <new> no necesitan ser de la misma longitud.
     La función de comparación por defecto es `sequal'.  Si se quiere
     ignorar la diferencia entre mayúsculas y minúsculas durante la
     búsqueda de <old>, hágase uso de `sequalignore' para el argumento
     <test>.  Utilícense <start> y <end> para acotar la búsqueda.  Al
     primer carácter de <string> le corresponde la posición 1.

          (%i1) ssubst("like","hate","I hate Thai food. I hate green tea.");
          (%o1)          I like Thai food. I like green tea.
          (%i2) ssubst("Indian","thai",%,'sequalignore,8,12);
          (%o2)         I like Indian food. I like green tea.


 -- Función: ssubstfirst (<new>, <old>, <string>)
 -- Función: ssubstfirst (<new>, <old>, <string>, <test>)
 -- Función: ssubstfirst (<new>, <old>, <string>, <test>, <start>)
 -- Función: ssubstfirst (<new>, <old>, <string>, <test>, <start>,
          <end>)
     Actúa de forma similar a la función `subst', pero sólo hace la
     sustitución en la primera coincidencia con <old>.

 -- Función: strim (<seq>,<string>)
     Devuelve la cadena <string> pero recortando los caracteres de
     <seq> que tuviese en sus extremos.

          (%i1) "/* comment */"$
          (%i2) strim(" /*",%);
          (%o2)                        comment
          (%i3) slength(%);
          (%o3)                           7


 -- Función: striml (<seq>, <string>)
     Actúa de forma similar a `strim', pero sólo recorta en el extremo
     final de <string>.

 -- Función: strimr (<seq>, <string>)
     Actúa de forma similar a `strim', pero sólo recorta en el extremo
     inicial de <string>.

 -- Función: substring (<string>, <start>)
 -- Función: substring (<string>, <start>, <end>)
     Devuelve la subcadena de <string> que comienza en la posición
     <start> y termina en la posición <end>.  El carácter en la
     posición <end> no se incluye.  En caso de no suministrarse el
     argumento <end>, la subcadena se extenderá hasta el final.  Al
     primer carácter de <string> le corresponde la posición 1.

          (%i1) substring("substring",4);
          (%o1)                        string
          (%i2) substring(%,4,6);
          (%o2)                          in


 -- Función: supcase (<string>)
 -- Función: supcase (<string>, <start>)
 -- Función: supcase (<string>, <start>, <end>)
     Devuelve la cadena <string> con todos sus caracteres entre las
     posiciones <start> y <end> en minúscula transformados a mayúscula.
     En caso de no suministrarse el argumento <end>, los cambios se
     extenderán hasta el final.

          (%i1) supcase("english",1,2);
          (%o1)                        English


 -- Función: tokens (<string>)
 -- Función: tokens (<string>, <test>)
     Devuelve la lista de todos los lexemas (tokens) de <string>.  Los
     lexemas son subcadenas cuyos caracteres satisfacen la  condición
     <test>.  Si no se suministra el argumento <test>, se utilizará la
     condición <constituent>, siendo el conjunto de las otras
     alternativas `{constituent, alphacharp, digitcharp, lowercasep,
     uppercasep, charp, characterp, alphanumericp}'.

          (%i1) tokens("24 October 2005");
          (%o1)                  [24, October, 2005]
          (%i2) tokens("05-10-24",'digitcharp);
          (%o2)                     [05, 10, 24]
          (%i3) map(parsetoken,%);
          (%o3)                      [5, 10, 24]



File: maxima.info,  Node: unit,  Next: zeilberger,  Prev: stringproc,  Up: Top

71 unit
*******

* Menu:

* Introducción a Units::
* Definiciones para Units::


File: maxima.info,  Node: Introducción a Units,  Next: Definiciones para Units,  Prev: unit,  Up: unit

71.1 Introducción a Units
=========================

El paquete `unit' permite al usuario hacer cambios de unidades y llevar
a cabo el análisis dimensional de las ecuaciones. La forma de operar de
este paquete es radicalmente diferente de la del paquete original de
Maxima; mientras que en el paquete original era tan solo una lista de
definiciones, aquí se utiliza un conjunto de reglas que permiten
seleccionar al usuario en qué unidades debe devolverse la expresión
final.

   Junto con el análisis dimensional, el paquete aporta una serie de
herramientas para controlar las opciones de conversión y simplificación.
Además de la conversión automática adaptable a las necesidades del
usuario, el paquete `unit' permite hacer conversiones a la manera
tradicional.

   Nota: Cuando los factores de conversión no son exactos, Maxima los
transformará a fracciones como consecuencia de la metodología utilizada
para simplificar las unidades. Los mensajes de aviso concernientes a
estas transformaciones están desactivados por defecto en el caso de las
unidades (lo habitual es que estén activados en otros contextos) debido
a que al ser una operación muy frecuente, serían un estorbo.  El estado
previo de la variable `ratprint' queda restaurado tras la conversión de
las unidades, de manera que se mantendrá la opción seleccionada por el
usuario; en caso de que éste necesite ver dichos avisos, podrá hacer la
asignación `unitverbose:on' para reactivarlos desde el proceso de
conversión de unidades.

   El paquete `unit' se aloja en el directorio `share/contrib/unit' y
se ajusta a las convenciones de Maxima para la carga de paquetes:

     (%i1) load("unit")$
     *******************************************************************
     *                       Units version 0.50                        *
     *          Definitions based on the NIST Reference on             *
     *              Constants, Units, and Uncertainty                  *
     *       Conversion factors from various sources including         *
     *                   NIST and the GNU units package                *
     *******************************************************************

     Redefining necessary functions...
     WARNING: DEFUN/DEFMACRO: redefining function TOPLEVEL-MACSYMA-EVAL ...
     WARNING: DEFUN/DEFMACRO: redefining function MSETCHK ...
     WARNING: DEFUN/DEFMACRO: redefining function KILL1 ...
     WARNING: DEFUN/DEFMACRO: redefining function NFORMAT ...
     Initializing unit arrays...
     Done.

   Los avisos del tipo `WARNING' son normales y no deben interpretarse
como errores; tan solo indican que el paquete `unit' está redefiniendo
funciones que ya estaban definidas en Maxima. Esto es necesario para
que las unidades se gestionen de forma correcta. El usuario debe tener
en cuenta que si otros paquetes han cambiado las definiciones de estas
funciones, tales cambios serán ignorados por el proceso de carga de
`unit'.

   El paquete `unit' también carga el fichero de Lisp
`unit-functions.lisp', el cual contiene las funciones Lisp necesarias.

   El autor principal de este paquete es Clifford Yapp, quien ha
recibido ayuda y asistencia, entre otros, de Barton Willis y Robert
Dodier.


File: maxima.info,  Node: Definiciones para Units,  Prev: Introducción a Units,  Up: unit

71.2 Definiciones para Units
============================

 -- Función: setunits (<list>)
     El paquete `unit' no utiliza por defecto dimensiones derivadas,
     pero convierte todas las unidades a las siete fundamentales en
     unidades MKS.

          (%i2) N;
                                               kg m
          (%o2)                                ----
                                                 2
                                                s
          (%i3) dyn;
                                             1      kg m
          (%o3)                           (------) (----)
                                           100000     2
                                                     s
          (%i4) g;
                                              1
          (%o4)                             (----) (kg)
                                             1000
          (%i5) centigram*inch/minutes^2;
                                            127        kg m
          (%o5)                       (-------------) (----)
                                       1800000000000     2
                                                        s

     Este es el comportamiento que se desea en ciertos casos. Si el
     usuario necesita utilizar otras unidades, habrá de utilizar la
     instrucción `setunits':
          (%i6) setunits([centigram,inch,minute]);
          (%o6)                                done
          (%i7) N;
                                      1800000000000   %in cg
          (%o7)                      (-------------) (------)
                                           127            2
                                                      %min
          (%i8) dyn;
                                         18000000   %in cg
          (%o8)                         (--------) (------)
                                           127          2
                                                    %min
          (%i9) g;
          (%o9)                             (100) (cg)
          (%i10) centigram*inch/minutes^2;
                                              %in cg
          (%o10)                              ------
                                                  2
                                              %min

     La especificación de las variables es relativamente flexible.  Por
     ejemplo, si se quiere volver a utilizar kilogramos, metros y
     segundos como unidades por defecto, podemos hacer:
          (%i11) setunits([kg,m,s]);
          (%o11)                               done
          (%i12) centigram*inch/minutes^2;
                                            127        kg m
          (%o12)                      (-------------) (----)
                                       1800000000000     2
                                                        s

     Las unidades derivadas también se controlan con esta misma
     instrucción:
          (%i17) setunits(N);
          (%o17)                               done
          (%i18) N;
          (%o18)                                 N
          (%i19) dyn;
                                              1
          (%o19)                           (------) (N)
                                            100000
          (%i20) kg*m/s^2;
          (%o20)                                 N
          (%i21) centigram*inch/minutes^2;
                                              127
          (%o21)                        (-------------) (N)
                                         1800000000000

     Téngase en cuenta que el paquete `unit' reconoce que la
     combinación de masa, longitud e inversa del cuadrado del tiempo da
     lugar a una fuerza, convirtiéndola a newtons. Esta es la forma
     general en la que trabaja Maxima. Si el usuario prefiere dinas a
     newtons, tan solo tendrá que hacer lo siguiente:
          (%i22) setunits(dyn);
          (%o22)                               done
          (%i23) kg*m/s^2;
          (%o23)                          (100000) (dyn)
          (%i24) centigram*inch/minutes^2;
                                            127
          (%o24)                         (--------) (dyn)
                                          18000000

     Para desactivar una unidad se utiliza la instrucción `uforget':
          (%i26) uforget(dyn);
          (%o26)                               false
          (%i27) kg*m/s^2;
                                               kg m
          (%o27)                               ----
                                                 2
                                                s
          (%i28) centigram*inch/minutes^2;
                                            127        kg m
          (%o28)                      (-------------) (----)
                                       1800000000000     2
                                                        s
     Esto también hubiese funcionado con `uforget(N)' o
     `uforget(%force)'.

     Véase también `uforget'. Para hacer uso de esta función ejecútese
     `load("unit")'.

 -- Función: uforget (<list>)
     Por defecto, el paquete `unit' convierte todas las unidades a las
     siete fundamentales del sistema MKS. Este comportamiento puede
     alterarse mediante la instrucción `setunits'. Después, si el
     usuario quiere restaurar el comportamiento por defecto podrá
     hacerlo para una dimensión determinada haciendo uso de la
     instrucción `uforget':
          (%i13) setunits([centigram,inch,minute]);
          (%o13)                               done
          (%i14) centigram*inch/minutes^2;
                                              %in cg
          (%o14)                              ------
                                                  2
                                              %min
          (%i15) uforget([cg,%in,%min]);
          (%o15)                     [false, false, false]
          (%i16) centigram*inch/minutes^2;
                                            127        kg m
          (%o16)                      (-------------) (----)
                                       1800000000000     2
                                                        s

     La instrucción `uforget' opera sobre dimensiones, no sobre
     unidades, de modo que valdrá para cualquier unidad de una
     dimensión concreta. La propia dimensión es una argumento válido
     para esta función.

     Véase también `setunits'. Para hacer uso de esta función ejecútese
     `load("unit")'.

 -- Función: convert (<expr>, <list>)
     La función `convert' permite conversiones de una sola vez sin
     alterar el entorno global de ejecución. Acepta tanto un único
     argumento como una lista de unidades a utilizar en las
     conversiones. Cuando se realiza una llamada a `convert' se ignora
     el sistema global de evaluación, con el fin de evitar que el
     resultado deseado sea nuevamente transformado.  Como consecuencia
     de esto, en los cálculos con decimales, los avisos de tipo `rat'
     se harán visibles si la variable global `ratprint' vale `true'.
     Otra propiedad de `convert' es que permite al usuario hacer
     conversiones al sistema fundamental de dimensiones incluso cuando
     el entorno ha sido ajustado para simplificar a una dimensión
     derivada.
          (%i2) kg*m/s^2;
                                               kg m
          (%o2)                                ----
                                                 2
                                                s
          (%i3) convert(kg*m/s^2,[g,km,s]);
                                               g km
          (%o3)                                ----
                                                 2
                                                s
          (%i4) convert(kg*m/s^2,[g,inch,minute]);

          `rat' replaced 39.37007874015748 by 5000//127 = 39.37007874015748
                                        18000000000   %in g
          (%o4)                        (-----------) (-----)
                                            127           2
                                                      %min
          (%i5) convert(kg*m/s^2,[N]);
          (%o5)                                  N
          (%i6) convert(kg*m^2/s^2,[N]);
          (%o6)                                 m N
          (%i7) setunits([N,J]);
          (%o7)                                done
          (%i8) convert(kg*m^2/s^2,[N]);
          (%o8)                                 m N
          (%i9) convert(kg*m^2/s^2,[N,inch]);

          `rat' replaced 39.37007874015748 by 5000//127 = 39.37007874015748
                                           5000
          (%o9)                           (----) (%in N)
                                           127
          (%i10) convert(kg*m^2/s^2,[J]);
          (%o10)                                 J
          (%i11) kg*m^2/s^2;
          (%o11)                                 J
          (%i12) setunits([g,inch,s]);
          (%o12)                               done
          (%i13) kg*m/s^2;
          (%o13)                                 N
          (%i14) uforget(N);
          (%o14)                               false
          (%i15) kg*m/s^2;
                                          5000000   %in g
          (%o15)                         (-------) (-----)
                                            127       2
                                                     s
          (%i16) convert(kg*m/s^2,[g,inch,s]);

          `rat' replaced 39.37007874015748 by 5000//127 = 39.37007874015748
                                          5000000   %in g
          (%o16)                         (-------) (-----)
                                            127       2
                                                     s

     Véanse también `setunits' y `uforget'.  Para hacer uso de esta
     función ejecútese `load("unit")'.

 -- Variable opcional: usersetunits
     Valor por defecto: ninguno

     En caso de que el usuario desee que el comportamiento por defecto
     del paquete `unit' sea distinto del descrito, puede hacer uso del
     fichero `maxima-init.mac' y de la variable global `usersetunits'.
     El paquete `unit' comprobará al ser cargado si se le ha dado a esta
     variable una lista de unidades; en caso afirmativo, aplicará
     `setunits' a las unidades de esta lista y las utilizará por
     defecto. Una llamada a la función `uforget' permitirá retornar al
     comportamiento establecido por defecto por el usuario. Por
     ejemplo, si en el archivo `maxima-init.mac' se tiene el siguiente
     código:
          usersetunits : [N,J];

     observaríamos el siguiente comportamiento:
          (%i1) load("unit")$
          *******************************************************************
          *                       Units version 0.50                        *
          *          Definitions based on the NIST Reference on             *
          *              Constants, Units, and Uncertainty                  *
          *       Conversion factors from various sources including         *
          *                   NIST and the GNU units package                *
          *******************************************************************

          Redefining necessary functions...
          WARNING: DEFUN/DEFMACRO: redefining function TOPLEVEL-MACSYMA-EVAL ...
          WARNING: DEFUN/DEFMACRO: redefining function MSETCHK ...
          WARNING: DEFUN/DEFMACRO: redefining function KILL1 ...
          WARNING: DEFUN/DEFMACRO: redefining function NFORMAT ...
          Initializing unit arrays...
          Done.
          User defaults found...
          User defaults initialized.
          (%i2) kg*m/s^2;
          (%o2)                                  N
          (%i3) kg*m^2/s^2;
          (%o3)                                  J
          (%i4) kg*m^3/s^2;
          (%o4)                                 J m
          (%i5) kg*m*km/s^2;
          (%o5)                             (1000) (J)
          (%i6) setunits([dyn,eV]);
          (%o6)                                done
          (%i7) kg*m/s^2;
          (%o7)                           (100000) (dyn)
          (%i8) kg*m^2/s^2;
          (%o8)                     (6241509596477042688) (eV)
          (%i9) kg*m^3/s^2;
          (%o9)                    (6241509596477042688) (eV m)
          (%i10) kg*m*km/s^2;
          (%o10)                   (6241509596477042688000) (eV)
          (%i11) uforget([dyn,eV]);
          (%o11)                           [false, false]
          (%i12) kg*m/s^2;
          (%o12)                                 N
          (%i13) kg*m^2/s^2;
          (%o13)                                 J
          (%i14) kg*m^3/s^2;
          (%o14)                                J m
          (%i15) kg*m*km/s^2;
          (%o15)                            (1000) (J)

     De no haber hecho uso de `usersetunits', las entradas iniciales
     hubiesen sido convertidas a unidades MKS y cualquier llamada a
     `uforget' hubiese retornado también a MKS. Sin embargo, las
     preferencias establecidas por el usuario se respetan en ambos
     casos. Para eliminar las preferencias del usuario y volver a
     utilizar las establecidas por defecto por el paquete `unit', debe
     utilizarse la instrucción `dontusedimension'. La función `uforget'
     puede restaurar nuevamente las preferencias del usuario, pero sólo
     si `usedimension' mantiene su valor. Alternativamente,
     `kill(usersetunits)'  eliminará completamente cualquier vestigio
     de las preferencias del usuario durante la sesión actual. Véanse a
     continuación algunos ejemplos de aplicación de estas opciones:
          (%i2) kg*m/s^2;
          (%o2)                                  N
          (%i3) kg*m^2/s^2;
          (%o3)                                  J
          (%i4) setunits([dyn,eV]);
          (%o4)                                done
          (%i5) kg*m/s^2;
          (%o5)                           (100000) (dyn)
          (%i6) kg*m^2/s^2;
          (%o6)                     (6241509596477042688) (eV)
          (%i7) uforget([dyn,eV]);
          (%o7)                            [false, false]
          (%i8) kg*m/s^2;
          (%o8)                                  N
          (%i9) kg*m^2/s^2;
          (%o9)                                  J
          (%i10) dontusedimension(N);
          (%o10)                             [%force]
          (%i11) dontusedimension(J);
          (%o11)                         [%energy, %force]
          (%i12) kg*m/s^2;
                                               kg m
          (%o12)                               ----
                                                 2
                                                s
          (%i13) kg*m^2/s^2;
                                                   2
                                               kg m
          (%o13)                               -----
                                                 2
                                                s
          (%i14) setunits([dyn,eV]);
          (%o14)                               done
          (%i15) kg*m/s^2;
                                               kg m
          (%o15)                               ----
                                                 2
                                                s
          (%i16) kg*m^2/s^2;
                                                   2
                                               kg m
          (%o16)                               -----
                                                 2
                                                s
          (%i17) uforget([dyn,eV]);
          (%o17)                         [false, false]
          (%i18) kg*m/s^2;
                                               kg m
          (%o18)                               ----
                                                 2
                                                s
          (%i19) kg*m^2/s^2;
                                                   2
                                               kg m
          (%o19)                               -----
                                                 2
                                                s
          (%i20) usedimension(N);
          Done.  To have Maxima simplify to this dimension, use setunits([unit])
          to select a unit.
          (%o20)                               true
          (%i21) usedimension(J);
          Done.  To have Maxima simplify to this dimension, use setunits([unit])
          to select a unit.
          (%o21)                               true
          (%i22) kg*m/s^2;
                                               kg m
          (%o22)                               ----
                                                 2
                                                s
          (%i23) kg*m^2/s^2;
                                                   2
                                               kg m
          (%o23)                               -----
                                                 2
                                                s
          (%i24) setunits([dyn,eV]);
          (%o24)                               done
          (%i25) kg*m/s^2;
          (%o25)                          (100000) (dyn)
          (%i26) kg*m^2/s^2;
          (%o26)                    (6241509596477042688) (eV)
          (%i27) uforget([dyn,eV]);
          (%o27)                           [false, false]
          (%i28) kg*m/s^2;
          (%o28)                                 N
          (%i29) kg*m^2/s^2;
          (%o29)                                 J
          (%i30) kill(usersetunits);
          (%o30)                               done
          (%i31) uforget([dyn,eV]);
          (%o31)                          [false, false]
          (%i32) kg*m/s^2;
                                               kg m
          (%o32)                               ----
                                                 2
                                                s
          (%i33) kg*m^2/s^2;
                                                   2
                                               kg m
          (%o33)                               -----
                                                 2
                                                s

     Desafortunadamente, esta amplia variedad de opciones puede resultar
     confusa en un primer momento, pero una vez se practica un poco con
     ellas, el usuario comprobará que tiene un control absoluto sobre
     su entorno de trabajo.


 -- Función: metricexpandall (<x>)
     Reconstruye automáticamente las listas globales de unidades
     creando todas los múltiplos y submúltiplos métricos necesarios. El
     argumento numérico <x> se utiliza para especificar cuántos
     prefijos numéricos quiere utilizar el usuario. Los argumentos son
     los siguientes:
                         0 - none. Only base units
                         1 - kilo, centi, milli
          (por defecto)  2 - giga, mega, kilo, hecto, deka, deci, centi,
                             milli, micro, nano
                         3 - peta, tera, giga, mega, kilo, hecto, deka,
                             deci, centi, milli, micro, nano, pico,
                             femto
                         4 - todos

     Normalmente, Maxima no definirá el juego completo de múltiplos y
     submúltiplos, lo que implica un número muy grande de unidades, pero
     `metricexpandall' puede utilizarse para reconstruir la lista. La
     variable fundamental del paquete `unit' es `%unitexpand'.

 -- Variable opcional: %unitexpand
     Valor por defecto: `2'

     Es el valor suministrado a `metricexpandall' durante la carga del
     paquete `unit'.


File: maxima.info,  Node: zeilberger,  Next: Índice de Funciones y Variables,  Prev: unit,  Up: Top

72 zeilberger
*************

* Menu:

* Introducción a zeilberger::
* Definiciones para zeilberger::


File: maxima.info,  Node: Introducción a zeilberger,  Next: Definiciones para zeilberger,  Prev: zeilberger,  Up: zeilberger

72.1 Introducción a zeilberger
==============================

El paquete `zeilberger' implementa el algoritmo de Zeilberger para la
suma hipergeométrica definida y el algoritmo de Gosper para la suma
hipergeométrica indefinida. Además, hace uso del método de optimización
por filtrado desarrollado por Axel Riese.

   El autor de este paquete es Fabrizio Caruso.

   Antes de hacer uso de las funciones aquí definidas, ejecútese la
sentencia `load (zeilberger)'.

72.1.0.1 El problema de la suma indefinida
..........................................

El paquete `zeilberger' implementa el algoritmo de Gosper para la suma
hipergeométrica indefinida.  Dado el término general hipergeométrico
F_k de índice k, se plantea el problema de encontrar su antidiferencia
hipergeométrica, esto es, el término hipergeométrico tal que F_k =
f_(k+1) - f_k.

72.1.0.2 El problema de la suma definida
........................................

El paquete `zeilberger' implementa el algoritmo de Zeilberger para la
suma hipergeométrica definida.  Dados el término hipergeométrico propio
F_(n,k), de índices n y k, y el entero positivo d, se plantea el
problema de encontrar una expresión recurrente lineal de orden d con
coeficientes polinomiales en n y una función racional R en n y k tales
que

   a_0 F_(n,k) + ... + a_d F_(n+d),k = Delta_K(R(n,k) F_(n,k))

   donde Delta_k es el k-ésimo operador diferencia hacia adelante, esto
es, Delta_k(t_k) := t_(k+1) - t_k.

72.1.1 Niveles de información
-----------------------------

Hay versiones extendidas de los nombres de las instrucciones, que se
construyen añadiendo uno de los siguientes prefijos:

`Summary'
     Tan solo muestra un sumario al final

`Verbose'
     Alguna información en los niveles intermedios

`VeryVerbose'
     Más información

`Extra'
     Aún más información, incluida alguna sobre el sistema lineal en el
     algoritmo de Zeilberger.

   Por ejemplo: `GosperVerbose', `parGosperVeryVerbose',
`ZeilbergerExtra', `AntiDifferenceSummary'.


File: maxima.info,  Node: Definiciones para zeilberger,  Prev: Introducción a zeilberger,  Up: zeilberger

72.2 Definiciones para zeilberger
=================================

 -- Función: AntiDifference (<F_k>, <k>)
     Returns the hypergeometric anti-difference of <F_k>, if it exists.
     Otherwise `AntiDifference' returns `no_hyp_antidifference'.

 -- Función: Gosper (<F_k>, <k>)
     Devuelve, si existe, el elemento racional asociado a <F_k>, esto
     es, la función racional que verifica

     F_k = R(k+1) F_(k+1) - R(k) F_k.

     En caso de no existir este elemento, `Gosper' devuelve
     `no_hyp_sol'.

 -- Función: GosperSum (<F_k>, <k>, <a>, <b>)
     Devuelve la suma de los términos <F_k> desde <k> = <a> hasta <k> =
     <b> si <F_k> tiene una antidiferencia hipergeométrica. En caso
     contrario, `GosperSum' devuelve `nongosper_summable'.

     Ejemplos:

          (%i1) load (zeilberger);
          (%o1)  /usr/share/maxima/share/contrib/Zeilberger/zeilberger.mac
          (%i2) GosperSum ((-1)^k*k / (4*k^2 - 1), k, 1, n);

          Dependent equations eliminated:  (1)
                                     3       n + 1
                                (n + -) (- 1)
                                     2               1
          (%o2)               - ------------------ - -
                                            2        4
                                2 (4 (n + 1)  - 1)
          (%i3) GosperSum (1 / (4*k^2 - 1), k, 1, n);
                                          3
                                    - n - -
                                          2       1
          (%o3)                  -------------- + -
                                          2       2
                                 4 (n + 1)  - 1
          (%i4) GosperSum (x^k, k, 1, n);
                                    n + 1
                                   x          x
          (%o4)                    ------ - -----
                                   x - 1    x - 1
          (%i5) GosperSum ((-1)^k*a! / (k!*(a - k)!), k, 1, n);
                                          n + 1
                          a! (n + 1) (- 1)              a!
          (%o5)       - ------------------------- - ----------
                        a (- n + a - 1)! (n + 1)!   a (a - 1)!
          (%i6) GosperSum (k*k!, k, 1, n);

          Dependent equations eliminated:  (1)
          (%o6)                     (n + 1)! - 1
          (%i7) GosperSum ((k + 1)*k! / (k + 1)!, k, 1, n);
                            (n + 1) (n + 2) (n + 1)!
          (%o7)             ------------------------ - 1
                                    (n + 2)!
          (%i8) GosperSum (1 / ((a - k)!*k!), k, 1, n);
          (%o8)                  nonGosper_summable

 -- Función: parGosper (<F_{n,k}>, <k>, <n>, <d>)
     Intenta calcular una recurrecia de orden <d> para <F_{n,k}>.

     El algoritmo devuelve una secuencia [s_1, s_2, ..., s_m] de
     soluciones, cada una de las cuales tiene la forma

     [R(n, k), [a_0, a_1, ..., a_d]].

     La función `parGosper' devuelve `[]' si no encuentra ninguna
     recurrencia.

 -- Función: Zeilberger (<F_{n,k}>, <k>, <n>)
     Intenta calcular la suma hipergeométrica indefinida de <F_{n,k}>.

     La función `Zeilberger' invoca en primer lugar a `Gosper', y en
     caso de no encontrar una solución, llama después a `parGosper' con
     los órdenes 1, 2, 3, ..., hasta `max_ord'. Si `Zeilberger'
     encuentra una solución antes de alcanzar `max_ord', se detiene su
     ejecución y devuelve el resultado.

     El algoritmo devuelve una secuencia [s_1, s_2, ..., s_m] de
     soluciones, cada una de las cuales tiene la forma

     [R(n, k), [a_0, a_1, ..., a_d]].

     La función `Zeilberger' devuelve `[]' si no encuentra ninguna
     solución.

     La función `Zeilberger' llama a `Gosper' sólo si
     `gosper_in_zeilberger' tiene el valor `true'.

 -- Variable opcional: max_ord
     Valor por defecto: 5

     `max_ord' es el máximo orden de recurrencia que ensayará la
     función `Zeilberger'.

 -- Variable opcional: simplified_output
     Valor por defecto: `false'

     Si `simplified_output' vale `true', las funciones del paquete
     `zeilberger' tratan de presentar las soluciones simplificadas.

 -- Variable opcional: linear_solver
     Valor por defecto: `linsolve'

     La variable `linear_solver' guarda el nombre de la función que se
     utilizará para resolver el sistema de ecuaciones del algoritmo de
     Zeilberger.

 -- Variable opcional: warnings
     Valor por defecto: `true'

     Si `warnings' vale `true', las funciones del paquete `zeilberger'
     emiten mensajes de aviso durante su ejecución.

 -- Variable opcional: gosper_in_zeilberger
     Valor por defecto: `true'

     Si `gosper_in_zeilberger' vale `true', la función `Zeilberger'
     llama a la función `Gosper' antes de llamar a `parGosper'.  En
     caso contrario, `Zeilberger' invoca inmediatamente a `parGosper'.

 -- Variable opcional: trivial_solutions
     Valor por defecto: `true'

     Si `trivial_solutions' vale `true', la función `Zeilberger'
     devuelve soluciones triviales.

 -- Variable opcional: mod_test
     Valor por defecto: `false'

     Si `mod_test' vale `true', la función `parGosper' ejecuta una
     prueba modular para descartar sistemas sin soluciones.

 -- Variable opcional: modular_linear_solver
     Valor por defecto: `linsolve'

     La variable `modular_linear_solver' guarda el nombre de la función
     que deberá ser llamada por la prueba modular de `parGosper' para
     resolver sistemas lineales.

 -- Variable opcional: ev_point
     Valor por defecto: `big_primes[10]'

     La variable `ev_point' guarda el valor para el que debe evaluarse
     <n> durante la ejecución de la prueba modular de `parGosper'.

 -- Variable opcional: mod_big_prime
     Valor por defecto: `big_primes[1]'

     La variable `mod_big_prime' guarda el módulo utilizado por la
     prueba modular de `parGosper'.

 -- Variable opcional: mod_threshold
     Valor por defecto: 4

     La variable `mod_threshold' es el máximo orden que ensaya la
     prueba modular de `parGosper'.



Local Variables:
coding: iso-8859-1
End:
